import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ConfigurationProvider } from '../config/config.provider';
import { LoggerService } from '../logging/logger.service';
import { EventTypes } from '../public-events/event-types';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistanceService } from '../storage/storage-persistance.service';
import { TokenValidationService } from '../validation/token-validation.service';
import { AuthorizedState } from './authorized-state';
var AuthStateService = /** @class */ (function () {
    function AuthStateService(storagePersistanceService, loggerService, publicEventsService, configurationProvider, tokenValidationService) {
        this.storagePersistanceService = storagePersistanceService;
        this.loggerService = loggerService;
        this.publicEventsService = publicEventsService;
        this.configurationProvider = configurationProvider;
        this.tokenValidationService = tokenValidationService;
        // event which contains the state
        this.authorizedInternal$ = new BehaviorSubject(false);
        this.authState = AuthorizedState.Unknown;
    }
    Object.defineProperty(AuthStateService.prototype, "authorized$", {
        get: function () {
            return this.authorizedInternal$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    AuthStateService.prototype.setAuthorizedAndFireEvent = function () {
        // set the correct values in storage
        this.authState = AuthorizedState.Authorized;
        this.persistAuthStateInStorage(this.authState);
        this.authorizedInternal$.next(true);
    };
    AuthStateService.prototype.setUnauthorizedAndFireEvent = function () {
        // set the correct values in storage
        this.authState = AuthorizedState.Unauthorized;
        this.storagePersistanceService.resetAuthStateInStorage();
        this.authorizedInternal$.next(false);
    };
    AuthStateService.prototype.initStateFromStorage = function () {
        var currentAuthorizedState = this.getCurrentlyPersistedAuthState();
        if (currentAuthorizedState === AuthorizedState.Authorized) {
            this.authState = AuthorizedState.Authorized;
        }
        else {
            this.authState = AuthorizedState.Unknown;
        }
    };
    AuthStateService.prototype.updateAndPublishAuthState = function (authorizationResult) {
        this.publicEventsService.fireEvent(EventTypes.NewAuthorizationResult, authorizationResult);
    };
    AuthStateService.prototype.setAuthorizationData = function (accessToken, idToken) {
        this.loggerService.logDebug(accessToken);
        this.loggerService.logDebug(idToken);
        this.loggerService.logDebug('storing to storage, getting the roles');
        this.storagePersistanceService.accessToken = accessToken;
        this.storagePersistanceService.idToken = idToken;
        this.setAuthorizedAndFireEvent();
    };
    AuthStateService.prototype.getAccessToken = function () {
        if (!(this.authState === AuthorizedState.Authorized)) {
            return '';
        }
        var token = this.storagePersistanceService.getAccessToken();
        return decodeURIComponent(token);
    };
    AuthStateService.prototype.getIdToken = function () {
        if (!(this.authState === AuthorizedState.Authorized)) {
            return '';
        }
        var token = this.storagePersistanceService.getIdToken();
        return decodeURIComponent(token);
    };
    AuthStateService.prototype.getRefreshToken = function () {
        if (!(this.authState === AuthorizedState.Authorized)) {
            return '';
        }
        var token = this.storagePersistanceService.getRefreshToken();
        return decodeURIComponent(token);
    };
    AuthStateService.prototype.areAuthStorageTokensValid = function () {
        var currentAuthState = this.getCurrentlyPersistedAuthState();
        if (currentAuthState !== AuthorizedState.Authorized) {
            return false;
        }
        this.loggerService.logDebug("authorizedState in storage is " + currentAuthState);
        if (this.hasIdTokenExpired()) {
            this.loggerService.logDebug('persisted id_token is expired');
            return false;
        }
        if (this.hasAccessTokenExpiredIfExpiryExists()) {
            this.loggerService.logDebug('persisted access_token is expired');
            return false;
        }
        this.loggerService.logDebug('persisted id_token and access token are valid');
        return true;
    };
    AuthStateService.prototype.setAuthResultInStorage = function (authResult) {
        this.storagePersistanceService.authResult = authResult;
    };
    AuthStateService.prototype.hasIdTokenExpired = function () {
        var tokenToCheck = this.storagePersistanceService.idToken;
        var idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds);
        if (idTokenExpired) {
            this.publicEventsService.fireEvent(EventTypes.IdTokenExpired, idTokenExpired);
        }
        return idTokenExpired;
    };
    AuthStateService.prototype.hasAccessTokenExpiredIfExpiryExists = function () {
        var accessTokenExpiresIn = this.storagePersistanceService.accessTokenExpiresIn;
        var accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(accessTokenExpiresIn, this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds);
        var hasExpired = !accessTokenHasNotExpired;
        if (hasExpired) {
            this.publicEventsService.fireEvent(EventTypes.TokenExpired, hasExpired);
        }
        return hasExpired;
    };
    AuthStateService.prototype.getCurrentlyPersistedAuthState = function () {
        return this.storagePersistanceService.authorizedState;
    };
    AuthStateService.prototype.persistAuthStateInStorage = function (authState) {
        this.storagePersistanceService.authorizedState = authState;
    };
    AuthStateService.ctorParameters = function () { return [
        { type: StoragePersistanceService },
        { type: LoggerService },
        { type: PublicEventsService },
        { type: ConfigurationProvider },
        { type: TokenValidationService }
    ]; };
    AuthStateService = __decorate([
        Injectable()
    ], AuthStateService);
    return AuthStateService;
}());
export { AuthStateService };
//# sourceMappingURL=data:application/json;base64,