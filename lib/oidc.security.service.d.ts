import { Observable } from 'rxjs';
import { AuthOptions } from './auth-options';
import { AuthStateService } from './authState/auth-state.service';
import { CallbackService } from './callback/callback.service';
import { ConfigurationProvider } from './config/config.provider';
import { FlowsDataService } from './flows/flows-data.service';
import { FlowsService } from './flows/flows.service';
import { CheckSessionService } from './iframe/check-session.service';
import { SilentRenewService } from './iframe/silent-renew.service';
import { LoggerService } from './logging/logger.service';
import { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';
import { UserService } from './userData/user-service';
import { RedirectService } from './utils/redirect/redirect.service';
import { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';
import { UrlService } from './utils/url/url.service';
import { TokenValidationService } from './validation/token-validation.service';
export declare class OidcSecurityService {
    private checkSessionService;
    private silentRenewService;
    private userService;
    private tokenValidationService;
    private tokenHelperService;
    private loggerService;
    private configurationProvider;
    private urlService;
    private authStateService;
    public flowsDataService;
    private flowsService;
    private callbackService;
    private logoffRevocationService;
    private redirectService;
    private TOKEN_REFRESH_INTERVALL_IN_SECONDS;
    get configuration(): import("./angular-auth-oidc-client").PublicConfiguration;
    get userData$(): Observable<any>;
    get isAuthenticated$(): Observable<boolean>;
    get checkSessionChanged$(): Observable<boolean>;
    get stsCallback$(): Observable<unknown>;
    constructor(checkSessionService: CheckSessionService, silentRenewService: SilentRenewService, userService: UserService, tokenValidationService: TokenValidationService, tokenHelperService: TokenHelperService, loggerService: LoggerService, configurationProvider: ConfigurationProvider, urlService: UrlService, authStateService: AuthStateService, flowsDataService: FlowsDataService, flowsService: FlowsService, callbackService: CallbackService, logoffRevocationService: LogoffRevocationService, redirectService: RedirectService);
    checkAuth(): Observable<boolean>;
    getToken(): string;
    getIdToken(): string;
    getRefreshToken(): string;
    getPayloadFromIdToken(encode?: boolean): any;
    setState(state: string): void;
    getState(): string;
    authorize(authOptions?: AuthOptions): void;
    logoffAndRevokeTokens(urlHandler?: (url: string) => any): Observable<any>;
    logoff(urlHandler?: (url: string) => any): void;
    logoffLocal(): void;
    revokeAccessToken(accessToken?: any): Observable<any>;
    revokeRefreshToken(refreshToken?: any): Observable<any>;
    getEndSessionUrl(): string | null;
}
