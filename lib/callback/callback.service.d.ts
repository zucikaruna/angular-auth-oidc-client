import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthStateService } from '../authState/auth-state.service';
import { ConfigurationProvider } from '../config/config.provider';
import { FlowsDataService } from '../flows/flows-data.service';
import { FlowsService } from '../flows/flows.service';
import { SilentRenewService } from '../iframe/silent-renew.service';
import { LoggerService } from '../logging/logger.service';
import { UserService } from '../userData/user-service';
import { FlowHelper } from '../utils/flowHelper/flow-helper.service';
import { UrlService } from '../utils/url/url.service';
export declare class CallbackService {
    private urlService;
    private flowsService;
    private flowHelper;
    private configurationProvider;
    private router;
    private flowsDataService;
    private loggerService;
    private silentRenewService;
    private userService;
    private authStateService;
    private runTokenValidationRunning;
    private scheduledHeartBeatInternal;
    private boundSilentRenewEvent;
    private stsCallbackInternal$;
    get stsCallback$(): Observable<unknown>;
    constructor(urlService: UrlService, flowsService: FlowsService, flowHelper: FlowHelper, configurationProvider: ConfigurationProvider, router: Router, flowsDataService: FlowsDataService, loggerService: LoggerService, silentRenewService: SilentRenewService, userService: UserService, authStateService: AuthStateService);
    handlePossibleStsCallback(currentCallbackUrl: string): Observable<any>;
    startTokenValidationPeriodically(repeatAfterSeconds: number): void;
    private stopPeriodicallTokenCheck;
    private authorizedCallbackWithCode;
    private authorizedImplicitFlowCallback;
    private refreshSessionWithIframe;
    private refreshSessionWithRefreshTokens;
    private sendAuthorizeReqestUsingSilentRenew;
    private silentRenewEventHandler;
    private codeFlowCallbackSilentRenewIframe;
    private initSilentRenewRequest;
}
