{"version":3,"file":"angular-auth-oidc-client.js","sources":["ng://angular-auth-oidc-client/lib/api/http-base.service.ts","ng://angular-auth-oidc-client/lib/api/data.service.ts","ng://angular-auth-oidc-client/lib/utils/platform-provider/platform.provider.ts","ng://angular-auth-oidc-client/lib/logging/log-level.ts","ng://angular-auth-oidc-client/lib/config/default-config.ts","ng://angular-auth-oidc-client/lib/config/config.provider.ts","ng://angular-auth-oidc-client/lib/logging/logger.service.ts","ng://angular-auth-oidc-client/lib/public-events/event-types.ts","ng://angular-auth-oidc-client/lib/public-events/public-events.service.ts","ng://angular-auth-oidc-client/lib/authState/authorized-state.ts","ng://angular-auth-oidc-client/lib/storage/abstract-security-storage.ts","ng://angular-auth-oidc-client/lib/storage/storage-persistance.service.ts","ng://angular-auth-oidc-client/lib/utils/flowHelper/flow-helper.service.ts","ng://angular-auth-oidc-client/lib/utils/tokenHelper/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/validation/token-validation.service.ts","ng://angular-auth-oidc-client/lib/authState/auth-state.service.ts","ng://angular-auth-oidc-client/lib/config/config.service.ts","ng://angular-auth-oidc-client/lib/flows/random/random.service.ts","ng://angular-auth-oidc-client/lib/flows/flows-data.service.ts","ng://angular-auth-oidc-client/lib/userData/user-service.ts","ng://angular-auth-oidc-client/lib/utils/window/window.reference.ts","ng://angular-auth-oidc-client/lib/utils/url/uri-encoder.ts","ng://angular-auth-oidc-client/lib/utils/url/url.service.ts","ng://angular-auth-oidc-client/lib/validation/validation-result.ts","ng://angular-auth-oidc-client/lib/validation/state-validation-result.ts","ng://angular-auth-oidc-client/lib/validation/state-validation.service.ts","ng://angular-auth-oidc-client/lib/flows/signin-key-data.service.ts","ng://angular-auth-oidc-client/lib/flows/flows.service.ts","ng://angular-auth-oidc-client/lib/iframe/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/iframe/check-session.service.ts","ng://angular-auth-oidc-client/lib/iframe/silent-renew.service.ts","ng://angular-auth-oidc-client/lib/utils/redirect/redirect.service.ts","ng://angular-auth-oidc-client/lib/logoffRevoke/logoff-revocation.service.ts","ng://angular-auth-oidc-client/lib/callback/callback.service.ts","ng://angular-auth-oidc-client/lib/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/storage/browser-storage.service.ts","ng://angular-auth-oidc-client/lib/utils/equality/equality.service.ts","ng://angular-auth-oidc-client/lib/auth.module.ts","ng://angular-auth-oidc-client/lib/validation/jwtkeys.ts","ng://angular-auth-oidc-client/lib/angular-auth-oidc-client.ts","ng://angular-auth-oidc-client/public-api.ts","ng://angular-auth-oidc-client/angular-auth-oidc-client.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class HttpBaseService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\r\n        return this.http.get<T>(url, params);\r\n    }\r\n\r\n    post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\r\n        return this.http.post<T>(url, body, params);\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\n\n@Injectable()\nexport class DataService {\n    constructor(private httpClient: HttpBaseService) {}\n\n    get<T>(url: string, token?: string): Observable<T> {\n        const headers = this.prepareHeaders(token);\n\n        return this.httpClient.get<T>(url, {\n            headers,\n        });\n    }\n\n    post<T>(url: string, body: any, headersParams?: HttpHeaders) {\n        const headers = headersParams || this.prepareHeaders();\n\n        return this.httpClient.post<T>(url, body, { headers });\n    }\n\n    private prepareHeaders(token?: string) {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        if (!!token) {\n            headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n        }\n\n        return headers;\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable()\nexport class PlatformProvider {\n    get isBrowser() {\n        return isPlatformBrowser(this.platformId);\n    }\n    constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n}\n","export enum LogLevel {\r\n    Debug,\r\n    Warn,\r\n    Error,\r\n}\r\n","import { LogLevel } from '../logging/log-level';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\n\r\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\r\n    stsServer: 'https://please_set',\r\n    authWellknownEndpoint: '',\r\n    redirectUrl: 'https://please_set',\r\n    clientId: 'please_set',\r\n    responseType: 'code',\r\n    scope: 'openid email profile',\r\n    hdParam: '',\r\n    postLogoutRedirectUri: 'https://please_set',\r\n    startCheckSession: false,\r\n    silentRenew: false,\r\n    silentRenewUrl: 'https://please_set',\r\n    renewTimeBeforeTokenExpiresInSeconds: 0,\r\n    useRefreshToken: false,\r\n    ignoreNonceAfterRefresh: false,\r\n    postLoginRoute: '/',\r\n    forbiddenRoute: '/forbidden',\r\n    unauthorizedRoute: '/unauthorized',\r\n    autoUserinfo: true,\r\n    autoCleanStateAfterAuthentication: true,\r\n    triggerAuthorizationResultEvent: false,\r\n    logLevel: LogLevel.Warn,\r\n    issValidationOff: false,\r\n    historyCleanupOff: false,\r\n    maxIdTokenIatOffsetAllowedInSeconds: 120,\r\n    disableIatOffsetValidation: false,\r\n    storage: typeof Storage !== 'undefined' ? sessionStorage : null,\r\n    customParams: {},\r\n    disableRefreshIdTokenAuthTimeValidation: false,\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\nimport { DEFAULT_CONFIG } from './default-config';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\nimport { PublicConfiguration } from './public-configuration';\r\n\r\n@Injectable()\r\nexport class ConfigurationProvider {\r\n    private wellKnownEndpointsInternal: AuthWellKnownEndpoints;\r\n    private openIdConfigurationInternal: OpenIdConfiguration;\r\n\r\n    get openIDConfiguration(): OpenIdConfiguration {\r\n        if (!this.openIdConfigurationInternal) {\r\n            return null;\r\n        }\r\n\r\n        return this.openIdConfigurationInternal;\r\n    }\r\n\r\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\r\n        if (!this.wellKnownEndpointsInternal) {\r\n            return null;\r\n        }\r\n\r\n        return this.wellKnownEndpointsInternal;\r\n    }\r\n\r\n    get configuration(): PublicConfiguration {\r\n        if (!this.hasValidConfig()) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            configuration: { ...this.openIDConfiguration },\r\n            wellknown: { ...this.wellKnownEndpoints },\r\n        };\r\n    }\r\n\r\n    hasValidConfig() {\r\n        return !!this.wellKnownEndpointsInternal && !!this.openIdConfigurationInternal;\r\n    }\r\n\r\n    constructor(private platformProvider: PlatformProvider) {}\r\n\r\n    setConfig(configuration: OpenIdConfiguration, wellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.wellKnownEndpointsInternal = wellKnownEndpoints;\r\n        this.openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\r\n\r\n        if (configuration?.storage) {\r\n            console.warn(\r\n                'PLEASE NOTE: The storage in the config will be deprecated in future versions: Please pass the custom storage in forRoot() as documented'\r\n            );\r\n        }\r\n\r\n        this.setSpecialCases(this.openIdConfigurationInternal);\r\n    }\r\n\r\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\r\n        if (!this.platformProvider.isBrowser) {\r\n            currentConfig.startCheckSession = false;\r\n            currentConfig.silentRenew = false;\r\n            currentConfig.useRefreshToken = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LogLevel } from './log-level';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private configurationProvider: ConfigurationProvider) {}\n\n    logError(message: any, ...args: any[]) {\n        args.length ? console.error(message, args) : console.error(message);\n    }\n\n    logWarning(message: any, ...args: string[]) {\n        if (this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Warn)) {\n            args.length ? console.warn(message, args) : console.warn(message);\n        }\n    }\n\n    logDebug(message: any, ...args: string[]) {\n        if (this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Debug)) {\n            args.length ? console.log(message, args) : console.log(message);\n        }\n    }\n\n    private currentLogLevelIsEqualOrSmallerThan(logLevel: LogLevel) {\n        return this.configurationProvider.openIDConfiguration.logLevel <= logLevel;\n    }\n}\n","export enum EventTypes {\r\n    /**\r\n     *  This only works in the AppModule Constructor\r\n     */\r\n    ConfigLoaded,\r\n    CheckSessionReceived,\r\n    UserDataChanged,\r\n    NewAuthorizationResult,\r\n    TokenExpired,\r\n    IdTokenExpired,\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { EventTypes } from './event-types';\r\nimport { OidcClientNotification } from './notification';\r\n\r\n@Injectable()\r\nexport class PublicEventsService {\r\n    private notify = new ReplaySubject<OidcClientNotification<any>>(1);\r\n\r\n    fireEvent<T>(type: EventTypes, value?: T) {\r\n        this.notify.next({ type, value });\r\n    }\r\n\r\n    registerForEvents() {\r\n        return this.notify.asObservable();\r\n    }\r\n}\r\n","export enum AuthorizedState {\r\n    Authorized = 'Authorized',\r\n    Unauthorized = 'Unauthorized',\r\n    Unknown = 'Unknown',\r\n}\r\n","import { Injectable } from '@angular/core';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class AbstractSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n","import { Injectable } from '@angular/core';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class StoragePersistanceService {\n    constructor(\n        private readonly oidcSecurityStorage: AbstractSecurityStorage,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    get authResult(): any {\n        return this.retrieve(this.storageAuthResult);\n    }\n\n    set authResult(value: any) {\n        this.store(this.storageAuthResult, value);\n\n        const expiresIn = this.authResult?.expires_in;\n        if (expiresIn) {\n            const accessTokenExpiryTime = new Date().valueOf() + expiresIn * 1000;\n            this.accessTokenExpiresIn = accessTokenExpiryTime;\n        }\n    }\n\n    get accessToken(): string {\n        return this.retrieve(this.storageAccessToken) || '';\n    }\n\n    set accessToken(value: string) {\n        this.store(this.storageAccessToken, value);\n    }\n\n    get idToken(): string {\n        return this.retrieve(this.storageIdToken) || '';\n    }\n\n    set idToken(value: string) {\n        this.store(this.storageIdToken, value);\n    }\n\n    get authorizedState(): string | undefined {\n        return this.retrieve(this.storageAuthorizedState);\n    }\n\n    set authorizedState(value: string | undefined) {\n        this.store(this.storageAuthorizedState, value);\n    }\n\n    get userData(): any {\n        return this.retrieve(this.storageUserData);\n    }\n\n    set userData(value: any) {\n        this.store(this.storageUserData, value);\n    }\n\n    get authNonce(): string {\n        return this.retrieve(this.storageAuthNonce) || '';\n    }\n\n    set authNonce(value: string) {\n        this.store(this.storageAuthNonce, value);\n    }\n\n    get codeVerifier(): string {\n        return this.retrieve(this.storageCodeVerifier) || '';\n    }\n\n    set codeVerifier(value: string) {\n        this.store(this.storageCodeVerifier, value);\n    }\n\n    get authStateControl(): string {\n        return this.retrieve(this.storageAuthStateControl) || '';\n    }\n\n    set authStateControl(value: string) {\n        this.store(this.storageAuthStateControl, value);\n    }\n\n    get sessionState(): any {\n        return this.retrieve(this.storageSessionState);\n    }\n\n    set sessionState(value: any) {\n        this.store(this.storageSessionState, value);\n    }\n\n    get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storageSilentRenewRunning) || '';\n    }\n\n    set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storageSilentRenewRunning, value);\n    }\n    get accessTokenExpiresIn(): any {\n        return this.retrieve(this.storageAccessTokenExpiresIn);\n    }\n\n    set accessTokenExpiresIn(value: any) {\n        this.store(this.storageAccessTokenExpiresIn, value);\n    }\n\n    private storageAuthResult = 'authorizationResult';\n\n    private storageAccessToken = 'authorizationData';\n\n    private storageIdToken = 'authorizationDataIdToken';\n\n    private storageAuthorizedState = 'storageAuthorizedState';\n\n    private storageUserData = 'userData';\n\n    private storageAuthNonce = 'authNonce';\n\n    private storageCodeVerifier = 'codeVerifier';\n\n    private storageAuthStateControl = 'authStateControl';\n\n    private storageSessionState = 'session_state';\n\n    private storageSilentRenewRunning = 'storageSilentRenewRunning';\n\n    private storageAccessTokenExpiresIn = 'access_token_expires_at';\n\n    private retrieve(key: string): any {\n        const keyToRead = this.createKeyWithPrefix(key);\n        return this.oidcSecurityStorage.read(keyToRead);\n    }\n\n    private store(key: string, value: any) {\n        const keyToStore = this.createKeyWithPrefix(key);\n        this.oidcSecurityStorage.write(keyToStore, value);\n    }\n\n    resetStorageFlowData() {\n        this.store(this.storageSessionState, '');\n        this.store(this.storageSilentRenewRunning, '');\n        this.store(this.storageCodeVerifier, '');\n        this.store(this.storageUserData, '');\n    }\n\n    resetAuthStateInStorage() {\n        this.store(this.storageAuthorizedState, AuthorizedState.Unknown);\n        this.store(this.storageAccessToken, '');\n        this.store(this.storageIdToken, '');\n        this.store(this.storageAuthResult, '');\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storageAccessToken);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storageIdToken);\n    }\n\n    getRefreshToken(): any {\n        return this.authResult?.refresh_token;\n    }\n    private createKeyWithPrefix(key: string) {\n        const prefix = this.configurationProvider.openIDConfiguration.clientId;\n\n        return `${prefix}_${key}`;\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from '../../config/config.provider';\r\n\r\n// TODO  TESTING\r\n@Injectable()\r\nexport class FlowHelper {\r\n    constructor(private configurationProvider: ConfigurationProvider) {}\r\n\r\n    isCurrentFlowCodeFlow() {\r\n        return this.currentFlowIs('code');\r\n    }\r\n\r\n    isCurrentFlowAnyImplicitFlow() {\r\n        return this.isCurrentFlowImplicitFlowWithAccessToken() || this.isCurrentFlowImplicitFlowWithoutAccessToken();\r\n    }\r\n\r\n    isCurrentFlowCodeFlowWithRefeshTokens() {\r\n        if (this.isCurrentFlowCodeFlow() && this.configurationProvider.openIDConfiguration.useRefreshToken) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isCurrentFlowImplicitFlowWithAccessToken() {\r\n        return this.currentFlowIs('id_token token');\r\n    }\r\n\r\n    isCurrentFlowImplicitFlowWithoutAccessToken() {\r\n        return this.currentFlowIs('id_token');\r\n    }\r\n\r\n    currentFlowIs(flowTypes: string[] | string) {\r\n        const currentFlow = this.configurationProvider.openIDConfiguration.responseType;\r\n\r\n        if (Array.isArray(flowTypes)) {\r\n            return flowTypes.some((x) => currentFlow === x);\r\n        }\r\n\r\n        return currentFlow === flowTypes;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class TokenHelperService {\n    private PARTS_OF_TOKEN = 3;\n    constructor(private readonly loggerService: LoggerService) {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getHeaderFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 0, encoded);\n    }\n\n    getPayloadFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 1, encoded);\n    }\n\n    getSignatureFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 2, encoded);\n    }\n\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\n        const partOfToken = this.extractPartOfToken(token, index);\n\n        if (encoded) {\n            return partOfToken;\n        }\n\n        const result = this.urlBase64Decode(partOfToken);\n        return JSON.parse(result);\n    }\n\n    private urlBase64Decode(str: string) {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : Buffer.from(output, 'base64').toString('binary');\n\n        try {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            return decodeURIComponent(\n                decoded\n                    .split('')\n                    .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                    .join('')\n            );\n        } catch (err) {\n            return decoded;\n        }\n    }\n\n    private tokenIsValid(token: string) {\n        if (!token) {\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n            return false;\n        }\n\n        if (!(token as string).includes('.')) {\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n            return false;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== this.PARTS_OF_TOKEN) {\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractPartOfToken(token: string, index: number) {\n        return token.split('.')[index];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\n\n@Injectable()\nexport class TokenValidationService {\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\n    keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n    constructor(private tokenHelperService: TokenHelperService, private flowHelper: FlowHelper, private loggerService: LoggerService) { }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    hasIdTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validateIdTokenExpNotExpired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    validateIdTokenExpNotExpired(decodedIdToken: string, offsetSeconds?: number): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Has id_token expired: ${!tokenNotExpired}, ${tokenExpirationValue} > ${nowWithOffset}`);\n\n        // Token not expired?\n        return tokenNotExpired;\n    }\n\n    validateAccessTokenNotExpired(accessTokenExpiresAt: Date, offsetSeconds?: number): boolean {\n        // value is optional, so if it does not exist, then it has not expired\n        if (!accessTokenExpiresAt) {\n            return true;\n        }\n\n        offsetSeconds = offsetSeconds || 0;\n        const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Has access_token expired: ${!tokenNotExpired}, ${accessTokenExpirationValue} > ${nowWithOffset}`);\n\n        // access token not expired?\n        return tokenNotExpired;\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n    // https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n    // audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n    // the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n    // 1970- 01 - 01T00: 00: 00Z as measured\n    // in UTC until the date/ time.\n    validateRequiredIdToken(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\n        if (disableIatOffsetValidation) {\n            return true;\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n\n        maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n        if (dateTimeIatIdToken == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n            (new Date().valueOf() - dateTimeIatIdToken.valueOf()) +\n            ' < ' +\n            maxOffsetAllowedInSeconds * 1000\n        );\n\n        const diff = new Date().valueOf() - dateTimeIatIdToken.valueOf();\n        if (diff > 0) {\n            return diff < maxOffsetAllowedInSeconds * 1000;\n        }\n\n        return -diff < maxOffsetAllowedInSeconds * 1000;\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n\n    // However the nonce claim SHOULD not be present for the refesh_token grant type\n    // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n    // The current spec is ambiguous and Keycloak does send it.\n    validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\n        const isFromRefreshToken =\n            (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) &&\n            localNonce === TokenValidationService.RefreshTokenNoncePlaceholder;\n        if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n            this.loggerService.logDebug(\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any): boolean {\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                dataIdToken.iss +\n                ' authWellKnownEndpoints issuer:' +\n                authWellKnownEndpointsIssuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validateIdTokenAud(dataIdToken: any, aud: any): boolean {\n        if (Array.isArray(dataIdToken.aud)) {\n            // const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\n            const result = dataIdToken.aud.includes(aud);\n\n            if (!result) {\n                this.loggerService.logDebug(\n                    'Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud\n                );\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\n        if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken?.azp) {\n            return false;\n        }\n\n        return true;\n    }\n    // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n    validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\n        if (!dataIdToken?.azp) {\n            return true;\n        }\n\n        if (dataIdToken.azp === clientId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    validateStateFromHashCallback(state: any, localState: any): boolean {\n        if ((state as string) !== (localState as string)) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validateSignatureIdToken(idToken: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\n\n        if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = headerData.kid;\n        const alg = headerData.alg;\n\n        if (!this.keyAlgorithms.includes(alg as string)) {\n            this.loggerService.logWarning('alg not supported', alg);\n            return false;\n        }\n\n        let jwtKtyToUse = 'RSA';\n        if ((alg as string).charAt(0) === 'E') {\n            jwtKtyToUse = 'EC';\n        }\n\n        let isValid = false;\n\n        if (!headerData.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" or EC use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            }\n\n            if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            }\n\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    configValidateResponseType(responseType: string): boolean {\n        if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n            return true;\n        }\n\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\n            return true;\n        }\n\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + responseType);\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validateIdTokenAtHash(accessToken: any, atHash: any, isCodeFlow: boolean, idTokenAlg: string): boolean {\n        this.loggerService.logDebug('at_hash from the server:' + atHash);\n\n        // 'sha256' 'sha384' 'sha512'\n        let sha = 'sha256';\n        if (idTokenAlg.includes('384')) {\n            sha = 'sha384';\n        } else if (idTokenAlg.includes('512')) {\n            sha = 'sha512';\n        }\n\n        const testdata = this.generateAtHash('' + accessToken, sha);\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\n        if (testdata === (atHash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generateAtHash('' + decodeURIComponent(accessToken), sha);\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (atHash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generateAtHash(accessToken: any, sha: string): string {\n        const hash = KJUR.crypto.Util.hashString(accessToken, sha);\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n\n    generateCodeVerifier(codeChallenge: any): string {\n        const hash = KJUR.crypto.Util.hashString(codeChallenge, 'sha256');\n        const testdata = hextob64u(hash);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { AuthorizationResult } from './authorization-result';\nimport { AuthorizedState } from './authorized-state';\n\n@Injectable()\nexport class AuthStateService {\n    // event which contains the state\n    private authorizedInternal$ = new BehaviorSubject<boolean>(false);\n    private authState = AuthorizedState.Unknown;\n\n    get authorized$() {\n        return this.authorizedInternal$.asObservable();\n    }\n\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private publicEventsService: PublicEventsService,\n        private configurationProvider: ConfigurationProvider,\n        private tokenValidationService: TokenValidationService\n    ) {}\n\n    setAuthorizedAndFireEvent(): void {\n        // set the correct values in storage\n        this.authState = AuthorizedState.Authorized;\n        this.persistAuthStateInStorage(this.authState);\n        this.authorizedInternal$.next(true);\n    }\n\n    setUnauthorizedAndFireEvent(): void {\n        // set the correct values in storage\n        this.authState = AuthorizedState.Unauthorized;\n        this.storagePersistanceService.resetAuthStateInStorage();\n        this.authorizedInternal$.next(false);\n    }\n\n    initStateFromStorage(): void {\n        const currentAuthorizedState = this.getCurrentlyPersistedAuthState();\n        if (currentAuthorizedState === AuthorizedState.Authorized) {\n            this.authState = AuthorizedState.Authorized;\n        } else {\n            this.authState = AuthorizedState.Unknown;\n        }\n    }\n\n    updateAndPublishAuthState(authorizationResult: AuthorizationResult) {\n        this.publicEventsService.fireEvent<AuthorizationResult>(EventTypes.NewAuthorizationResult, authorizationResult);\n    }\n\n    setAuthorizationData(accessToken: any, idToken: any) {\n        this.loggerService.logDebug(accessToken);\n        this.loggerService.logDebug(idToken);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n\n        this.storagePersistanceService.accessToken = accessToken;\n        this.storagePersistanceService.idToken = idToken;\n\n        this.setAuthorizedAndFireEvent();\n    }\n\n    getAccessToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getAccessToken();\n        return decodeURIComponent(token);\n    }\n\n    getIdToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getIdToken();\n        return decodeURIComponent(token);\n    }\n\n    getRefreshToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getRefreshToken();\n        return decodeURIComponent(token);\n    }\n\n    areAuthStorageTokensValid() {\n        const currentAuthState = this.getCurrentlyPersistedAuthState();\n\n        if (currentAuthState !== AuthorizedState.Authorized) {\n            return false;\n        }\n\n        this.loggerService.logDebug(`authorizedState in storage is ${currentAuthState}`);\n\n        if (this.hasIdTokenExpired()) {\n            this.loggerService.logDebug('persisted id_token is expired');\n            return false;\n        }\n\n        if (this.hasAccessTokenExpiredIfExpiryExists()) {\n            this.loggerService.logDebug('persisted access_token is expired');\n            return false;\n        }\n\n        this.loggerService.logDebug('persisted id_token and access token are valid');\n        return true;\n    }\n\n    setAuthResultInStorage(authResult: any) {\n        this.storagePersistanceService.authResult = authResult;\n    }\n\n    hasIdTokenExpired() {\n        const tokenToCheck = this.storagePersistanceService.idToken;\n        const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(\n            tokenToCheck,\n            this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds\n        );\n\n        if (idTokenExpired) {\n            this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\n        }\n\n        return idTokenExpired;\n    }\n\n    hasAccessTokenExpiredIfExpiryExists() {\n        const accessTokenExpiresIn = this.storagePersistanceService.accessTokenExpiresIn;\n        const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\n            accessTokenExpiresIn,\n            this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds\n        );\n\n        const hasExpired = !accessTokenHasNotExpired;\n\n        if (hasExpired) {\n            this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\n        }\n\n        return hasExpired;\n    }\n\n    private getCurrentlyPersistedAuthState() {\n        return this.storagePersistanceService.authorizedState;\n    }\n\n    private persistAuthStateInStorage(authState: AuthorizedState) {\n        this.storagePersistanceService.authorizedState = authState;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { map, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { OpenIdConfiguration } from './openid-configuration';\n\n@Injectable()\nexport class OidcConfigService {\n    private WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\n    constructor(\n        private readonly loggerService: LoggerService,\n        private readonly http: DataService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly publicEventsService: PublicEventsService\n    ) {}\n\n    withConfig(passedConfig: OpenIdConfiguration) {\n        if (!passedConfig.stsServer) {\n            this.loggerService.logError('please provide at least an stsServer');\n            return;\n        }\n\n        if (!passedConfig.authWellknownEndpoint) {\n            passedConfig.authWellknownEndpoint = passedConfig.stsServer;\n        }\n\n        const loadConfig$ = this.getWellKnownDocument(passedConfig.authWellknownEndpoint).pipe(\n            map((wellKnownEndpoints) => {\n                return {\n                    issuer: wellKnownEndpoints.issuer,\n                    jwksUri: wellKnownEndpoints.jwks_uri,\n                    authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n                    tokenEndpoint: wellKnownEndpoints.token_endpoint,\n                    userinfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n                    endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n                    checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n                    revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n                    introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n                };\n            }),\n            tap((mappedWellKnownEndpoints) => this.configurationProvider.setConfig(passedConfig, mappedWellKnownEndpoints)),\n            tap((mappedWellKnownEndpoints) =>\n                this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, { passedConfig, mappedWellKnownEndpoints })\n            )\n        );\n\n        return loadConfig$.toPromise();\n    }\n\n    private getWellKnownDocument(wellKnownEndpoint: string) {\n        let url = wellKnownEndpoint;\n\n        if (!wellKnownEndpoint.includes(this.WELL_KNOWN_SUFFIX)) {\n            url = `${wellKnownEndpoint}${this.WELL_KNOWN_SUFFIX}`;\n        }\n\n        return this.http.get<any>(url);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class RandomService {\n    constructor(private loggerService: LoggerService) {}\n\n    createRandom(requiredLength: number): string {\n        if (requiredLength <= 0) {\n            return '';\n        }\n\n        if (requiredLength > 0 && requiredLength < 7) {\n            this.loggerService.logWarning(`RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n            requiredLength = 10;\n        }\n\n        const length = requiredLength - 6;\n        const arr = new Uint8Array((length || length) / 2);\n        this.getCrypto().getRandomValues(arr);\n        return Array.from(arr, this.toHex).join('') + this.randomString(7);\n    }\n\n    private toHex(dec) {\n        return ('0' + dec.toString(16)).substr(-2);\n    }\n\n    private randomString(length) {\n        let result = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        const values = new Uint32Array(length);\n        this.getCrypto().getRandomValues(values);\n        for (let i = 0; i < length; i++) {\n            result += characters[values[i] % characters.length];\n        }\n\n        return result;\n    }\n    private getCrypto() {\n        // support for IE,  (window.crypto || window.msCrypto)\n        return window.crypto || (window as any).msCrypto;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RandomService } from './random/random.service';\n\n@Injectable()\nexport class FlowsDataService {\n    constructor(private storagePersistanceService: StoragePersistanceService, private readonly randomService: RandomService) {}\n\n    createNonce(): string {\n        const nonce = this.randomService.createRandom(40);\n        this.setNonce(nonce);\n        return nonce;\n    }\n\n    setNonce(nonce: string) {\n        this.storagePersistanceService.authNonce = nonce;\n    }\n\n    getAuthStateControl(): any {\n        return this.storagePersistanceService.authStateControl;\n    }\n    setAuthStateControl(authStateControl: string) {\n        this.storagePersistanceService.authStateControl = authStateControl;\n    }\n\n    getExistingOrCreateAuthStateControl(): any {\n        let state = this.storagePersistanceService.authStateControl;\n        if (!state) {\n            state = this.randomService.createRandom(40);\n            this.storagePersistanceService.authStateControl = state;\n        }\n        return state;\n    }\n\n    setSessionState(sessionState: any) {\n        this.storagePersistanceService.sessionState = sessionState;\n    }\n\n    resetStorageFlowData() {\n        this.storagePersistanceService.resetStorageFlowData();\n    }\n\n    getCodeVerifier() {\n        return this.storagePersistanceService.codeVerifier;\n    }\n\n    createCodeVerifier() {\n        const codeVerifier = this.randomService.createRandom(67);\n        this.storagePersistanceService.codeVerifier = codeVerifier;\n        return codeVerifier;\n    }\n\n    isSilentRenewRunning() {\n        return this.storagePersistanceService.silentRenewRunning === 'running';\n    }\n\n    setSilentRenewRunning() {\n        this.storagePersistanceService.silentRenewRunning = 'running';\n    }\n    resetSilentRenewRunning() {\n        this.storagePersistanceService.silentRenewRunning = '';\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class UserService {\n    private userDataInternal$ = new BehaviorSubject<any>(null);\n\n    get userData$() {\n        return this.userDataInternal$.asObservable();\n    }\n\n    constructor(\n        private oidcDataService: DataService,\n        private storagePersistanceService: StoragePersistanceService,\n        private eventService: PublicEventsService,\n        private loggerService: LoggerService,\n        private tokenHelperService: TokenHelperService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly flowHelper: FlowHelper\n    ) {}\n\n    // TODO CHECK PARAMETERS\n    //  validationResult.idToken can be the complete valudationResult\n    getAndPersistUserDataInStore(isRenewProcess = false, idToken?: any, decodedIdToken?: any): Observable<any> {\n        idToken = idToken || this.storagePersistanceService.idToken;\n        decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false);\n\n        const existingUserDataFromStorage = this.getUserDataFromStore();\n        const haveUserData = !!existingUserDataFromStorage;\n        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n        if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n            this.loggerService.logDebug('authorizedCallback id_token flow');\n            this.loggerService.logDebug(this.storagePersistanceService.accessToken);\n\n            this.setUserDataToStore(decodedIdToken);\n            return of(decodedIdToken);\n        }\n\n        if ((!haveUserData && isRenewProcess) || !isRenewProcess) {\n            return this.getUserDataOidcFlowAndSave(decodedIdToken.sub).pipe(\n                switchMap((userData) => {\n                    this.loggerService.logDebug('Received user data', userData);\n                    if (!!userData) {\n                        this.loggerService.logDebug(this.storagePersistanceService.accessToken);\n                        return of(userData);\n                    } else {\n                        return throwError('no user data, request failed');\n                    }\n                })\n            );\n        }\n\n        return of(existingUserDataFromStorage);\n    }\n\n    getUserDataFromStore(): any {\n        return this.storagePersistanceService.userData || null;\n    }\n\n    publishUserdataIfExists() {\n        const userdata = this.getUserDataFromStore();\n        if (userdata) {\n            this.userDataInternal$.next(userdata);\n            this.eventService.fireEvent(EventTypes.UserDataChanged, userdata);\n        }\n    }\n\n    setUserDataToStore(value: any): void {\n        this.storagePersistanceService.userData = value;\n        this.userDataInternal$.next(value);\n        this.eventService.fireEvent(EventTypes.UserDataChanged, value);\n    }\n\n    resetUserDataInStore(): void {\n        this.storagePersistanceService.userData = null;\n        this.eventService.fireEvent(EventTypes.UserDataChanged, null);\n        this.userDataInternal$.next(null);\n    }\n\n    private getUserDataOidcFlowAndSave(idTokenSub: any): Observable<any> {\n        return this.getIdentityUserData().pipe(\n            map((data: any) => {\n                if (this.validateUserdataSubIdToken(idTokenSub, data?.sub)) {\n                    this.setUserDataToStore(data);\n                    return data;\n                } else {\n                    // something went wrong, userdata sub does not match that from id_token\n                    this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                    this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                    this.resetUserDataInStore();\n                    return null;\n                }\n            })\n        );\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.storagePersistanceService.getAccessToken();\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n\n            return throwError('authWellKnownEndpoints is undefined');\n        }\n\n        const canGetUserData = this.configurationProvider?.wellKnownEndpoints?.userinfoEndpoint;\n\n        if (!canGetUserData) {\n            this.loggerService.logError(\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n            );\n            return throwError('authWellKnownEndpoints.userinfo_endpoint is undefined');\n        }\n\n        return this.oidcDataService.get(this.configurationProvider.wellKnownEndpoints.userinfoEndpoint, token);\n    }\n\n    private validateUserdataSubIdToken(idTokenSub: any, userdataSub: any): boolean {\n        if (!idTokenSub) {\n            return false;\n        }\n\n        if (!userdataSub) {\n            return false;\n        }\n\n        if ((idTokenSub as string) !== (userdataSub as string)) {\n            this.loggerService.logDebug('validateUserdataSubIdToken failed', idTokenSub, userdataSub);\n            return false;\n        }\n\n        return true;\n    }\n}\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport function _window(): any {\r\n    return window;\r\n}\r\n\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { oneLineTrim } from 'common-tags';\r\nimport { ConfigurationProvider } from '../../config/config.provider';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\r\nimport { WINDOW } from '../window/window.reference';\r\nimport { UriEncoder } from './uri-encoder';\r\n\r\n@Injectable()\r\nexport class UrlService {\r\n    private CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\r\n\r\n    constructor(\r\n        private readonly configurationProvider: ConfigurationProvider,\r\n        private readonly loggerService: LoggerService,\r\n        private readonly flowsDataService: FlowsDataService,\r\n        private readonly flowHelper: FlowHelper,\r\n        private tokenValidationService: TokenValidationService,\r\n        @Inject(WINDOW) private window: any\r\n    ) {}\r\n\r\n    getUrlParameter(urlToCheck: any, name: any): string {\r\n        if (!urlToCheck) {\r\n            return '';\r\n        }\r\n\r\n        if (!name) {\r\n            return '';\r\n        }\r\n\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        const results = regex.exec(urlToCheck);\r\n        return results === null ? '' : decodeURIComponent(results[1]);\r\n    }\r\n\r\n    isCallbackFromSts() {\r\n        const anyParameterIsGiven = this.CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(this.window.location.toString(), x));\r\n        return anyParameterIsGiven;\r\n    }\r\n\r\n    getRefreshSessionSilentRenewUrl(): string {\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            return this.createUrlCodeFlowWithSilentRenew();\r\n        }\r\n\r\n        return this.createUrlImplicitFlowWithSilentRenew() || '';\r\n    }\r\n\r\n    getAuthorizeUrl(customParams?: { [key: string]: string | number | boolean }): string {\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            return this.createUrlCodeFlowAuthorize(customParams);\r\n        }\r\n\r\n        return this.createUrlImplicitFlowAuthorize(customParams) || '';\r\n    }\r\n\r\n    createEndSessionUrl(idTokenHint: string) {\r\n        const endSessionEndpoint = this.configurationProvider.wellKnownEndpoints?.endSessionEndpoint;\r\n\r\n        if (!endSessionEndpoint) {\r\n            return null;\r\n        }\r\n\r\n        const urlParts = endSessionEndpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', idTokenHint);\r\n\r\n        const postLogoutRedirectUri = this.getPostLogoutRedirectUrl();\r\n\r\n        if (postLogoutRedirectUri) {\r\n            params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\r\n        }\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    createRevocationEndpointBodyAccessToken(token: any) {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return `client_id=${clientId}&token=${token}&token_type_hint=access_token`;\r\n    }\r\n\r\n    createRevocationEndpointBodyRefreshToken(token: any) {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return `client_id=${clientId}&token=${token}&token_type_hint=refresh_token`;\r\n    }\r\n\r\n    getRevocationEndpointUrl() {\r\n        const endSessionEndpoint = this.configurationProvider.wellKnownEndpoints?.revocationEndpoint;\r\n\r\n        if (!endSessionEndpoint) {\r\n            return null;\r\n        }\r\n\r\n        const urlParts = endSessionEndpoint.split('?');\r\n\r\n        const revocationEndpointUrl = urlParts[0];\r\n        return revocationEndpointUrl;\r\n    }\r\n\r\n    createBodyForCodeFlowCodeRequest(code: string): string {\r\n        const codeVerifier = this.flowsDataService.getCodeVerifier();\r\n        if (!codeVerifier) {\r\n            this.loggerService.logError(`CodeVerifier is not set `, codeVerifier);\r\n            return null;\r\n        }\r\n\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        const dataForBody = oneLineTrim`grant_type=authorization_code\r\n            &client_id=${clientId}\r\n            &code_verifier=${codeVerifier}\r\n            &code=${code}`;\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (this.flowsDataService.isSilentRenewRunning() && silentRenewUrl) {\r\n            return oneLineTrim`${dataForBody}&redirect_uri=${silentRenewUrl}`;\r\n        }\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        return oneLineTrim`${dataForBody}&redirect_uri=${redirectUrl}`;\r\n    }\r\n\r\n    createBodyForCodeFlowRefreshTokensRequest(refreshtoken: string): string {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return oneLineTrim`grant_type=refresh_token\r\n          &client_id=${clientId}\r\n          &refresh_token=${refreshtoken}`;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        codeChallenge: string,\r\n        redirectUrl: string,\r\n        nonce: string,\r\n        state: string,\r\n        prompt?: string,\r\n        customRequestParams?: { [key: string]: string | number | boolean }\r\n    ): string {\r\n        const authorizationEndpoint = this.configurationProvider?.wellKnownEndpoints?.authorizationEndpoint;\r\n\r\n        if (!authorizationEndpoint) {\r\n            this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\r\n            return null;\r\n        }\r\n\r\n        const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.openIDConfiguration;\r\n\r\n        if (!clientId) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\r\n            return null;\r\n        }\r\n\r\n        if (!responseType) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add responseType because it was: `, responseType);\r\n            return null;\r\n        }\r\n\r\n        if (!scope) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add scope because it was: `, scope);\r\n            return null;\r\n        }\r\n\r\n        const urlParts = authorizationEndpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n\r\n        params = params.set('client_id', clientId);\r\n        params = params.append('redirect_uri', redirectUrl);\r\n        params = params.append('response_type', responseType);\r\n        params = params.append('scope', scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            params = params.append('code_challenge', codeChallenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (hdParam) {\r\n            params = params.append('hd', hdParam);\r\n        }\r\n\r\n        if (customParams || customRequestParams) {\r\n            const customParamsToAdd = { ...(customParams || {}), ...(customRequestParams || {}) };\r\n\r\n            for (const [key, value] of Object.entries(customParamsToAdd)) {\r\n                params = params.append(key, value.toString());\r\n            }\r\n        }\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createUrlImplicitFlowWithSilentRenew(): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (!silentRenewUrl) {\r\n            return null;\r\n        }\r\n\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ', state);\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, 'none');\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlCodeFlowWithSilentRenew(): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + state);\r\n\r\n        // code_challenge with \"S256\"\r\n        const codeVerifier = this.flowsDataService.createCodeVerifier();\r\n        const codeChallenge = this.tokenValidationService.generateCodeVerifier(codeVerifier);\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (!silentRenewUrl) {\r\n            return null;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, 'none');\r\n        }\r\n\r\n        this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlImplicitFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n        this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl('', redirectUrl, nonce, state, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlCodeFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n        this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        // code_challenge with \"S256\"\r\n        const codeVerifier = this.flowsDataService.createCodeVerifier();\r\n        const codeChallenge = this.tokenValidationService.generateCodeVerifier(codeVerifier);\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private getRedirectUrl() {\r\n        const redirectUrl = this.configurationProvider.openIDConfiguration?.redirectUrl;\r\n\r\n        if (!redirectUrl) {\r\n            this.loggerService.logError(`could not get redirectUrl, was: `, redirectUrl);\r\n            return null;\r\n        }\r\n\r\n        return redirectUrl;\r\n    }\r\n\r\n    private getSilentRenewUrl() {\r\n        const silentRenewUrl = this.configurationProvider.openIDConfiguration?.silentRenewUrl;\r\n\r\n        if (!silentRenewUrl) {\r\n            this.loggerService.logError(`could not get silentRenewUrl, was: `, silentRenewUrl);\r\n            return null;\r\n        }\r\n\r\n        return silentRenewUrl;\r\n    }\r\n\r\n    private getPostLogoutRedirectUrl() {\r\n        const postLogoutRedirectUri = this.configurationProvider.openIDConfiguration?.postLogoutRedirectUri;\r\n        if (!postLogoutRedirectUri) {\r\n            this.loggerService.logError(`could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\r\n            return null;\r\n        }\r\n\r\n        return postLogoutRedirectUri;\r\n    }\r\n\r\n    private getClientId() {\r\n        const clientId = this.configurationProvider.openIDConfiguration?.clientId;\r\n        if (!clientId) {\r\n            this.loggerService.logError(`could not get clientId, was: `, clientId);\r\n            return null;\r\n        }\r\n\r\n        return clientId;\r\n    }\r\n}\r\n","export enum ValidationResult {\n    NotSet = 'NotSet',\n    StatesDoNotMatch = 'StatesDoNotMatch',\n    SignatureFailed = 'SignatureFailed',\n    IncorrectNonce = 'IncorrectNonce',\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\n    MaxOffsetExpired = 'MaxOffsetExpired',\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n    IncorrectAud = 'IncorrectAud',\n    IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\n    IncorrectAzp = 'IncorrectAzp',\n    TokenExpired = 'TokenExpired',\n    IncorrectAtHash = 'IncorrectAtHash',\n    Ok = 'Ok',\n    LoginRequired = 'LoginRequired',\n    SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n    constructor(\n        public accessToken = '',\n        public idToken = '',\n        public authResponseIsValid = false,\n        public decodedIdToken: any = {},\n        public state: ValidationResult = ValidationResult.NotSet\n    ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\nimport { StateValidationResult } from './state-validation-result';\nimport { TokenValidationService } from './token-validation.service';\nimport { ValidationResult } from './validation-result';\n\n@Injectable()\nexport class StateValidationService {\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private tokenValidationService: TokenValidationService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly flowHelper: FlowHelper\n    ) {}\n\n    getValidatedStateResult(callbackContext: CallbackContext): StateValidationResult {\n        if (callbackContext?.authResult.error) {\n            return new StateValidationResult('', '', false, {});\n        }\n\n        return this.validateState(callbackContext);\n    }\n\n    private isIdTokenAfterRefreshTokenRequestValid(callbackContext: CallbackContext, newIdToken: any): boolean {\n        if (!this.configurationProvider.openIDConfiguration.useRefreshToken) {\n            return true;\n        }\n\n        if (!callbackContext.existingIdToken) {\n            return true;\n        }\n        const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false);\n\n        // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n        // except that it might not contain an id_token.\n\n        // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n\n        // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.iss !== newIdToken.iss) {\n            this.loggerService.logDebug(`iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n            return false;\n        }\n        // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n        //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n        // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n        if (decodedIdToken.azp !== newIdToken.azp) {\n            this.loggerService.logDebug(`azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n            return false;\n        }\n        // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.sub !== newIdToken.sub) {\n            this.loggerService.logDebug(`sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n            return false;\n        }\n\n        // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.aud !== newIdToken.aud) {\n            this.loggerService.logDebug(`aud do not match: ${decodedIdToken.aud} ${newIdToken.aud}`);\n            return false;\n        }\n\n        if (this.configurationProvider.openIDConfiguration.disableRefreshIdTokenAuthTimeValidation) {\n            return true;\n        }\n\n        // its iat Claim MUST represent the time that the new ID Token is issued,\n        // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n        // - not the time that the new ID token is issued,\n        if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n            this.loggerService.logDebug(`auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    validateState(callbackContext): StateValidationResult {\n        const toReturn = new StateValidationResult();\n        if (\n            !this.tokenValidationService.validateStateFromHashCallback(\n                callbackContext.authResult.state,\n                this.storagePersistanceService.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            toReturn.state = ValidationResult.StatesDoNotMatch;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n        if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n            toReturn.accessToken = callbackContext.authResult.access_token;\n        }\n\n        if (callbackContext.authResult.id_token) {\n            toReturn.idToken = callbackContext.authResult.id_token;\n\n            toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false);\n\n            if (!this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys)) {\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n                toReturn.state = ValidationResult.SignatureFailed;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenNonce(\n                    toReturn.decodedIdToken,\n                    this.storagePersistanceService.authNonce,\n                    this.configurationProvider.openIDConfiguration.ignoreNonceAfterRefresh\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\n                toReturn.state = ValidationResult.IncorrectNonce;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken)) {\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenIatMaxOffset(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.maxIdTokenIatOffsetAllowedInSeconds,\n                    this.configurationProvider.openIDConfiguration.disableIatOffsetValidation\n                )\n            ) {\n                this.loggerService.logWarning(\n                    'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n                );\n                toReturn.state = ValidationResult.MaxOffsetExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                if (this.configurationProvider.openIDConfiguration.issValidationOff) {\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n                } else if (\n                    !this.configurationProvider.openIDConfiguration.issValidationOff &&\n                    !this.tokenValidationService.validateIdTokenIss(\n                        toReturn.decodedIdToken,\n                        this.configurationProvider.wellKnownEndpoints.issuer\n                    )\n                ) {\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n                    this.handleUnsuccessfulValidation();\n                    return toReturn;\n                }\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenAud(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.clientId\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\n                toReturn.state = ValidationResult.IncorrectAud;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback missing azp');\n                toReturn.state = ValidationResult.IncorrectAzp;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenAzpValid(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.clientId\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect azp');\n                toReturn.state = ValidationResult.IncorrectAzp;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback pre, post id_token claims do not match in refresh');\n                toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback id token expired');\n                toReturn.state = ValidationResult.TokenExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\n        }\n\n        // flow id_token\n        if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation();\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false);\n\n        // The at_hash is optional for the code flow\n        if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\n            this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n        } else if (\n            !this.tokenValidationService.validateIdTokenAtHash(\n                toReturn.accessToken,\n                toReturn.decodedIdToken.at_hash,\n                isCurrentFlowCodeFlow,\n                idTokenHeader.alg // 'RSA256'\n            ) ||\n            !toReturn.accessToken\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        toReturn.state = ValidationResult.Ok;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.storagePersistanceService.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.autoCleanStateAfterAuthentication) {\n            this.storagePersistanceService.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    }\n\n    private handleUnsuccessfulValidation() {\n        this.storagePersistanceService.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.autoCleanStateAfterAuthentication) {\n            this.storagePersistanceService.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { JwtKeys } from '../validation/jwtkeys';\r\n\r\n@Injectable()\r\nexport class SigninKeyDataService {\r\n    constructor(\r\n        private configurationProvider: ConfigurationProvider,\r\n        private loggerService: LoggerService,\r\n        private dataService: DataService\r\n    ) {}\r\n\r\n    getSigningKeys() {\r\n        if (!this.configurationProvider.wellKnownEndpoints?.jwksUri) {\r\n            const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${this.configurationProvider.wellKnownEndpoints?.jwksUri}'`;\r\n            this.loggerService.logWarning(error);\r\n            return throwError(error);\r\n        }\r\n\r\n        this.loggerService.logDebug('Getting signinkeys from ', this.configurationProvider.wellKnownEndpoints.jwksUri);\r\n\r\n        return this.dataService\r\n            .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwksUri)\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.logError(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { UserService } from '../userData/user-service';\nimport { UrlService } from '../utils/url/url.service';\nimport { StateValidationResult } from '../validation/state-validation-result';\nimport { StateValidationService } from '../validation/state-validation.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { ValidationResult } from '../validation/validation-result';\nimport { CallbackContext } from './callback-context';\nimport { FlowsDataService } from './flows-data.service';\nimport { SigninKeyDataService } from './signin-key-data.service';\n\n@Injectable()\nexport class FlowsService {\n    constructor(\n        private readonly urlService: UrlService,\n        private readonly loggerService: LoggerService,\n        private readonly tokenValidationService: TokenValidationService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly authStateService: AuthStateService,\n        private readonly flowsDataService: FlowsDataService,\n        private readonly signinKeyDataService: SigninKeyDataService,\n        private readonly dataService: DataService,\n        private readonly userService: UserService,\n        private readonly stateValidationService: StateValidationService\n    ) {}\n\n    resetAuthorizationData(): void {\n        if (this.configurationProvider.openIDConfiguration.autoUserinfo) {\n            // Clear user data. Fixes #97.\n            this.userService.resetUserDataInStore();\n        }\n\n        this.flowsDataService.resetStorageFlowData();\n        this.authStateService.setUnauthorizedAndFireEvent();\n    }\n\n    processCodeFlowCallback(urlToCheck: string) {\n        return this.codeFlowCallback(urlToCheck).pipe(\n            switchMap((callbackContext) => this.codeFlowCodeRequest(callbackContext)),\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processSilentRenewCodeFlowCallback(firstContext: CallbackContext) {\n        return this.codeFlowCodeRequest(firstContext).pipe(\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processImplicitFlowCallback(hash?: string) {\n        return this.implicitFlowCallback(hash).pipe(\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processRefreshToken() {\n        return this.refreshSessionWithRefreshTokens().pipe(\n            switchMap((callbackContext) => this.refreshTokensRequestTokens(callbackContext)),\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    // STEP 1 Code Flow\n    private codeFlowCallback(urlToCheck: string): Observable<CallbackContext> {\n        const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n        const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n        const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state') || null;\n\n        if (!state) {\n            this.loggerService.logDebug('no state in url');\n            return throwError('no state in url');\n        }\n        if (!code) {\n            this.loggerService.logDebug('no code in url');\n            return throwError('no code in url');\n        }\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\n\n        const initialCallbackContext = {\n            code,\n            refreshToken: null,\n            state,\n            sessionState,\n            authResult: null,\n            isRenewProcess: false,\n            jwtKeys: null,\n            validationResult: null,\n            existingIdToken: null,\n        };\n        return of(initialCallbackContext);\n    }\n\n    // STEP 1 Implicit Flow\n    private implicitFlowCallback(hash?: string): Observable<CallbackContext> {\n        const isRenewProcessData = this.flowsDataService.isSilentRenewRunning();\n\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        if (!isRenewProcessData) {\n            this.resetAuthorizationData();\n        }\n\n        hash = hash || window.location.hash.substr(1);\n\n        const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\n            const parts = item.split('=');\n            resultData[parts.shift() as string] = parts.join('=');\n            return resultData;\n        }, {});\n\n        const callbackContext = {\n            code: null,\n            refreshToken: null,\n            state: null,\n            sessionState: null,\n            authResult,\n            isRenewProcess: isRenewProcessData,\n            jwtKeys: null,\n            validationResult: null,\n            existingIdToken: null,\n        };\n\n        return of(callbackContext);\n    }\n\n    // STEP 1 Refresh session\n    private refreshSessionWithRefreshTokens(): Observable<CallbackContext> {\n        const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl();\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + stateData);\n        const refreshToken = this.authStateService.getRefreshToken();\n        const idToken = this.authStateService.getIdToken();\n        // TODO add id_token data\n\n        if (refreshToken) {\n            const callbackContext = {\n                code: null,\n                refreshToken,\n                state: stateData,\n                sessionState: null,\n                authResult: null,\n                isRenewProcess: false,\n                jwtKeys: null,\n                validationResult: null,\n                existingIdToken: idToken,\n            };\n\n            this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\n            // Nonce is not used with refresh tokens; but Keycloak may send it anyway\n            this.flowsDataService.setNonce(TokenValidationService.RefreshTokenNoncePlaceholder);\n\n            return of(callbackContext);\n        } else {\n            const errorMessage = 'no refresh token found, please login';\n            this.loggerService.logError(errorMessage);\n            return throwError(errorMessage);\n        }\n    }\n\n    // STEP 2 Refresh Token\n    private refreshTokensRequestTokens(callbackContext: CallbackContext): Observable<CallbackContext> {\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const tokenRequestUrl = this.getTokenEndpoint();\n        if (!tokenRequestUrl) {\n            return throwError('Token Endpoint not defined');\n        }\n\n        const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken);\n\n        return this.dataService.post(tokenRequestUrl, data, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('token refresh response: ', response);\n                let authResult: any = new Object();\n                authResult = response;\n                authResult.state = callbackContext.state;\n\n                callbackContext.authResult = authResult;\n                return of(callbackContext);\n            }),\n            catchError((error) => {\n                const errorMessage = `OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}: ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n    private codeFlowCodeRequest(callbackContext: CallbackContext): Observable<CallbackContext> {\n        const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(\n            callbackContext.state,\n            this.flowsDataService.getAuthStateControl()\n        );\n\n        if (!isStateCorrect) {\n            this.loggerService.logWarning('codeFlowCodeRequest incorrect state');\n            return throwError('codeFlowCodeRequest incorrect state');\n        }\n\n        const tokenRequestUrl = this.getTokenEndpoint();\n        if (!tokenRequestUrl) {\n            return throwError('Token Endpoint not defined');\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code);\n\n        return this.dataService.post(tokenRequestUrl, bodyForCodeFlow, headers).pipe(\n            switchMap((response) => {\n                let authResult: any = new Object();\n                authResult = response;\n                authResult.state = callbackContext.state;\n                authResult.session_state = callbackContext.sessionState;\n\n                callbackContext.authResult = authResult;\n                return of(callbackContext);\n            }),\n            catchError((error) => {\n                const errorMessage = `OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer} with error ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 3 Code Flow, STEP 3 Refresh Token\n    private codeFlowSilentRenewCheck(callbackContext: CallbackContext): Observable<CallbackContext> {\n        callbackContext.isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\n        if (!callbackContext.isRenewProcess) {\n            this.resetAuthorizationData();\n        }\n\n        return of(callbackContext);\n    }\n\n    // STEP 4 Code Flow, STEP 2 Implicit Flow, STEP 4 Refresh Token\n    private callbackHistoryAndResetJwtKeys(callbackContext: CallbackContext): Observable<CallbackContext> {\n        this.authStateService.setAuthResultInStorage(callbackContext.authResult);\n\n        if (this.historyCleanUpTurnedOn() && !callbackContext.isRenewProcess) {\n            this.resetBrowserHistory();\n        } else {\n            this.loggerService.logDebug('history clean up inactive');\n        }\n\n        if (callbackContext.authResult.error) {\n            const errorMessage = `authorizedCallbackProcedure came with error: ${callbackContext.authResult.error}`;\n            this.loggerService.logDebug(errorMessage);\n            this.resetAuthorizationData();\n            this.flowsDataService.setNonce('');\n            this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n            return throwError(errorMessage);\n        }\n\n        this.loggerService.logDebug(callbackContext.authResult);\n        this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n        return this.signinKeyDataService.getSigningKeys().pipe(\n            switchMap((jwtKeys) => {\n                if (jwtKeys) {\n                    callbackContext.jwtKeys = jwtKeys;\n\n                    return of(callbackContext);\n                }\n\n                const errorMessage = `Failed to retrieve signing key`;\n                this.loggerService.logWarning(errorMessage);\n                return throwError(errorMessage);\n            }),\n            catchError((err) => {\n                const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n                this.loggerService.logWarning(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 5 All flows\n    private callbackStateValidation(callbackContext: CallbackContext): Observable<CallbackContext> {\n        const validationResult = this.stateValidationService.getValidatedStateResult(callbackContext);\n        callbackContext.validationResult = validationResult;\n\n        if (validationResult.authResponseIsValid) {\n            this.authStateService.setAuthorizationData(validationResult.accessToken, validationResult.idToken);\n\n            return of(callbackContext);\n        } else {\n            const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${window.location.hash}`;\n            this.loggerService.logWarning(errorMessage);\n            this.resetAuthorizationData();\n            this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n            return throwError(errorMessage);\n        }\n    }\n\n    // STEP 6 userData\n    private callbackUser(callbackContext: CallbackContext): Observable<CallbackContext> {\n        if (!this.configurationProvider.openIDConfiguration.autoUserinfo) {\n            if (!callbackContext.isRenewProcess) {\n                // userData is set to the id_token decoded, auto get user data set to false\n                this.userService.setUserDataToStore(callbackContext.validationResult.decodedIdToken);\n            }\n\n            this.publishAuthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n            return of(callbackContext);\n        }\n\n        return this.userService\n            .getAndPersistUserDataInStore(\n                callbackContext.isRenewProcess,\n                callbackContext.validationResult.idToken,\n                callbackContext.validationResult.decodedIdToken\n            )\n            .pipe(\n                switchMap((userData) => {\n                    if (!!userData) {\n                        this.flowsDataService.setSessionState(callbackContext.authResult.session_state);\n                        this.publishAuthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n                        return of(callbackContext);\n                    } else {\n                        this.resetAuthorizationData();\n                        this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n                        const errorMessage = `Called for userData but they were ${userData}`;\n                        this.loggerService.logWarning(errorMessage);\n                        return throwError(errorMessage);\n                    }\n                }),\n                catchError((err) => {\n                    const errorMessage = `Failed to retreive user info with error:  ${err}`;\n                    this.loggerService.logWarning(errorMessage);\n                    return throwError(errorMessage);\n                })\n            );\n    }\n\n    private publishAuthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Authorized,\n            validationResult: stateValidationResult.state,\n            isRenewProcess,\n        });\n    }\n\n    private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Unauthorized,\n            validationResult: stateValidationResult.state,\n            isRenewProcess,\n        });\n    }\n\n    private handleResultErrorFromCallback(result: any, isRenewProcess: boolean) {\n        let validationResult = ValidationResult.SecureTokenServerError;\n\n        if ((result.error as string) === 'login_required') {\n            validationResult = ValidationResult.LoginRequired;\n        }\n\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Unauthorized,\n            validationResult,\n            isRenewProcess,\n        });\n    }\n\n    private getTokenEndpoint(): string {\n        return this.configurationProvider.wellKnownEndpoints?.tokenEndpoint || null;\n    }\n\n    private historyCleanUpTurnedOn() {\n        return !this.configurationProvider.openIDConfiguration.historyCleanupOff;\n    }\n\n    private resetBrowserHistory() {\n        window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../logging/logger.service';\n\n@Injectable()\nexport class IFrameService {\n    constructor(private loggerService: LoggerService) {}\n\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n        if (this.isIFrameElement(iFrameOnParent)) {\n            return iFrameOnParent;\n        }\n\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n        if (this.isIFrameElement(iFrameOnSelf)) {\n            return iFrameOnSelf;\n        }\n        return null;\n    }\n\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\n        const sessionIframe = window.document.createElement('iframe');\n        sessionIframe.id = identifier;\n        this.loggerService.logDebug(sessionIframe);\n        sessionIframe.style.display = 'none';\n        window.document.body.appendChild(sessionIframe);\n        return sessionIframe;\n    }\n\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n        try {\n            const iFrameElement = window.parent.document.getElementById(identifier);\n            if (this.isIFrameElement(iFrameElement)) {\n                return iFrameElement;\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n        const iFrameElement = window.document.getElementById(identifier);\n        if (this.isIFrameElement(iFrameElement)) {\n            return iFrameElement;\n        }\n        return null;\n    }\n\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n        return !!element && element instanceof HTMLIFrameElement;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class CheckSessionService {\n    private checkSessionReceived = false;\n    private scheduledHeartBeatRunning: any;\n    private lastIFrameRefresh = 0;\n    private outstandingMessages = 0;\n    private heartBeatInterval = 3000;\n    private iframeRefreshInterval = 60000;\n\n    private checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\n\n    get checkSessionChanged$() {\n        return this.checkSessionChangedInternal$.asObservable();\n    }\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private iFrameService: IFrameService,\n        private zone: NgZone,\n        private eventService: PublicEventsService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    isCheckSessionConfigured() {\n        return this.configurationProvider.openIDConfiguration.startCheckSession;\n    }\n\n    start(): void {\n        if (!!this.scheduledHeartBeatRunning) {\n            return;\n        }\n\n        this.init();\n\n        const clientId = this.configurationProvider.openIDConfiguration.clientId;\n        this.pollServerSession(clientId);\n    }\n\n    stop(): void {\n        if (!this.scheduledHeartBeatRunning) {\n            return;\n        }\n\n        this.clearScheduledHeartBeat();\n        this.checkSessionReceived = false;\n    }\n\n    serverStateChanged() {\n        return this.configurationProvider.openIDConfiguration.startCheckSession && this.checkSessionReceived;\n    }\n\n    private init() {\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n            return;\n        }\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n            return;\n        }\n\n        const existingIframe = this.getOrCreateIframe();\n\n        if (this.configurationProvider.wellKnownEndpoints.checkSessionIframe) {\n            existingIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.checkSessionIframe);\n        } else {\n            this.loggerService.logWarning('init check session: checkSessionIframe is not configured to run');\n        }\n\n        this.bindMessageEventToIframe();\n\n        existingIframe.onload = () => {\n            this.lastIFrameRefresh = Date.now();\n        };\n    }\n\n    private pollServerSession(clientId: string) {\n        this.outstandingMessages = 0;\n\n        const pollServerSessionRecur = () => {\n            const existingIframe = this.getExistingIframe();\n            if (existingIframe && clientId) {\n                this.loggerService.logDebug(existingIframe);\n                const sessionState = this.storagePersistanceService.sessionState;\n                if (sessionState) {\n                    this.outstandingMessages++;\n                    existingIframe.contentWindow.postMessage(\n                        clientId + ' ' + sessionState,\n                        this.configurationProvider.openIDConfiguration.stsServer\n                    );\n                } else {\n                    this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\n                }\n            } else {\n                this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist');\n                this.loggerService.logDebug(clientId);\n                this.loggerService.logDebug(existingIframe);\n            }\n\n            // after sending three messages with no response, fail.\n            if (this.outstandingMessages > 3) {\n                this.loggerService.logError(\n                    `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\n                );\n            }\n        };\n\n        this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeatRunning = setInterval(pollServerSessionRecur, this.heartBeatInterval);\n        });\n    }\n\n    private clearScheduledHeartBeat() {\n        clearTimeout(this.scheduledHeartBeatRunning);\n        this.scheduledHeartBeatRunning = null;\n    }\n\n    private messageHandler(e: any) {\n        const existingIFrame = this.getExistingIframe();\n        this.outstandingMessages = 0;\n        if (\n            existingIFrame &&\n            this.configurationProvider.openIDConfiguration.stsServer.startsWith(e.origin) &&\n            e.source === existingIFrame.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            } else if (e.data === 'changed') {\n                this.loggerService.logDebug(e);\n                this.checkSessionReceived = true;\n                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n                this.checkSessionChangedInternal$.next(true);\n            } else {\n                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    }\n\n    getExistingIframe() {\n        return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n    }\n\n    private bindMessageEventToIframe() {\n        const iframeMessageEvent = this.messageHandler.bind(this);\n        window.addEventListener('message', iframeMessageEvent, false);\n    }\n\n    private getOrCreateIframe() {\n        const existingIframe = this.getExistingIframe();\n\n        if (!existingIframe) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n        }\n\n        return existingIframe;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class SilentRenewService {\n    constructor(private configurationProvider: ConfigurationProvider, private iFrameService: IFrameService) {}\n\n    getOrCreateIframe(): HTMLIFrameElement {\n        const existingIframe = this.getExistingIframe();\n\n        if (!existingIframe) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        }\n\n        return existingIframe;\n    }\n\n    isSilentRenewConfigured() {\n        return (\n            !this.configurationProvider.openIDConfiguration.useRefreshToken && this.configurationProvider.openIDConfiguration.silentRenew\n        );\n    }\n\n    private getExistingIframe() {\n        return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\r\nimport { WINDOW } from '../window/window.reference';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RedirectService {\r\n    constructor(@Inject(WINDOW) private window: any) {}\r\n\r\n    redirectTo(url) {\r\n        this.window.location.href = url;\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsService } from '../flows/flows.service';\nimport { CheckSessionService } from '../iframe/check-session.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RedirectService } from '../utils/redirect/redirect.service';\nimport { UrlService } from '../utils/url/url.service';\n\n@Injectable()\nexport class LogoffRevocationService {\n    constructor(\n        private dataService: DataService,\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private urlService: UrlService,\n        private checkSessionService: CheckSessionService,\n        private flowsService: FlowsService,\n        private redirectService: RedirectService,\n        private configurationProvider: ConfigurationProvider\n    ) {}\n\n    // Logs out on the server and the local client.\n    // If the server state has changed, checksession, then only a local logout.\n    logoff(urlHandler?: (url: string) => any) {\n        this.loggerService.logDebug('logoff, remove auth ');\n        const endSessionUrl = this.getEndSessionUrl();\n        this.flowsService.resetAuthorizationData();\n\n        if (!endSessionUrl) {\n            this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            return;\n        }\n\n        if (this.checkSessionService.serverStateChanged()) {\n            this.loggerService.logDebug('only local login cleaned up, server session has changed');\n        } else if (urlHandler) {\n            urlHandler(endSessionUrl);\n        } else {\n            this.redirectService.redirectTo(endSessionUrl);\n        }\n    }\n\n    logoffLocal() {\n        this.flowsService.resetAuthorizationData();\n    }\n\n    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n    // only the access token is revoked. Then the logout run.\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n        if (!this.configurationProvider.wellKnownEndpoints?.revocationEndpoint) {\n            this.loggerService.logDebug('revocation endpoint not supported');\n            this.logoff(urlHandler);\n        }\n\n        if (this.storagePersistanceService.getRefreshToken()) {\n            return this.revokeRefreshToken().pipe(\n                switchMap((result) => this.revokeAccessToken(result)),\n                catchError((error) => {\n                    const errorMessage = `revoke token failed ${error}`;\n                    this.loggerService.logError(errorMessage);\n                    return throwError(errorMessage);\n                }),\n                tap(() => this.logoff(urlHandler))\n            );\n        } else {\n            return this.revokeAccessToken().pipe(\n                catchError((error) => {\n                    const errorMessage = `revoke access token failed ${error}`;\n                    this.loggerService.logError(errorMessage);\n                    return throwError(errorMessage);\n                }),\n                tap(() => this.logoff(urlHandler))\n            );\n        }\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an access token on the STS. If no token is provided, then the token from\n    // the storage is revoked. You can pass any token to revoke. This makes it possible to\n    // manage your own tokens. The is a public API.\n    revokeAccessToken(accessToken?: any) {\n        const accessTok = accessToken || this.storagePersistanceService.accessToken;\n        const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok);\n        const url = this.urlService.getRevocationEndpointUrl();\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this.dataService.post(url, body, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('revocation endpoint post response: ', response);\n                return of(response);\n            }),\n            catchError((error) => {\n                const errorMessage = `Revocation request failed ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeRefreshToken(refreshToken?: any) {\n        const refreshTok = refreshToken || this.storagePersistanceService.getRefreshToken();\n        const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok);\n        const url = this.urlService.getRevocationEndpointUrl();\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this.dataService.post(url, body, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('revocation endpoint post response: ', response);\n                return of(response);\n            }),\n            catchError((error) => {\n                const errorMessage = `Revocation request failed ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    getEndSessionUrl(): string | null {\n        const idTokenHint = this.storagePersistanceService.idToken;\n        return this.urlService.createEndSessionUrl(idTokenHint);\n    }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { interval, Observable, of, Subject, Subscription, throwError } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../authState/auth-state.service';\r\nimport { AuthorizedState } from '../authState/authorized-state';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { UserService } from '../userData/user-service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { ValidationResult } from '../validation/validation-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CallbackService {\r\n    private runTokenValidationRunning: Subscription = null;\r\n    private scheduledHeartBeatInternal: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    private stsCallbackInternal$ = new Subject();\r\n\r\n    get stsCallback$() {\r\n        return this.stsCallbackInternal$.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private urlService: UrlService,\r\n        private flowsService: FlowsService,\r\n        private flowHelper: FlowHelper,\r\n        private configurationProvider: ConfigurationProvider,\r\n        private router: Router,\r\n        private flowsDataService: FlowsDataService,\r\n        private loggerService: LoggerService,\r\n        private silentRenewService: SilentRenewService,\r\n        private userService: UserService,\r\n        private authStateService: AuthStateService\r\n    ) {}\r\n\r\n    handlePossibleStsCallback(currentCallbackUrl: string) {\r\n        let callback$: Observable<any>;\r\n\r\n        if (!this.urlService.isCallbackFromSts()) {\r\n            callback$ = of(null);\r\n        } else if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            callback$ = this.authorizedCallbackWithCode(currentCallbackUrl);\r\n        } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\r\n            callback$ = this.authorizedImplicitFlowCallback();\r\n        }\r\n\r\n        return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\r\n    }\r\n\r\n    startTokenValidationPeriodically(repeatAfterSeconds: number) {\r\n        if (!!this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silentRenew) {\r\n            return;\r\n        }\r\n\r\n        const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\r\n\r\n        this.loggerService.logDebug(\r\n            `starting token validation check every ${repeatAfterSeconds}s (${millisecondsDelayBetweenTokenCheck}ms)`\r\n        );\r\n\r\n        const periodicallyCheck$ = interval(millisecondsDelayBetweenTokenCheck).pipe(\r\n            switchMap(() => {\r\n                const idToken = this.authStateService.getIdToken();\r\n                const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\r\n                const userDataFromStore = this.userService.getUserDataFromStore();\r\n\r\n                this.loggerService.logDebug(\r\n                    `Checking: silentRenewRunning: ${isSilentRenewRunning} id_token: ${!!idToken} userData: ${!!userDataFromStore}`\r\n                );\r\n\r\n                const shouldBeExecuted = userDataFromStore && !isSilentRenewRunning && idToken;\r\n\r\n                if (!shouldBeExecuted) {\r\n                    return of(null);\r\n                }\r\n\r\n                const idTokenHasExpired = this.authStateService.hasIdTokenExpired();\r\n                const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists();\r\n\r\n                if (!idTokenHasExpired && !accessTokenHasExpired) {\r\n                    return of(null);\r\n                }\r\n\r\n                this.loggerService.logDebug('IsAuthorized: id_token idTokenHasExpired, start silent renew if active');\r\n\r\n                if (!this.configurationProvider.openIDConfiguration.silentRenew) {\r\n                    this.flowsService.resetAuthorizationData();\r\n                    return of(null);\r\n                }\r\n\r\n                this.flowsDataService.setSilentRenewRunning();\r\n\r\n                if (this.flowHelper.isCurrentFlowCodeFlowWithRefeshTokens()) {\r\n                    // Refresh Session using Refresh tokens\r\n                    return this.refreshSessionWithRefreshTokens();\r\n                }\r\n\r\n                return this.refreshSessionWithIframe();\r\n            })\r\n        );\r\n\r\n        this.runTokenValidationRunning = periodicallyCheck$\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                    return throwError('periodically check failed');\r\n                })\r\n            )\r\n            .subscribe(() => {\r\n                if (this.flowHelper.isCurrentFlowCodeFlowWithRefeshTokens()) {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            });\r\n    }\r\n\r\n    private stopPeriodicallTokenCheck(): void {\r\n        if (this.scheduledHeartBeatInternal) {\r\n            clearTimeout(this.scheduledHeartBeatInternal);\r\n            this.scheduledHeartBeatInternal = null;\r\n            this.runTokenValidationRunning.unsubscribe();\r\n            this.runTokenValidationRunning = null;\r\n        }\r\n    }\r\n\r\n    // Code Flow Callback\r\n    private authorizedCallbackWithCode(urlToCheck: string) {\r\n        return this.flowsService.processCodeFlowCallback(urlToCheck).pipe(\r\n            tap((callbackContext) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.postLoginRoute]);\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                this.flowsDataService.resetSilentRenewRunning();\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Implicit Flow Callback\r\n    private authorizedImplicitFlowCallback(hash?: string) {\r\n        return this.flowsService.processImplicitFlowCallback(hash).pipe(\r\n            tap((callbackContext) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.postLoginRoute]);\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                this.flowsDataService.resetSilentRenewRunning();\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private refreshSessionWithIframe(): Observable<boolean> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize Iframe renew');\r\n        const url = this.urlService.getRefreshSessionSilentRenewUrl();\r\n        return this.sendAuthorizeReqestUsingSilentRenew(url);\r\n    }\r\n\r\n    private refreshSessionWithRefreshTokens() {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        return this.flowsService.processRefreshToken().pipe(\r\n            catchError((error) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                this.flowsService.resetAuthorizationData();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private sendAuthorizeReqestUsingSilentRenew(url: string): Observable<boolean> {\r\n        const sessionIframe = this.silentRenewService.getOrCreateIframe();\r\n        this.initSilentRenewRequest();\r\n        this.loggerService.logDebug('sendAuthorizeReqestUsingSilentRenew for URL:' + url);\r\n\r\n        return new Observable((observer) => {\r\n            const onLoadHandler = () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n                this.loggerService.logDebug('removed event listener from IFrame');\r\n                observer.next(true);\r\n                observer.complete();\r\n            };\r\n            sessionIframe.addEventListener('load', onLoadHandler);\r\n            sessionIframe.src = url;\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        if (!e.detail) {\r\n            return;\r\n        }\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            const urlParts = e.detail.toString().split('?');\r\n            // Code Flow Callback silent renew iframe\r\n            this.codeFlowCallbackSilentRenewIframe(urlParts).subscribe(\r\n                () => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                },\r\n                (err: any) => {\r\n                    this.loggerService.logError('Error: ' + err);\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            );\r\n        } else {\r\n            // Implicit Flow Callback silent renew iframe\r\n            this.authorizedImplicitFlowCallback(e.detail).subscribe(\r\n                () => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                },\r\n                (err: any) => {\r\n                    this.loggerService.logError('Error: ' + err);\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    private codeFlowCallbackSilentRenewIframe(urlParts) {\r\n        const params = new HttpParams({\r\n            fromString: urlParts[1],\r\n        });\r\n\r\n        const error = params.get('error');\r\n\r\n        if (error) {\r\n            this.authStateService.updateAndPublishAuthState({\r\n                authorizationState: AuthorizedState.Unauthorized,\r\n                validationResult: ValidationResult.LoginRequired,\r\n                isRenewProcess: true,\r\n            });\r\n            this.flowsService.resetAuthorizationData();\r\n            this.flowsDataService.setNonce('');\r\n            this.stopPeriodicallTokenCheck();\r\n            return throwError(error);\r\n        }\r\n\r\n        const code = params.get('code');\r\n        const state = params.get('state');\r\n        const sessionState = params.get('session_state');\r\n\r\n        const callbackContext = {\r\n            code,\r\n            refreshToken: null,\r\n            state,\r\n            sessionState,\r\n            authResult: null,\r\n            isRenewProcess: false,\r\n            jwtKeys: null,\r\n            validationResult: null,\r\n            existingIdToken: null,\r\n        };\r\n\r\n        return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext).pipe(\r\n            catchError((errorFromFlow) => {\r\n                this.stopPeriodicallTokenCheck();\r\n                this.flowsService.resetAuthorizationData();\r\n                return throwError(errorFromFlow);\r\n            })\r\n        );\r\n    }\r\n\r\n    private initSilentRenewRequest() {\r\n        const instanceId = Math.random();\r\n        this.silentRenewService.getOrCreateIframe();\r\n        // Support authorization via DOM events.\r\n        // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n        //      We only ever want the latest setup service to be reacting to this event.\r\n        this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n        const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\r\n            if (e.detail !== instanceId) {\r\n                window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n            }\r\n        }).bind(this);\r\n\r\n        window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n        window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n        window.dispatchEvent(\r\n            new CustomEvent('oidc-silent-renew-init', {\r\n                detail: instanceId,\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthOptions } from './auth-options';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { CallbackService } from './callback/callback.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { UserService } from './userData/user-service';\nimport { RedirectService } from './utils/redirect/redirect.service';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@Injectable()\nexport class OidcSecurityService {\n    private TOKEN_REFRESH_INTERVALL_IN_SECONDS = 3;\n\n    get configuration() {\n        return this.configurationProvider.configuration;\n    }\n\n    get userData$() {\n        return this.userService.userData$;\n    }\n\n    get isAuthenticated$() {\n        return this.authStateService.authorized$;\n    }\n\n    get checkSessionChanged$() {\n        return this.checkSessionService.checkSessionChanged$;\n    }\n\n    get stsCallback$() {\n        return this.callbackService.stsCallback$;\n    }\n\n    constructor(\n        private checkSessionService: CheckSessionService,\n        private silentRenewService: SilentRenewService,\n        private userService: UserService,\n        private tokenValidationService: TokenValidationService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private configurationProvider: ConfigurationProvider,\n        private urlService: UrlService,\n        private authStateService: AuthStateService,\n        private flowsDataService: FlowsDataService,\n        private flowsService: FlowsService,\n        private callbackService: CallbackService,\n        private logoffRevocationService: LogoffRevocationService,\n        private redirectService: RedirectService\n    ) {}\n\n    checkAuth(): Observable<boolean> {\n        if (!this.configurationProvider.hasValidConfig()) {\n            this.loggerService.logError('Please provide a configuration before setting up the module');\n            return of(false);\n        }\n\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\n\n        const currentUrl = window.location.toString();\n\n        return this.callbackService.handlePossibleStsCallback(currentUrl).pipe(\n            map(() => {\n                const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n                if (isAuthenticated) {\n                    this.authStateService.setAuthorizedAndFireEvent();\n                    this.userService.publishUserdataIfExists();\n\n                    if (this.checkSessionService.isCheckSessionConfigured()) {\n                        this.checkSessionService.start();\n                    }\n\n                    this.callbackService.startTokenValidationPeriodically(this.TOKEN_REFRESH_INTERVALL_IN_SECONDS);\n\n                    if (this.silentRenewService.isSilentRenewConfigured()) {\n                        this.silentRenewService.getOrCreateIframe();\n                    }\n                }\n\n                this.loggerService.logDebug('checkAuth completed fire events, auth: ' + isAuthenticated);\n\n                return isAuthenticated;\n            })\n        );\n    }\n\n    getToken(): string {\n        return this.authStateService.getAccessToken();\n    }\n\n    getIdToken(): string {\n        return this.authStateService.getIdToken();\n    }\n\n    getRefreshToken(): string {\n        return this.authStateService.getRefreshToken();\n    }\n\n    getPayloadFromIdToken(encode = false): any {\n        const token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    }\n\n    setState(state: string): void {\n        this.flowsDataService.setAuthStateControl(state);\n    }\n\n    getState(): string {\n        return this.flowsDataService.getAuthStateControl();\n    }\n\n    // Code Flow with PCKE or Implicit Flow\n    authorize(authOptions?: AuthOptions) {\n        if (!this.configurationProvider.hasValidConfig()) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n\n        if (!this.tokenValidationService.configValidateResponseType(this.configurationProvider.openIDConfiguration.responseType)) {\n            this.loggerService.logError('Invalid response type!');\n            return;\n        }\n\n        this.flowsService.resetAuthorizationData();\n\n        this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n        const { urlHandler, customParams } = authOptions || {};\n\n        const url = this.urlService.getAuthorizeUrl(customParams);\n\n        if (urlHandler) {\n            urlHandler(url);\n        } else {\n            this.redirectService.redirectTo(url);\n        }\n    }\n\n    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n    // only the access token is revoked. Then the logout run.\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n        return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);\n    }\n\n    // Logs out on the server and the local client.\n    // If the server state has changed, checksession, then only a local logout.\n    logoff(urlHandler?: (url: string) => any) {\n        return this.logoffRevocationService.logoff(urlHandler);\n    }\n\n    logoffLocal() {\n        return this.logoffRevocationService.logoffLocal();\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an access token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeAccessToken(accessToken?: any) {\n        return this.logoffRevocationService.revokeAccessToken(accessToken);\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeRefreshToken(refreshToken?: any) {\n        return this.logoffRevocationService.revokeRefreshToken(refreshToken);\n    }\n\n    getEndSessionUrl(): string | null {\n        return this.logoffRevocationService.getEndSessionUrl();\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable()\r\nexport class BrowserStorageService implements AbstractSecurityStorage {\r\n    constructor(private configProvider: ConfigurationProvider, private loggerService: LoggerService) {}\r\n\r\n    read(key: string): any {\r\n        if (!this.hasStorage()) {\r\n            this.loggerService.logDebug(`Wanted to read '${key}' but Storage was undefined`);\r\n            return false;\r\n        }\r\n\r\n        const item = this.getStorage()?.getItem(key);\r\n\r\n        if (!item) {\r\n            this.loggerService.logDebug(`Wanted to read '${key}' but nothing was found`);\r\n            return false;\r\n        }\r\n\r\n        return JSON.parse(item);\r\n    }\r\n\r\n    write(key: string, value: any): boolean {\r\n        if (!this.hasStorage()) {\r\n            this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\r\n            return false;\r\n        }\r\n\r\n        const storage = this.getStorage();\r\n        if (!storage) {\r\n            this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\r\n            return false;\r\n        }\r\n\r\n        value = value || null;\r\n\r\n        storage.setItem(`${key}`, JSON.stringify(value));\r\n        return true;\r\n    }\r\n\r\n    private getStorage() {\r\n        return this.configProvider.openIDConfiguration?.storage;\r\n    }\r\n\r\n    private hasStorage() {\r\n        return typeof Storage !== 'undefined';\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\n        if (!value1 || !value2) {\n            return false;\n        }\n\n        if (this.bothValuesAreArrays(value1, value2)) {\n            return this.arraysEqual(value1 as any[], value2 as any[]);\n        }\n\n        if (this.bothValuesAreStrings(value1, value2)) {\n            return value1 === value2;\n        }\n\n        if (this.bothValuesAreObjects(value1, value2)) {\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n        }\n\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\n                return value1[0] === value2;\n            }\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\n                return value2[0] === value1;\n            }\n        }\n    }\n\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n    }\n\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\n    }\n\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsString(value1) && this.valueIsString(value2);\n    }\n\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\n        return Array.isArray(value1) && Array.isArray(value2);\n    }\n\n    private valueIsString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    private valueIsObject(value: any) {\n        return typeof value === 'object';\n    }\n\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DataService } from './api/data.service';\nimport { HttpBaseService } from './api/http-base.service';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { OidcConfigService } from './config/config.service';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { RandomService } from './flows/random/random.service';\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { IFrameService } from './iframe/existing-iframe.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { OidcSecurityService } from './oidc.security.service';\nimport { PublicEventsService } from './public-events/public-events.service';\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\nimport { BrowserStorageService } from './storage/browser-storage.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { EqualityService } from './utils/equality/equality.service';\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { WINDOW, _window } from './utils/window/window.reference';\nimport { StateValidationService } from './validation/state-validation.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [],\n    exports: [],\n})\nexport class AuthModule {\n    static forRoot(token: Token = {}) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                PublicEventsService,\n                FlowHelper,\n                OidcSecurityService,\n                TokenValidationService,\n                PlatformProvider,\n                CheckSessionService,\n                FlowsDataService,\n                FlowsService,\n                SilentRenewService,\n                ConfigurationProvider,\n                LogoffRevocationService,\n                UserService,\n                RandomService,\n                HttpBaseService,\n                UrlService,\n                AuthStateService,\n                SigninKeyDataService,\n                StoragePersistanceService,\n                TokenHelperService,\n                LoggerService,\n                IFrameService,\n                EqualityService,\n                DataService,\n                StateValidationService,\n                {\n                    provide: AbstractSecurityStorage,\n                    useClass: token.storage || BrowserStorageService,\n                },\n                { provide: WINDOW, useFactory: _window, deps: [] },\n            ],\n        };\n    }\n}\n\nexport type Type<T> = new (...args: any[]) => T;\n\nexport interface Token {\n    storage?: Type<any>;\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c: any[] = [];\n}\n","// Public classes.\n\nexport * from './auth.module';\nexport * from './authState/authorization-result';\nexport * from './authState/authorized-state';\nexport * from './config/auth-well-known-endpoints';\nexport * from './config/config.service';\nexport * from './config/openid-configuration';\nexport * from './config/public-configuration';\nexport * from './logging/log-level';\nexport * from './logging/logger.service';\nexport * from './oidc.security.service';\nexport * from './public-events/event-types';\nexport * from './public-events/notification';\nexport * from './public-events/public-events.service';\nexport * from './storage/abstract-security-storage';\nexport * from './utils/tokenHelper/oidc-token-helper.service';\nexport * from './validation/jwtkeys';\nexport * from './validation/state-validation-result';\nexport * from './validation/token-validation.service';\nexport * from './validation/validation-result';\n","/*\n * Public API Surface of angular-auth-oidc-client\n */\n\nexport * from './lib/angular-auth-oidc-client';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DataService as ɵc} from './lib/api/data.service';\nexport {HttpBaseService as ɵd} from './lib/api/http-base.service';\nexport {AuthStateService as ɵp} from './lib/authState/auth-state.service';\nexport {CallbackService as ɵt} from './lib/callback/callback.service';\nexport {ConfigurationProvider as ɵa} from './lib/config/config.provider';\nexport {FlowsDataService as ɵn} from './lib/flows/flows-data.service';\nexport {FlowsService as ɵq} from './lib/flows/flows.service';\nexport {RandomService as ɵo} from './lib/flows/random/random.service';\nexport {SigninKeyDataService as ɵr} from './lib/flows/signin-key-data.service';\nexport {CheckSessionService as ɵf} from './lib/iframe/check-session.service';\nexport {IFrameService as ɵh} from './lib/iframe/existing-iframe.service';\nexport {SilentRenewService as ɵi} from './lib/iframe/silent-renew.service';\nexport {LogoffRevocationService as ɵu} from './lib/logoffRevoke/logoff-revocation.service';\nexport {BrowserStorageService as ɵx} from './lib/storage/browser-storage.service';\nexport {StoragePersistanceService as ɵg} from './lib/storage/storage-persistance.service';\nexport {UserService as ɵj} from './lib/userData/user-service';\nexport {EqualityService as ɵw} from './lib/utils/equality/equality.service';\nexport {FlowHelper as ɵe} from './lib/utils/flowHelper/flow-helper.service';\nexport {PlatformProvider as ɵb} from './lib/utils/platform-provider/platform.provider';\nexport {RedirectService as ɵv} from './lib/utils/redirect/redirect.service';\nexport {UrlService as ɵk} from './lib/utils/url/url.service';\nexport {WINDOW as ɵm,_window as ɵl} from './lib/utils/window/window.reference';\nexport {StateValidationService as ɵs} from './lib/validation/state-validation.service';"],"names":[],"mappings":"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"}