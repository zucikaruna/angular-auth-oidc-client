{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-auth-oidc-client/lib/logging/log-level.ts","ng://angular-auth-oidc-client/lib/api/http-base.service.ts","ng://angular-auth-oidc-client/lib/api/data.service.ts","ng://angular-auth-oidc-client/lib/utils/platform-provider/platform.provider.ts","ng://angular-auth-oidc-client/lib/config/default-config.ts","ng://angular-auth-oidc-client/lib/public-events/event-types.ts","ng://angular-auth-oidc-client/lib/config/config.provider.ts","ng://angular-auth-oidc-client/lib/logging/logger.service.ts","ng://angular-auth-oidc-client/lib/authState/authorized-state.ts","ng://angular-auth-oidc-client/lib/public-events/public-events.service.ts","ng://angular-auth-oidc-client/lib/storage/abstract-security-storage.ts","ng://angular-auth-oidc-client/lib/storage/storage-persistance.service.ts","ng://angular-auth-oidc-client/lib/utils/flowHelper/flow-helper.service.ts","ng://angular-auth-oidc-client/lib/utils/tokenHelper/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/validation/token-validation.service.ts","ng://angular-auth-oidc-client/lib/authState/auth-state.service.ts","ng://angular-auth-oidc-client/lib/config/config.service.ts","ng://angular-auth-oidc-client/lib/flows/random/random.service.ts","ng://angular-auth-oidc-client/lib/flows/flows-data.service.ts","ng://angular-auth-oidc-client/lib/userData/user-service.ts","ng://angular-auth-oidc-client/lib/utils/window/window.reference.ts","ng://angular-auth-oidc-client/lib/validation/validation-result.ts","ng://angular-auth-oidc-client/lib/utils/url/uri-encoder.ts","ng://angular-auth-oidc-client/lib/utils/url/url.service.ts","ng://angular-auth-oidc-client/lib/validation/state-validation-result.ts","ng://angular-auth-oidc-client/lib/validation/state-validation.service.ts","ng://angular-auth-oidc-client/lib/flows/signin-key-data.service.ts","ng://angular-auth-oidc-client/lib/flows/flows.service.ts","ng://angular-auth-oidc-client/lib/iframe/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/iframe/check-session.service.ts","ng://angular-auth-oidc-client/lib/iframe/silent-renew.service.ts","ng://angular-auth-oidc-client/lib/utils/redirect/redirect.service.ts","ng://angular-auth-oidc-client/lib/logoffRevoke/logoff-revocation.service.ts","ng://angular-auth-oidc-client/lib/callback/callback.service.ts","ng://angular-auth-oidc-client/lib/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/storage/browser-storage.service.ts","ng://angular-auth-oidc-client/lib/utils/equality/equality.service.ts","ng://angular-auth-oidc-client/lib/auth.module.ts","ng://angular-auth-oidc-client/lib/validation/jwtkeys.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","e","ar","push","error","__makeTemplateObject","cooked","raw","LogLevel","HttpBaseService","http","get","url","params","post","body","HttpClient","Injectable","DataService","httpClient","token","headers","prepareHeaders","headersParams","HttpHeaders","set","decodeURIComponent","PlatformProvider","platformId","isPlatformBrowser","Inject","args","PLATFORM_ID","EventTypes","DEFAULT_CONFIG","stsServer","authWellknownEndpoint","redirectUrl","clientId","responseType","scope","hdParam","postLogoutRedirectUri","startCheckSession","silentRenew","silentRenewUrl","renewTimeBeforeTokenExpiresInSeconds","useRefreshToken","ignoreNonceAfterRefresh","postLoginRoute","forbiddenRoute","unauthorizedRoute","autoUserinfo","autoCleanStateAfterAuthentication","triggerAuthorizationResultEvent","logLevel","Warn","issValidationOff","historyCleanupOff","maxIdTokenIatOffsetAllowedInSeconds","disableIatOffsetValidation","storage","Storage","sessionStorage","customParams","disableRefreshIdTokenAuthTimeValidation","ConfigurationProvider","platformProvider","openIdConfigurationInternal","wellKnownEndpointsInternal","hasValidConfig","configuration","openIDConfiguration","wellknown","wellKnownEndpoints","setConfig","console","warn","setSpecialCases","currentConfig","isBrowser","LoggerService","configurationProvider","logError","message","_i","logWarning","currentLogLevelIsEqualOrSmallerThan","logDebug","Debug","log","AuthorizedState","PublicEventsService","notify","ReplaySubject","fireEvent","type","registerForEvents","asObservable","AbstractSecurityStorage","StoragePersistanceService","oidcSecurityStorage","storageAuthResult","storageAccessToken","storageIdToken","storageAuthorizedState","storageUserData","storageAuthNonce","storageCodeVerifier","storageAuthStateControl","storageSessionState","storageSilentRenewRunning","storageAccessTokenExpiresIn","retrieve","store","expiresIn","_a","authResult","expires_in","accessTokenExpiryTime","Date","valueOf","accessTokenExpiresIn","keyToRead","createKeyWithPrefix","read","keyToStore","write","resetStorageFlowData","resetAuthStateInStorage","Unknown","getAccessToken","getIdToken","getRefreshToken","refresh_token","FlowHelper","isCurrentFlowCodeFlow","currentFlowIs","isCurrentFlowAnyImplicitFlow","isCurrentFlowImplicitFlowWithAccessToken","isCurrentFlowImplicitFlowWithoutAccessToken","isCurrentFlowCodeFlowWithRefeshTokens","flowTypes","currentFlow","Array","isArray","some","x","TokenHelperService","loggerService","PARTS_OF_TOKEN","getTokenExpirationDate","dataIdToken","date","setUTCSeconds","exp","getHeaderFromToken","encoded","tokenIsValid","getPartOfToken","getPayloadFromToken","getSignatureFromToken","index","partOfToken","extractPartOfToken","result","urlBase64Decode","JSON","parse","str","output","replace","Error","decoded","window","atob","Buffer","from","toString","split","map","charCodeAt","slice","join","err","includes","TokenValidationService","tokenHelperService","flowHelper","keyAlgorithms","hasIdTokenExpired","offsetSeconds","validateIdTokenExpNotExpired","decodedIdToken","tokenExpirationDate","tokenExpirationValue","nowWithOffset","tokenNotExpired","validateAccessTokenNotExpired","accessTokenExpiresAt","accessTokenExpirationValue","validateRequiredIdToken","validated","validateIdTokenIatMaxOffset","maxOffsetAllowedInSeconds","dateTimeIatIdToken","iat","diff","validateIdTokenNonce","localNonce","undefined","nonce","TokenValidationService_1","RefreshTokenNoncePlaceholder","validateIdTokenIss","authWellKnownEndpointsIssuer","iss","validateIdTokenAud","aud","validateIdTokenAzpExistsIfMoreThanOneAud","azp","validateIdTokenAzpValid","validateStateFromHashCallback","state","localState","validateSignatureIdToken","idToken","jwtkeys","keys","headerData","constructor","kid","alg","jwtKtyToUse","charAt","isValid","_h","_j","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_d","_e","kty","use","_f","_g","configValidateResponseType","validateIdTokenAtHash","accessToken","atHash","isCodeFlow","idTokenAlg","sha","testdata","generateAtHash","testValue","hash","crypto","Util","hashString","first128bits","substr","hextob64u","generateCodeVerifier","codeChallenge","AuthStateService","storagePersistanceService","publicEventsService","tokenValidationService","authorizedInternal$","BehaviorSubject","authState","setAuthorizedAndFireEvent","Authorized","persistAuthStateInStorage","setUnauthorizedAndFireEvent","Unauthorized","initStateFromStorage","getCurrentlyPersistedAuthState","updateAndPublishAuthState","authorizationResult","NewAuthorizationResult","setAuthorizationData","areAuthStorageTokensValid","currentAuthState","hasAccessTokenExpiredIfExpiryExists","setAuthResultInStorage","tokenToCheck","idTokenExpired","IdTokenExpired","hasExpired","TokenExpired","authorizedState","OidcConfigService","WELL_KNOWN_SUFFIX","withConfig","passedConfig","_this","getWellKnownDocument","pipe","issuer","jwksUri","jwks_uri","authorizationEndpoint","authorization_endpoint","tokenEndpoint","token_endpoint","userinfoEndpoint","userinfo_endpoint","endSessionEndpoint","end_session_endpoint","checkSessionIframe","check_session_iframe","revocationEndpoint","revocation_endpoint","introspectionEndpoint","introspection_endpoint","tap","mappedWellKnownEndpoints","ConfigLoaded","toPromise","wellKnownEndpoint","RandomService","createRandom","requiredLength","arr","Uint8Array","getCrypto","getRandomValues","toHex","randomString","dec","characters","values","Uint32Array","msCrypto","FlowsDataService","randomService","createNonce","setNonce","authNonce","getAuthStateControl","authStateControl","setAuthStateControl","getExistingOrCreateAuthStateControl","setSessionState","sessionState","getCodeVerifier","codeVerifier","createCodeVerifier","isSilentRenewRunning","silentRenewRunning","setSilentRenewRunning","resetSilentRenewRunning","UserService","oidcDataService","eventService","userDataInternal$","getAndPersistUserDataInStore","isRenewProcess","existingUserDataFromStorage","getUserDataFromStore","haveUserData","getUserDataOidcFlowAndSave","sub","switchMap","userData","of","throwError","setUserDataToStore","publishUserdataIfExists","userdata","UserDataChanged","resetUserDataInStore","idTokenSub","getIdentityUserData","data","validateUserdataSubIdToken","_b","userdataSub","_window","ValidationResult","WINDOW","InjectionToken","UriEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","UrlService","flowsDataService","CALLBACK_PARAMS_TO_CHECK","getUrlParameter","urlToCheck","name","results","RegExp","exec","isCallbackFromSts","location","getRefreshSessionSilentRenewUrl","createUrlCodeFlowWithSilentRenew","createUrlImplicitFlowWithSilentRenew","getAuthorizeUrl","createUrlCodeFlowAuthorize","createUrlImplicitFlowAuthorize","createEndSessionUrl","idTokenHint","urlParts","authorizationEndsessionUrl","HttpParams","fromString","encoder","getPostLogoutRedirectUrl","append","createRevocationEndpointBodyAccessToken","getClientId","createRevocationEndpointBodyRefreshToken","getRevocationEndpointUrl","createBodyForCodeFlowCodeRequest","code","dataForBody","oneLineTrim","templateObject_1","getSilentRenewUrl","templateObject_2","getRedirectUrl","templateObject_3","createBodyForCodeFlowRefreshTokensRequest","refreshtoken","templateObject_4","createAuthorizeUrl","prompt","customRequestParams","_c","authorizationUrl","customParamsToAdd","entries","authResponseIsValid","NotSet","StateValidationService","getValidatedStateResult","callbackContext","StateValidationResult","validateState","isIdTokenAfterRefreshTokenRequestValid","newIdToken","existingIdToken","auth_time","toReturn","StatesDoNotMatch","handleUnsuccessfulValidation","access_token","id_token","jwtKeys","SignatureFailed","IncorrectNonce","RequiredPropertyMissing","MaxOffsetExpired","NoAuthWellKnownEndPoints","IssDoesNotMatchIssuer","IncorrectAud","IncorrectAzp","IncorrectIdTokenClaimsAfterRefresh","Ok","handleSuccessfulValidation","idTokenHeader","at_hash","IncorrectAtHash","SigninKeyDataService","dataService","getSigningKeys","catchError","handleErrorGetSigningKeys","errMsg","Response","json","stringify","status","statusText","FlowsService","urlService","authStateService","signinKeyDataService","userService","stateValidationService","resetAuthorizationData","processCodeFlowCallback","codeFlowCallback","codeFlowCodeRequest","codeFlowSilentRenewCheck","callbackHistoryAndResetJwtKeys","callbackStateValidation","callbackUser","processSilentRenewCodeFlowCallback","firstContext","processImplicitFlowCallback","implicitFlowCallback","processRefreshToken","refreshSessionWithRefreshTokens","refreshTokensRequestTokens","initialCallbackContext","refreshToken","validationResult","isRenewProcessData","reduce","resultData","item","parts","shift","stateData","tokenRequestUrl","getTokenEndpoint","response","errorMessage","bodyForCodeFlow","session_state","historyCleanUpTurnedOn","resetBrowserHistory","handleResultErrorFromCallback","publishUnauthorizedState","publishAuthorizedState","stateValidationResult","authorizationState","SecureTokenServerError","LoginRequired","history","replaceState","document","title","origin","pathname","IFrameService","getExistingIFrame","identifier","iFrameOnParent","getIFrameFromParentWindow","isIFrameElement","iFrameOnSelf","getIFrameFromWindow","addIFrameToWindowBody","sessionIframe","createElement","id","style","display","appendChild","iFrameElement","parent","getElementById","element","HTMLIFrameElement","CheckSessionService","iFrameService","zone","checkSessionReceived","lastIFrameRefresh","outstandingMessages","heartBeatInterval","iframeRefreshInterval","checkSessionChangedInternal$","isCheckSessionConfigured","start","scheduledHeartBeatRunning","init","pollServerSession","stop","clearScheduledHeartBeat","serverStateChanged","now","existingIframe","getOrCreateIframe","contentWindow","bindMessageEventToIframe","onload","pollServerSessionRecur","getExistingIframe","postMessage","runOutsideAngular","setInterval","clearTimeout","messageHandler","existingIFrame","startsWith","source","CheckSessionReceived","iframeMessageEvent","bind","addEventListener","NgZone","SilentRenewService","isSilentRenewConfigured","RedirectService","redirectTo","href","providedIn","LogoffRevocationService","checkSessionService","flowsService","redirectService","logoff","urlHandler","endSessionUrl","getEndSessionUrl","logoffLocal","logoffAndRevokeTokens","revokeRefreshToken","revokeAccessToken","accessTok","refreshTok","CallbackService","router","silentRenewService","runTokenValidationRunning","stsCallbackInternal$","Subject","handlePossibleStsCallback","currentCallbackUrl","callback$","authorizedCallbackWithCode","authorizedImplicitFlowCallback","startTokenValidationPeriodically","repeatAfterSeconds","millisecondsDelayBetweenTokenCheck","periodicallyCheck$","interval","userDataFromStore","idTokenHasExpired","accessTokenHasExpired","refreshSessionWithIframe","subscribe","stopPeriodicallTokenCheck","scheduledHeartBeatInternal","unsubscribe","navigate","sendAuthorizeReqestUsingSilentRenew","initSilentRenewRequest","Observable","observer","onLoadHandler","removeEventListener","complete","src","silentRenewEventHandler","detail","codeFlowCallbackSilentRenewIframe","errorFromFlow","instanceId","Math","random","boundSilentRenewEvent","boundSilentRenewInitEvent","dispatchEvent","CustomEvent","Router","OidcSecurityService","callbackService","logoffRevocationService","TOKEN_REFRESH_INTERVALL_IN_SECONDS","userData$","authorized$","checkSessionChanged$","stsCallback$","checkAuth","currentUrl","isAuthenticated","getToken","getPayloadFromIdToken","encode","setState","getState","authorize","authOptions","BrowserStorageService","configProvider","hasStorage","getStorage","getItem","setItem","EqualityService","areEqual","value1","value2","bothValuesAreArrays","arraysEqual","bothValuesAreStrings","bothValuesAreObjects","toLowerCase","oneValueIsStringAndTheOtherIsArray","valueIsString","valueIsObject","String","arr1","arr2","AuthModule","forRoot","ngModule","AuthModule_1","providers","provide","useClass","useFactory","deps","NgModule","imports","CommonModule","declarations","exports","x5t","x5c"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum LogLevel {\r\n    Debug,\r\n    Warn,\r\n    Error,\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class HttpBaseService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\r\n        return this.http.get<T>(url, params);\r\n    }\r\n\r\n    post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\r\n        return this.http.post<T>(url, body, params);\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\n\n@Injectable()\nexport class DataService {\n    constructor(private httpClient: HttpBaseService) {}\n\n    get<T>(url: string, token?: string): Observable<T> {\n        const headers = this.prepareHeaders(token);\n\n        return this.httpClient.get<T>(url, {\n            headers,\n        });\n    }\n\n    post<T>(url: string, body: any, headersParams?: HttpHeaders) {\n        const headers = headersParams || this.prepareHeaders();\n\n        return this.httpClient.post<T>(url, body, { headers });\n    }\n\n    private prepareHeaders(token?: string) {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        if (!!token) {\n            headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n        }\n\n        return headers;\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable()\nexport class PlatformProvider {\n    get isBrowser() {\n        return isPlatformBrowser(this.platformId);\n    }\n    constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n}\n","import { LogLevel } from '../logging/log-level';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\n\r\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\r\n    stsServer: 'https://please_set',\r\n    authWellknownEndpoint: '',\r\n    redirectUrl: 'https://please_set',\r\n    clientId: 'please_set',\r\n    responseType: 'code',\r\n    scope: 'openid email profile',\r\n    hdParam: '',\r\n    postLogoutRedirectUri: 'https://please_set',\r\n    startCheckSession: false,\r\n    silentRenew: false,\r\n    silentRenewUrl: 'https://please_set',\r\n    renewTimeBeforeTokenExpiresInSeconds: 0,\r\n    useRefreshToken: false,\r\n    ignoreNonceAfterRefresh: false,\r\n    postLoginRoute: '/',\r\n    forbiddenRoute: '/forbidden',\r\n    unauthorizedRoute: '/unauthorized',\r\n    autoUserinfo: true,\r\n    autoCleanStateAfterAuthentication: true,\r\n    triggerAuthorizationResultEvent: false,\r\n    logLevel: LogLevel.Warn,\r\n    issValidationOff: false,\r\n    historyCleanupOff: false,\r\n    maxIdTokenIatOffsetAllowedInSeconds: 120,\r\n    disableIatOffsetValidation: false,\r\n    storage: typeof Storage !== 'undefined' ? sessionStorage : null,\r\n    customParams: {},\r\n    disableRefreshIdTokenAuthTimeValidation: false,\r\n};\r\n","export enum EventTypes {\r\n    /**\r\n     *  This only works in the AppModule Constructor\r\n     */\r\n    ConfigLoaded,\r\n    CheckSessionReceived,\r\n    UserDataChanged,\r\n    NewAuthorizationResult,\r\n    TokenExpired,\r\n    IdTokenExpired,\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\nimport { DEFAULT_CONFIG } from './default-config';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\nimport { PublicConfiguration } from './public-configuration';\r\n\r\n@Injectable()\r\nexport class ConfigurationProvider {\r\n    private wellKnownEndpointsInternal: AuthWellKnownEndpoints;\r\n    private openIdConfigurationInternal: OpenIdConfiguration;\r\n\r\n    get openIDConfiguration(): OpenIdConfiguration {\r\n        if (!this.openIdConfigurationInternal) {\r\n            return null;\r\n        }\r\n\r\n        return this.openIdConfigurationInternal;\r\n    }\r\n\r\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\r\n        if (!this.wellKnownEndpointsInternal) {\r\n            return null;\r\n        }\r\n\r\n        return this.wellKnownEndpointsInternal;\r\n    }\r\n\r\n    get configuration(): PublicConfiguration {\r\n        if (!this.hasValidConfig()) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            configuration: { ...this.openIDConfiguration },\r\n            wellknown: { ...this.wellKnownEndpoints },\r\n        };\r\n    }\r\n\r\n    hasValidConfig() {\r\n        return !!this.wellKnownEndpointsInternal && !!this.openIdConfigurationInternal;\r\n    }\r\n\r\n    constructor(private platformProvider: PlatformProvider) {}\r\n\r\n    setConfig(configuration: OpenIdConfiguration, wellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.wellKnownEndpointsInternal = wellKnownEndpoints;\r\n        this.openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\r\n\r\n        if (configuration?.storage) {\r\n            console.warn(\r\n                'PLEASE NOTE: The storage in the config will be deprecated in future versions: Please pass the custom storage in forRoot() as documented'\r\n            );\r\n        }\r\n\r\n        this.setSpecialCases(this.openIdConfigurationInternal);\r\n    }\r\n\r\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\r\n        if (!this.platformProvider.isBrowser) {\r\n            currentConfig.startCheckSession = false;\r\n            currentConfig.silentRenew = false;\r\n            currentConfig.useRefreshToken = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LogLevel } from './log-level';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private configurationProvider: ConfigurationProvider) {}\n\n    logError(message: any, ...args: any[]) {\n        args.length ? console.error(message, args) : console.error(message);\n    }\n\n    logWarning(message: any, ...args: string[]) {\n        if (this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Warn)) {\n            args.length ? console.warn(message, args) : console.warn(message);\n        }\n    }\n\n    logDebug(message: any, ...args: string[]) {\n        if (this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Debug)) {\n            args.length ? console.log(message, args) : console.log(message);\n        }\n    }\n\n    private currentLogLevelIsEqualOrSmallerThan(logLevel: LogLevel) {\n        return this.configurationProvider.openIDConfiguration.logLevel <= logLevel;\n    }\n}\n","export enum AuthorizedState {\r\n    Authorized = 'Authorized',\r\n    Unauthorized = 'Unauthorized',\r\n    Unknown = 'Unknown',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { EventTypes } from './event-types';\r\nimport { OidcClientNotification } from './notification';\r\n\r\n@Injectable()\r\nexport class PublicEventsService {\r\n    private notify = new ReplaySubject<OidcClientNotification<any>>(1);\r\n\r\n    fireEvent<T>(type: EventTypes, value?: T) {\r\n        this.notify.next({ type, value });\r\n    }\r\n\r\n    registerForEvents() {\r\n        return this.notify.asObservable();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class AbstractSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n","import { Injectable } from '@angular/core';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class StoragePersistanceService {\n    constructor(\n        private readonly oidcSecurityStorage: AbstractSecurityStorage,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    get authResult(): any {\n        return this.retrieve(this.storageAuthResult);\n    }\n\n    set authResult(value: any) {\n        this.store(this.storageAuthResult, value);\n\n        const expiresIn = this.authResult?.expires_in;\n        if (expiresIn) {\n            const accessTokenExpiryTime = new Date().valueOf() + expiresIn * 1000;\n            this.accessTokenExpiresIn = accessTokenExpiryTime;\n        }\n    }\n\n    get accessToken(): string {\n        return this.retrieve(this.storageAccessToken) || '';\n    }\n\n    set accessToken(value: string) {\n        this.store(this.storageAccessToken, value);\n    }\n\n    get idToken(): string {\n        return this.retrieve(this.storageIdToken) || '';\n    }\n\n    set idToken(value: string) {\n        this.store(this.storageIdToken, value);\n    }\n\n    get authorizedState(): string | undefined {\n        return this.retrieve(this.storageAuthorizedState);\n    }\n\n    set authorizedState(value: string | undefined) {\n        this.store(this.storageAuthorizedState, value);\n    }\n\n    get userData(): any {\n        return this.retrieve(this.storageUserData);\n    }\n\n    set userData(value: any) {\n        this.store(this.storageUserData, value);\n    }\n\n    get authNonce(): string {\n        return this.retrieve(this.storageAuthNonce) || '';\n    }\n\n    set authNonce(value: string) {\n        this.store(this.storageAuthNonce, value);\n    }\n\n    get codeVerifier(): string {\n        return this.retrieve(this.storageCodeVerifier) || '';\n    }\n\n    set codeVerifier(value: string) {\n        this.store(this.storageCodeVerifier, value);\n    }\n\n    get authStateControl(): string {\n        return this.retrieve(this.storageAuthStateControl) || '';\n    }\n\n    set authStateControl(value: string) {\n        this.store(this.storageAuthStateControl, value);\n    }\n\n    get sessionState(): any {\n        return this.retrieve(this.storageSessionState);\n    }\n\n    set sessionState(value: any) {\n        this.store(this.storageSessionState, value);\n    }\n\n    get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storageSilentRenewRunning) || '';\n    }\n\n    set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storageSilentRenewRunning, value);\n    }\n    get accessTokenExpiresIn(): any {\n        return this.retrieve(this.storageAccessTokenExpiresIn);\n    }\n\n    set accessTokenExpiresIn(value: any) {\n        this.store(this.storageAccessTokenExpiresIn, value);\n    }\n\n    private storageAuthResult = 'authorizationResult';\n\n    private storageAccessToken = 'authorizationData';\n\n    private storageIdToken = 'authorizationDataIdToken';\n\n    private storageAuthorizedState = 'storageAuthorizedState';\n\n    private storageUserData = 'userData';\n\n    private storageAuthNonce = 'authNonce';\n\n    private storageCodeVerifier = 'codeVerifier';\n\n    private storageAuthStateControl = 'authStateControl';\n\n    private storageSessionState = 'session_state';\n\n    private storageSilentRenewRunning = 'storageSilentRenewRunning';\n\n    private storageAccessTokenExpiresIn = 'access_token_expires_at';\n\n    private retrieve(key: string): any {\n        const keyToRead = this.createKeyWithPrefix(key);\n        return this.oidcSecurityStorage.read(keyToRead);\n    }\n\n    private store(key: string, value: any) {\n        const keyToStore = this.createKeyWithPrefix(key);\n        this.oidcSecurityStorage.write(keyToStore, value);\n    }\n\n    resetStorageFlowData() {\n        this.store(this.storageSessionState, '');\n        this.store(this.storageSilentRenewRunning, '');\n        this.store(this.storageCodeVerifier, '');\n        this.store(this.storageUserData, '');\n    }\n\n    resetAuthStateInStorage() {\n        this.store(this.storageAuthorizedState, AuthorizedState.Unknown);\n        this.store(this.storageAccessToken, '');\n        this.store(this.storageIdToken, '');\n        this.store(this.storageAuthResult, '');\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storageAccessToken);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storageIdToken);\n    }\n\n    getRefreshToken(): any {\n        return this.authResult?.refresh_token;\n    }\n    private createKeyWithPrefix(key: string) {\n        const prefix = this.configurationProvider.openIDConfiguration.clientId;\n\n        return `${prefix}_${key}`;\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from '../../config/config.provider';\r\n\r\n// TODO  TESTING\r\n@Injectable()\r\nexport class FlowHelper {\r\n    constructor(private configurationProvider: ConfigurationProvider) {}\r\n\r\n    isCurrentFlowCodeFlow() {\r\n        return this.currentFlowIs('code');\r\n    }\r\n\r\n    isCurrentFlowAnyImplicitFlow() {\r\n        return this.isCurrentFlowImplicitFlowWithAccessToken() || this.isCurrentFlowImplicitFlowWithoutAccessToken();\r\n    }\r\n\r\n    isCurrentFlowCodeFlowWithRefeshTokens() {\r\n        if (this.isCurrentFlowCodeFlow() && this.configurationProvider.openIDConfiguration.useRefreshToken) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isCurrentFlowImplicitFlowWithAccessToken() {\r\n        return this.currentFlowIs('id_token token');\r\n    }\r\n\r\n    isCurrentFlowImplicitFlowWithoutAccessToken() {\r\n        return this.currentFlowIs('id_token');\r\n    }\r\n\r\n    currentFlowIs(flowTypes: string[] | string) {\r\n        const currentFlow = this.configurationProvider.openIDConfiguration.responseType;\r\n\r\n        if (Array.isArray(flowTypes)) {\r\n            return flowTypes.some((x) => currentFlow === x);\r\n        }\r\n\r\n        return currentFlow === flowTypes;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class TokenHelperService {\n    private PARTS_OF_TOKEN = 3;\n    constructor(private readonly loggerService: LoggerService) {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getHeaderFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 0, encoded);\n    }\n\n    getPayloadFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 1, encoded);\n    }\n\n    getSignatureFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 2, encoded);\n    }\n\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\n        const partOfToken = this.extractPartOfToken(token, index);\n\n        if (encoded) {\n            return partOfToken;\n        }\n\n        const result = this.urlBase64Decode(partOfToken);\n        return JSON.parse(result);\n    }\n\n    private urlBase64Decode(str: string) {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : Buffer.from(output, 'base64').toString('binary');\n\n        try {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            return decodeURIComponent(\n                decoded\n                    .split('')\n                    .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                    .join('')\n            );\n        } catch (err) {\n            return decoded;\n        }\n    }\n\n    private tokenIsValid(token: string) {\n        if (!token) {\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n            return false;\n        }\n\n        if (!(token as string).includes('.')) {\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n            return false;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== this.PARTS_OF_TOKEN) {\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractPartOfToken(token: string, index: number) {\n        return token.split('.')[index];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\n\n@Injectable()\nexport class TokenValidationService {\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\n    keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n    constructor(private tokenHelperService: TokenHelperService, private flowHelper: FlowHelper, private loggerService: LoggerService) { }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    hasIdTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validateIdTokenExpNotExpired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    validateIdTokenExpNotExpired(decodedIdToken: string, offsetSeconds?: number): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Has id_token expired: ${!tokenNotExpired}, ${tokenExpirationValue} > ${nowWithOffset}`);\n\n        // Token not expired?\n        return tokenNotExpired;\n    }\n\n    validateAccessTokenNotExpired(accessTokenExpiresAt: Date, offsetSeconds?: number): boolean {\n        // value is optional, so if it does not exist, then it has not expired\n        if (!accessTokenExpiresAt) {\n            return true;\n        }\n\n        offsetSeconds = offsetSeconds || 0;\n        const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Has access_token expired: ${!tokenNotExpired}, ${accessTokenExpirationValue} > ${nowWithOffset}`);\n\n        // access token not expired?\n        return tokenNotExpired;\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n    // https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n    // audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n    // the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n    // 1970- 01 - 01T00: 00: 00Z as measured\n    // in UTC until the date/ time.\n    validateRequiredIdToken(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\n        if (disableIatOffsetValidation) {\n            return true;\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n\n        maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n        if (dateTimeIatIdToken == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n            (new Date().valueOf() - dateTimeIatIdToken.valueOf()) +\n            ' < ' +\n            maxOffsetAllowedInSeconds * 1000\n        );\n\n        const diff = new Date().valueOf() - dateTimeIatIdToken.valueOf();\n        if (diff > 0) {\n            return diff < maxOffsetAllowedInSeconds * 1000;\n        }\n\n        return -diff < maxOffsetAllowedInSeconds * 1000;\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n\n    // However the nonce claim SHOULD not be present for the refesh_token grant type\n    // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n    // The current spec is ambiguous and Keycloak does send it.\n    validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\n        const isFromRefreshToken =\n            (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) &&\n            localNonce === TokenValidationService.RefreshTokenNoncePlaceholder;\n        if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n            this.loggerService.logDebug(\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any): boolean {\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                dataIdToken.iss +\n                ' authWellKnownEndpoints issuer:' +\n                authWellKnownEndpointsIssuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validateIdTokenAud(dataIdToken: any, aud: any): boolean {\n        if (Array.isArray(dataIdToken.aud)) {\n            // const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\n            const result = dataIdToken.aud.includes(aud);\n\n            if (!result) {\n                this.loggerService.logDebug(\n                    'Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud\n                );\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\n        if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken?.azp) {\n            return false;\n        }\n\n        return true;\n    }\n    // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n    validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\n        if (!dataIdToken?.azp) {\n            return true;\n        }\n\n        if (dataIdToken.azp === clientId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    validateStateFromHashCallback(state: any, localState: any): boolean {\n        if ((state as string) !== (localState as string)) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validateSignatureIdToken(idToken: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\n\n        if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = headerData.kid;\n        const alg = headerData.alg;\n\n        if (!this.keyAlgorithms.includes(alg as string)) {\n            this.loggerService.logWarning('alg not supported', alg);\n            return false;\n        }\n\n        let jwtKtyToUse = 'RSA';\n        if ((alg as string).charAt(0) === 'E') {\n            jwtKtyToUse = 'EC';\n        }\n\n        let isValid = false;\n\n        if (!headerData.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" or EC use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            }\n\n            if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            }\n\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    configValidateResponseType(responseType: string): boolean {\n        if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n            return true;\n        }\n\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\n            return true;\n        }\n\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + responseType);\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validateIdTokenAtHash(accessToken: any, atHash: any, isCodeFlow: boolean, idTokenAlg: string): boolean {\n        this.loggerService.logDebug('at_hash from the server:' + atHash);\n\n        // 'sha256' 'sha384' 'sha512'\n        let sha = 'sha256';\n        if (idTokenAlg.includes('384')) {\n            sha = 'sha384';\n        } else if (idTokenAlg.includes('512')) {\n            sha = 'sha512';\n        }\n\n        const testdata = this.generateAtHash('' + accessToken, sha);\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\n        if (testdata === (atHash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generateAtHash('' + decodeURIComponent(accessToken), sha);\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (atHash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generateAtHash(accessToken: any, sha: string): string {\n        const hash = KJUR.crypto.Util.hashString(accessToken, sha);\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n\n    generateCodeVerifier(codeChallenge: any): string {\n        const hash = KJUR.crypto.Util.hashString(codeChallenge, 'sha256');\n        const testdata = hextob64u(hash);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { AuthorizationResult } from './authorization-result';\nimport { AuthorizedState } from './authorized-state';\n\n@Injectable()\nexport class AuthStateService {\n    // event which contains the state\n    private authorizedInternal$ = new BehaviorSubject<boolean>(false);\n    private authState = AuthorizedState.Unknown;\n\n    get authorized$() {\n        return this.authorizedInternal$.asObservable();\n    }\n\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private publicEventsService: PublicEventsService,\n        private configurationProvider: ConfigurationProvider,\n        private tokenValidationService: TokenValidationService\n    ) {}\n\n    setAuthorizedAndFireEvent(): void {\n        // set the correct values in storage\n        this.authState = AuthorizedState.Authorized;\n        this.persistAuthStateInStorage(this.authState);\n        this.authorizedInternal$.next(true);\n    }\n\n    setUnauthorizedAndFireEvent(): void {\n        // set the correct values in storage\n        this.authState = AuthorizedState.Unauthorized;\n        this.storagePersistanceService.resetAuthStateInStorage();\n        this.authorizedInternal$.next(false);\n    }\n\n    initStateFromStorage(): void {\n        const currentAuthorizedState = this.getCurrentlyPersistedAuthState();\n        if (currentAuthorizedState === AuthorizedState.Authorized) {\n            this.authState = AuthorizedState.Authorized;\n        } else {\n            this.authState = AuthorizedState.Unknown;\n        }\n    }\n\n    updateAndPublishAuthState(authorizationResult: AuthorizationResult) {\n        this.publicEventsService.fireEvent<AuthorizationResult>(EventTypes.NewAuthorizationResult, authorizationResult);\n    }\n\n    setAuthorizationData(accessToken: any, idToken: any) {\n        this.loggerService.logDebug(accessToken);\n        this.loggerService.logDebug(idToken);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n\n        this.storagePersistanceService.accessToken = accessToken;\n        this.storagePersistanceService.idToken = idToken;\n\n        this.setAuthorizedAndFireEvent();\n    }\n\n    getAccessToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getAccessToken();\n        return decodeURIComponent(token);\n    }\n\n    getIdToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getIdToken();\n        return decodeURIComponent(token);\n    }\n\n    getRefreshToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getRefreshToken();\n        return decodeURIComponent(token);\n    }\n\n    areAuthStorageTokensValid() {\n        const currentAuthState = this.getCurrentlyPersistedAuthState();\n\n        if (currentAuthState !== AuthorizedState.Authorized) {\n            return false;\n        }\n\n        this.loggerService.logDebug(`authorizedState in storage is ${currentAuthState}`);\n\n        if (this.hasIdTokenExpired()) {\n            this.loggerService.logDebug('persisted id_token is expired');\n            return false;\n        }\n\n        if (this.hasAccessTokenExpiredIfExpiryExists()) {\n            this.loggerService.logDebug('persisted access_token is expired');\n            return false;\n        }\n\n        this.loggerService.logDebug('persisted id_token and access token are valid');\n        return true;\n    }\n\n    setAuthResultInStorage(authResult: any) {\n        this.storagePersistanceService.authResult = authResult;\n    }\n\n    hasIdTokenExpired() {\n        const tokenToCheck = this.storagePersistanceService.idToken;\n        const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(\n            tokenToCheck,\n            this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds\n        );\n\n        if (idTokenExpired) {\n            this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\n        }\n\n        return idTokenExpired;\n    }\n\n    hasAccessTokenExpiredIfExpiryExists() {\n        const accessTokenExpiresIn = this.storagePersistanceService.accessTokenExpiresIn;\n        const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\n            accessTokenExpiresIn,\n            this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds\n        );\n\n        const hasExpired = !accessTokenHasNotExpired;\n\n        if (hasExpired) {\n            this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\n        }\n\n        return hasExpired;\n    }\n\n    private getCurrentlyPersistedAuthState() {\n        return this.storagePersistanceService.authorizedState;\n    }\n\n    private persistAuthStateInStorage(authState: AuthorizedState) {\n        this.storagePersistanceService.authorizedState = authState;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { map, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { OpenIdConfiguration } from './openid-configuration';\n\n@Injectable()\nexport class OidcConfigService {\n    private WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\n    constructor(\n        private readonly loggerService: LoggerService,\n        private readonly http: DataService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly publicEventsService: PublicEventsService\n    ) {}\n\n    withConfig(passedConfig: OpenIdConfiguration) {\n        if (!passedConfig.stsServer) {\n            this.loggerService.logError('please provide at least an stsServer');\n            return;\n        }\n\n        if (!passedConfig.authWellknownEndpoint) {\n            passedConfig.authWellknownEndpoint = passedConfig.stsServer;\n        }\n\n        const loadConfig$ = this.getWellKnownDocument(passedConfig.authWellknownEndpoint).pipe(\n            map((wellKnownEndpoints) => {\n                return {\n                    issuer: wellKnownEndpoints.issuer,\n                    jwksUri: wellKnownEndpoints.jwks_uri,\n                    authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n                    tokenEndpoint: wellKnownEndpoints.token_endpoint,\n                    userinfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n                    endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n                    checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n                    revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n                    introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n                };\n            }),\n            tap((mappedWellKnownEndpoints) => this.configurationProvider.setConfig(passedConfig, mappedWellKnownEndpoints)),\n            tap((mappedWellKnownEndpoints) =>\n                this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, { passedConfig, mappedWellKnownEndpoints })\n            )\n        );\n\n        return loadConfig$.toPromise();\n    }\n\n    private getWellKnownDocument(wellKnownEndpoint: string) {\n        let url = wellKnownEndpoint;\n\n        if (!wellKnownEndpoint.includes(this.WELL_KNOWN_SUFFIX)) {\n            url = `${wellKnownEndpoint}${this.WELL_KNOWN_SUFFIX}`;\n        }\n\n        return this.http.get<any>(url);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class RandomService {\n    constructor(private loggerService: LoggerService) {}\n\n    createRandom(requiredLength: number): string {\n        if (requiredLength <= 0) {\n            return '';\n        }\n\n        if (requiredLength > 0 && requiredLength < 7) {\n            this.loggerService.logWarning(`RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n            requiredLength = 10;\n        }\n\n        const length = requiredLength - 6;\n        const arr = new Uint8Array((length || length) / 2);\n        this.getCrypto().getRandomValues(arr);\n        return Array.from(arr, this.toHex).join('') + this.randomString(7);\n    }\n\n    private toHex(dec) {\n        return ('0' + dec.toString(16)).substr(-2);\n    }\n\n    private randomString(length) {\n        let result = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        const values = new Uint32Array(length);\n        this.getCrypto().getRandomValues(values);\n        for (let i = 0; i < length; i++) {\n            result += characters[values[i] % characters.length];\n        }\n\n        return result;\n    }\n    private getCrypto() {\n        // support for IE,  (window.crypto || window.msCrypto)\n        return window.crypto || (window as any).msCrypto;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RandomService } from './random/random.service';\n\n@Injectable()\nexport class FlowsDataService {\n    constructor(private storagePersistanceService: StoragePersistanceService, private readonly randomService: RandomService) {}\n\n    createNonce(): string {\n        const nonce = this.randomService.createRandom(40);\n        this.setNonce(nonce);\n        return nonce;\n    }\n\n    setNonce(nonce: string) {\n        this.storagePersistanceService.authNonce = nonce;\n    }\n\n    getAuthStateControl(): any {\n        return this.storagePersistanceService.authStateControl;\n    }\n    setAuthStateControl(authStateControl: string) {\n        this.storagePersistanceService.authStateControl = authStateControl;\n    }\n\n    getExistingOrCreateAuthStateControl(): any {\n        let state = this.storagePersistanceService.authStateControl;\n        if (!state) {\n            state = this.randomService.createRandom(40);\n            this.storagePersistanceService.authStateControl = state;\n        }\n        return state;\n    }\n\n    setSessionState(sessionState: any) {\n        this.storagePersistanceService.sessionState = sessionState;\n    }\n\n    resetStorageFlowData() {\n        this.storagePersistanceService.resetStorageFlowData();\n    }\n\n    getCodeVerifier() {\n        return this.storagePersistanceService.codeVerifier;\n    }\n\n    createCodeVerifier() {\n        const codeVerifier = this.randomService.createRandom(67);\n        this.storagePersistanceService.codeVerifier = codeVerifier;\n        return codeVerifier;\n    }\n\n    isSilentRenewRunning() {\n        return this.storagePersistanceService.silentRenewRunning === 'running';\n    }\n\n    setSilentRenewRunning() {\n        this.storagePersistanceService.silentRenewRunning = 'running';\n    }\n    resetSilentRenewRunning() {\n        this.storagePersistanceService.silentRenewRunning = '';\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class UserService {\n    private userDataInternal$ = new BehaviorSubject<any>(null);\n\n    get userData$() {\n        return this.userDataInternal$.asObservable();\n    }\n\n    constructor(\n        private oidcDataService: DataService,\n        private storagePersistanceService: StoragePersistanceService,\n        private eventService: PublicEventsService,\n        private loggerService: LoggerService,\n        private tokenHelperService: TokenHelperService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly flowHelper: FlowHelper\n    ) {}\n\n    // TODO CHECK PARAMETERS\n    //  validationResult.idToken can be the complete valudationResult\n    getAndPersistUserDataInStore(isRenewProcess = false, idToken?: any, decodedIdToken?: any): Observable<any> {\n        idToken = idToken || this.storagePersistanceService.idToken;\n        decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false);\n\n        const existingUserDataFromStorage = this.getUserDataFromStore();\n        const haveUserData = !!existingUserDataFromStorage;\n        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n        if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n            this.loggerService.logDebug('authorizedCallback id_token flow');\n            this.loggerService.logDebug(this.storagePersistanceService.accessToken);\n\n            this.setUserDataToStore(decodedIdToken);\n            return of(decodedIdToken);\n        }\n\n        if ((!haveUserData && isRenewProcess) || !isRenewProcess) {\n            return this.getUserDataOidcFlowAndSave(decodedIdToken.sub).pipe(\n                switchMap((userData) => {\n                    this.loggerService.logDebug('Received user data', userData);\n                    if (!!userData) {\n                        this.loggerService.logDebug(this.storagePersistanceService.accessToken);\n                        return of(userData);\n                    } else {\n                        return throwError('no user data, request failed');\n                    }\n                })\n            );\n        }\n\n        return of(existingUserDataFromStorage);\n    }\n\n    getUserDataFromStore(): any {\n        return this.storagePersistanceService.userData || null;\n    }\n\n    publishUserdataIfExists() {\n        const userdata = this.getUserDataFromStore();\n        if (userdata) {\n            this.userDataInternal$.next(userdata);\n            this.eventService.fireEvent(EventTypes.UserDataChanged, userdata);\n        }\n    }\n\n    setUserDataToStore(value: any): void {\n        this.storagePersistanceService.userData = value;\n        this.userDataInternal$.next(value);\n        this.eventService.fireEvent(EventTypes.UserDataChanged, value);\n    }\n\n    resetUserDataInStore(): void {\n        this.storagePersistanceService.userData = null;\n        this.eventService.fireEvent(EventTypes.UserDataChanged, null);\n        this.userDataInternal$.next(null);\n    }\n\n    private getUserDataOidcFlowAndSave(idTokenSub: any): Observable<any> {\n        return this.getIdentityUserData().pipe(\n            map((data: any) => {\n                if (this.validateUserdataSubIdToken(idTokenSub, data?.sub)) {\n                    this.setUserDataToStore(data);\n                    return data;\n                } else {\n                    // something went wrong, userdata sub does not match that from id_token\n                    this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                    this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                    this.resetUserDataInStore();\n                    return null;\n                }\n            })\n        );\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.storagePersistanceService.getAccessToken();\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n\n            return throwError('authWellKnownEndpoints is undefined');\n        }\n\n        const canGetUserData = this.configurationProvider?.wellKnownEndpoints?.userinfoEndpoint;\n\n        if (!canGetUserData) {\n            this.loggerService.logError(\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n            );\n            return throwError('authWellKnownEndpoints.userinfo_endpoint is undefined');\n        }\n\n        return this.oidcDataService.get(this.configurationProvider.wellKnownEndpoints.userinfoEndpoint, token);\n    }\n\n    private validateUserdataSubIdToken(idTokenSub: any, userdataSub: any): boolean {\n        if (!idTokenSub) {\n            return false;\n        }\n\n        if (!userdataSub) {\n            return false;\n        }\n\n        if ((idTokenSub as string) !== (userdataSub as string)) {\n            this.loggerService.logDebug('validateUserdataSubIdToken failed', idTokenSub, userdataSub);\n            return false;\n        }\n\n        return true;\n    }\n}\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport function _window(): any {\r\n    return window;\r\n}\r\n\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n","export enum ValidationResult {\n    NotSet = 'NotSet',\n    StatesDoNotMatch = 'StatesDoNotMatch',\n    SignatureFailed = 'SignatureFailed',\n    IncorrectNonce = 'IncorrectNonce',\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\n    MaxOffsetExpired = 'MaxOffsetExpired',\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n    IncorrectAud = 'IncorrectAud',\n    IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\n    IncorrectAzp = 'IncorrectAzp',\n    TokenExpired = 'TokenExpired',\n    IncorrectAtHash = 'IncorrectAtHash',\n    Ok = 'Ok',\n    LoginRequired = 'LoginRequired',\n    SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { oneLineTrim } from 'common-tags';\r\nimport { ConfigurationProvider } from '../../config/config.provider';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\r\nimport { WINDOW } from '../window/window.reference';\r\nimport { UriEncoder } from './uri-encoder';\r\n\r\n@Injectable()\r\nexport class UrlService {\r\n    private CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\r\n\r\n    constructor(\r\n        private readonly configurationProvider: ConfigurationProvider,\r\n        private readonly loggerService: LoggerService,\r\n        private readonly flowsDataService: FlowsDataService,\r\n        private readonly flowHelper: FlowHelper,\r\n        private tokenValidationService: TokenValidationService,\r\n        @Inject(WINDOW) private window: any\r\n    ) {}\r\n\r\n    getUrlParameter(urlToCheck: any, name: any): string {\r\n        if (!urlToCheck) {\r\n            return '';\r\n        }\r\n\r\n        if (!name) {\r\n            return '';\r\n        }\r\n\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        const results = regex.exec(urlToCheck);\r\n        return results === null ? '' : decodeURIComponent(results[1]);\r\n    }\r\n\r\n    isCallbackFromSts() {\r\n        const anyParameterIsGiven = this.CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(this.window.location.toString(), x));\r\n        return anyParameterIsGiven;\r\n    }\r\n\r\n    getRefreshSessionSilentRenewUrl(): string {\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            return this.createUrlCodeFlowWithSilentRenew();\r\n        }\r\n\r\n        return this.createUrlImplicitFlowWithSilentRenew() || '';\r\n    }\r\n\r\n    getAuthorizeUrl(customParams?: { [key: string]: string | number | boolean }): string {\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            return this.createUrlCodeFlowAuthorize(customParams);\r\n        }\r\n\r\n        return this.createUrlImplicitFlowAuthorize(customParams) || '';\r\n    }\r\n\r\n    createEndSessionUrl(idTokenHint: string) {\r\n        const endSessionEndpoint = this.configurationProvider.wellKnownEndpoints?.endSessionEndpoint;\r\n\r\n        if (!endSessionEndpoint) {\r\n            return null;\r\n        }\r\n\r\n        const urlParts = endSessionEndpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', idTokenHint);\r\n\r\n        const postLogoutRedirectUri = this.getPostLogoutRedirectUrl();\r\n\r\n        if (postLogoutRedirectUri) {\r\n            params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\r\n        }\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    createRevocationEndpointBodyAccessToken(token: any) {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return `client_id=${clientId}&token=${token}&token_type_hint=access_token`;\r\n    }\r\n\r\n    createRevocationEndpointBodyRefreshToken(token: any) {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return `client_id=${clientId}&token=${token}&token_type_hint=refresh_token`;\r\n    }\r\n\r\n    getRevocationEndpointUrl() {\r\n        const endSessionEndpoint = this.configurationProvider.wellKnownEndpoints?.revocationEndpoint;\r\n\r\n        if (!endSessionEndpoint) {\r\n            return null;\r\n        }\r\n\r\n        const urlParts = endSessionEndpoint.split('?');\r\n\r\n        const revocationEndpointUrl = urlParts[0];\r\n        return revocationEndpointUrl;\r\n    }\r\n\r\n    createBodyForCodeFlowCodeRequest(code: string): string {\r\n        const codeVerifier = this.flowsDataService.getCodeVerifier();\r\n        if (!codeVerifier) {\r\n            this.loggerService.logError(`CodeVerifier is not set `, codeVerifier);\r\n            return null;\r\n        }\r\n\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        const dataForBody = oneLineTrim`grant_type=authorization_code\r\n            &client_id=${clientId}\r\n            &code_verifier=${codeVerifier}\r\n            &code=${code}`;\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (this.flowsDataService.isSilentRenewRunning() && silentRenewUrl) {\r\n            return oneLineTrim`${dataForBody}&redirect_uri=${silentRenewUrl}`;\r\n        }\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        return oneLineTrim`${dataForBody}&redirect_uri=${redirectUrl}`;\r\n    }\r\n\r\n    createBodyForCodeFlowRefreshTokensRequest(refreshtoken: string): string {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return oneLineTrim`grant_type=refresh_token\r\n          &client_id=${clientId}\r\n          &refresh_token=${refreshtoken}`;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        codeChallenge: string,\r\n        redirectUrl: string,\r\n        nonce: string,\r\n        state: string,\r\n        prompt?: string,\r\n        customRequestParams?: { [key: string]: string | number | boolean }\r\n    ): string {\r\n        const authorizationEndpoint = this.configurationProvider?.wellKnownEndpoints?.authorizationEndpoint;\r\n\r\n        if (!authorizationEndpoint) {\r\n            this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\r\n            return null;\r\n        }\r\n\r\n        const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.openIDConfiguration;\r\n\r\n        if (!clientId) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\r\n            return null;\r\n        }\r\n\r\n        if (!responseType) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add responseType because it was: `, responseType);\r\n            return null;\r\n        }\r\n\r\n        if (!scope) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add scope because it was: `, scope);\r\n            return null;\r\n        }\r\n\r\n        const urlParts = authorizationEndpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n\r\n        params = params.set('client_id', clientId);\r\n        params = params.append('redirect_uri', redirectUrl);\r\n        params = params.append('response_type', responseType);\r\n        params = params.append('scope', scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            params = params.append('code_challenge', codeChallenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (hdParam) {\r\n            params = params.append('hd', hdParam);\r\n        }\r\n\r\n        if (customParams || customRequestParams) {\r\n            const customParamsToAdd = { ...(customParams || {}), ...(customRequestParams || {}) };\r\n\r\n            for (const [key, value] of Object.entries(customParamsToAdd)) {\r\n                params = params.append(key, value.toString());\r\n            }\r\n        }\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createUrlImplicitFlowWithSilentRenew(): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (!silentRenewUrl) {\r\n            return null;\r\n        }\r\n\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ', state);\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, 'none');\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlCodeFlowWithSilentRenew(): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + state);\r\n\r\n        // code_challenge with \"S256\"\r\n        const codeVerifier = this.flowsDataService.createCodeVerifier();\r\n        const codeChallenge = this.tokenValidationService.generateCodeVerifier(codeVerifier);\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (!silentRenewUrl) {\r\n            return null;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, 'none');\r\n        }\r\n\r\n        this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlImplicitFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n        this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl('', redirectUrl, nonce, state, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlCodeFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n        this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        // code_challenge with \"S256\"\r\n        const codeVerifier = this.flowsDataService.createCodeVerifier();\r\n        const codeChallenge = this.tokenValidationService.generateCodeVerifier(codeVerifier);\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private getRedirectUrl() {\r\n        const redirectUrl = this.configurationProvider.openIDConfiguration?.redirectUrl;\r\n\r\n        if (!redirectUrl) {\r\n            this.loggerService.logError(`could not get redirectUrl, was: `, redirectUrl);\r\n            return null;\r\n        }\r\n\r\n        return redirectUrl;\r\n    }\r\n\r\n    private getSilentRenewUrl() {\r\n        const silentRenewUrl = this.configurationProvider.openIDConfiguration?.silentRenewUrl;\r\n\r\n        if (!silentRenewUrl) {\r\n            this.loggerService.logError(`could not get silentRenewUrl, was: `, silentRenewUrl);\r\n            return null;\r\n        }\r\n\r\n        return silentRenewUrl;\r\n    }\r\n\r\n    private getPostLogoutRedirectUrl() {\r\n        const postLogoutRedirectUri = this.configurationProvider.openIDConfiguration?.postLogoutRedirectUri;\r\n        if (!postLogoutRedirectUri) {\r\n            this.loggerService.logError(`could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\r\n            return null;\r\n        }\r\n\r\n        return postLogoutRedirectUri;\r\n    }\r\n\r\n    private getClientId() {\r\n        const clientId = this.configurationProvider.openIDConfiguration?.clientId;\r\n        if (!clientId) {\r\n            this.loggerService.logError(`could not get clientId, was: `, clientId);\r\n            return null;\r\n        }\r\n\r\n        return clientId;\r\n    }\r\n}\r\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n    constructor(\n        public accessToken = '',\n        public idToken = '',\n        public authResponseIsValid = false,\n        public decodedIdToken: any = {},\n        public state: ValidationResult = ValidationResult.NotSet\n    ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\nimport { StateValidationResult } from './state-validation-result';\nimport { TokenValidationService } from './token-validation.service';\nimport { ValidationResult } from './validation-result';\n\n@Injectable()\nexport class StateValidationService {\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private tokenValidationService: TokenValidationService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly flowHelper: FlowHelper\n    ) {}\n\n    getValidatedStateResult(callbackContext: CallbackContext): StateValidationResult {\n        if (callbackContext?.authResult.error) {\n            return new StateValidationResult('', '', false, {});\n        }\n\n        return this.validateState(callbackContext);\n    }\n\n    private isIdTokenAfterRefreshTokenRequestValid(callbackContext: CallbackContext, newIdToken: any): boolean {\n        if (!this.configurationProvider.openIDConfiguration.useRefreshToken) {\n            return true;\n        }\n\n        if (!callbackContext.existingIdToken) {\n            return true;\n        }\n        const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false);\n\n        // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n        // except that it might not contain an id_token.\n\n        // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n\n        // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.iss !== newIdToken.iss) {\n            this.loggerService.logDebug(`iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n            return false;\n        }\n        // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n        //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n        // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n        if (decodedIdToken.azp !== newIdToken.azp) {\n            this.loggerService.logDebug(`azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n            return false;\n        }\n        // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.sub !== newIdToken.sub) {\n            this.loggerService.logDebug(`sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n            return false;\n        }\n\n        // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.aud !== newIdToken.aud) {\n            this.loggerService.logDebug(`aud do not match: ${decodedIdToken.aud} ${newIdToken.aud}`);\n            return false;\n        }\n\n        if (this.configurationProvider.openIDConfiguration.disableRefreshIdTokenAuthTimeValidation) {\n            return true;\n        }\n\n        // its iat Claim MUST represent the time that the new ID Token is issued,\n        // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n        // - not the time that the new ID token is issued,\n        if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n            this.loggerService.logDebug(`auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    validateState(callbackContext): StateValidationResult {\n        const toReturn = new StateValidationResult();\n        if (\n            !this.tokenValidationService.validateStateFromHashCallback(\n                callbackContext.authResult.state,\n                this.storagePersistanceService.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            toReturn.state = ValidationResult.StatesDoNotMatch;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n        if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n            toReturn.accessToken = callbackContext.authResult.access_token;\n        }\n\n        if (callbackContext.authResult.id_token) {\n            toReturn.idToken = callbackContext.authResult.id_token;\n\n            toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false);\n\n            if (!this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys)) {\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n                toReturn.state = ValidationResult.SignatureFailed;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenNonce(\n                    toReturn.decodedIdToken,\n                    this.storagePersistanceService.authNonce,\n                    this.configurationProvider.openIDConfiguration.ignoreNonceAfterRefresh\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\n                toReturn.state = ValidationResult.IncorrectNonce;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken)) {\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenIatMaxOffset(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.maxIdTokenIatOffsetAllowedInSeconds,\n                    this.configurationProvider.openIDConfiguration.disableIatOffsetValidation\n                )\n            ) {\n                this.loggerService.logWarning(\n                    'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n                );\n                toReturn.state = ValidationResult.MaxOffsetExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                if (this.configurationProvider.openIDConfiguration.issValidationOff) {\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n                } else if (\n                    !this.configurationProvider.openIDConfiguration.issValidationOff &&\n                    !this.tokenValidationService.validateIdTokenIss(\n                        toReturn.decodedIdToken,\n                        this.configurationProvider.wellKnownEndpoints.issuer\n                    )\n                ) {\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n                    this.handleUnsuccessfulValidation();\n                    return toReturn;\n                }\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenAud(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.clientId\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\n                toReturn.state = ValidationResult.IncorrectAud;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback missing azp');\n                toReturn.state = ValidationResult.IncorrectAzp;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenAzpValid(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.clientId\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect azp');\n                toReturn.state = ValidationResult.IncorrectAzp;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback pre, post id_token claims do not match in refresh');\n                toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback id token expired');\n                toReturn.state = ValidationResult.TokenExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\n        }\n\n        // flow id_token\n        if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation();\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false);\n\n        // The at_hash is optional for the code flow\n        if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\n            this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n        } else if (\n            !this.tokenValidationService.validateIdTokenAtHash(\n                toReturn.accessToken,\n                toReturn.decodedIdToken.at_hash,\n                isCurrentFlowCodeFlow,\n                idTokenHeader.alg // 'RSA256'\n            ) ||\n            !toReturn.accessToken\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        toReturn.state = ValidationResult.Ok;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.storagePersistanceService.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.autoCleanStateAfterAuthentication) {\n            this.storagePersistanceService.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    }\n\n    private handleUnsuccessfulValidation() {\n        this.storagePersistanceService.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.autoCleanStateAfterAuthentication) {\n            this.storagePersistanceService.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { JwtKeys } from '../validation/jwtkeys';\r\n\r\n@Injectable()\r\nexport class SigninKeyDataService {\r\n    constructor(\r\n        private configurationProvider: ConfigurationProvider,\r\n        private loggerService: LoggerService,\r\n        private dataService: DataService\r\n    ) {}\r\n\r\n    getSigningKeys() {\r\n        if (!this.configurationProvider.wellKnownEndpoints?.jwksUri) {\r\n            const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${this.configurationProvider.wellKnownEndpoints?.jwksUri}'`;\r\n            this.loggerService.logWarning(error);\r\n            return throwError(error);\r\n        }\r\n\r\n        this.loggerService.logDebug('Getting signinkeys from ', this.configurationProvider.wellKnownEndpoints.jwksUri);\r\n\r\n        return this.dataService\r\n            .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwksUri)\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.logError(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { UserService } from '../userData/user-service';\nimport { UrlService } from '../utils/url/url.service';\nimport { StateValidationResult } from '../validation/state-validation-result';\nimport { StateValidationService } from '../validation/state-validation.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { ValidationResult } from '../validation/validation-result';\nimport { CallbackContext } from './callback-context';\nimport { FlowsDataService } from './flows-data.service';\nimport { SigninKeyDataService } from './signin-key-data.service';\n\n@Injectable()\nexport class FlowsService {\n    constructor(\n        private readonly urlService: UrlService,\n        private readonly loggerService: LoggerService,\n        private readonly tokenValidationService: TokenValidationService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly authStateService: AuthStateService,\n        private readonly flowsDataService: FlowsDataService,\n        private readonly signinKeyDataService: SigninKeyDataService,\n        private readonly dataService: DataService,\n        private readonly userService: UserService,\n        private readonly stateValidationService: StateValidationService\n    ) {}\n\n    resetAuthorizationData(): void {\n        if (this.configurationProvider.openIDConfiguration.autoUserinfo) {\n            // Clear user data. Fixes #97.\n            this.userService.resetUserDataInStore();\n        }\n\n        this.flowsDataService.resetStorageFlowData();\n        this.authStateService.setUnauthorizedAndFireEvent();\n    }\n\n    processCodeFlowCallback(urlToCheck: string) {\n        return this.codeFlowCallback(urlToCheck).pipe(\n            switchMap((callbackContext) => this.codeFlowCodeRequest(callbackContext)),\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processSilentRenewCodeFlowCallback(firstContext: CallbackContext) {\n        return this.codeFlowCodeRequest(firstContext).pipe(\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processImplicitFlowCallback(hash?: string) {\n        return this.implicitFlowCallback(hash).pipe(\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processRefreshToken() {\n        return this.refreshSessionWithRefreshTokens().pipe(\n            switchMap((callbackContext) => this.refreshTokensRequestTokens(callbackContext)),\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    // STEP 1 Code Flow\n    private codeFlowCallback(urlToCheck: string): Observable<CallbackContext> {\n        const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n        const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n        const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state') || null;\n\n        if (!state) {\n            this.loggerService.logDebug('no state in url');\n            return throwError('no state in url');\n        }\n        if (!code) {\n            this.loggerService.logDebug('no code in url');\n            return throwError('no code in url');\n        }\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\n\n        const initialCallbackContext = {\n            code,\n            refreshToken: null,\n            state,\n            sessionState,\n            authResult: null,\n            isRenewProcess: false,\n            jwtKeys: null,\n            validationResult: null,\n            existingIdToken: null,\n        };\n        return of(initialCallbackContext);\n    }\n\n    // STEP 1 Implicit Flow\n    private implicitFlowCallback(hash?: string): Observable<CallbackContext> {\n        const isRenewProcessData = this.flowsDataService.isSilentRenewRunning();\n\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        if (!isRenewProcessData) {\n            this.resetAuthorizationData();\n        }\n\n        hash = hash || window.location.hash.substr(1);\n\n        const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\n            const parts = item.split('=');\n            resultData[parts.shift() as string] = parts.join('=');\n            return resultData;\n        }, {});\n\n        const callbackContext = {\n            code: null,\n            refreshToken: null,\n            state: null,\n            sessionState: null,\n            authResult,\n            isRenewProcess: isRenewProcessData,\n            jwtKeys: null,\n            validationResult: null,\n            existingIdToken: null,\n        };\n\n        return of(callbackContext);\n    }\n\n    // STEP 1 Refresh session\n    private refreshSessionWithRefreshTokens(): Observable<CallbackContext> {\n        const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl();\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + stateData);\n        const refreshToken = this.authStateService.getRefreshToken();\n        const idToken = this.authStateService.getIdToken();\n        // TODO add id_token data\n\n        if (refreshToken) {\n            const callbackContext = {\n                code: null,\n                refreshToken,\n                state: stateData,\n                sessionState: null,\n                authResult: null,\n                isRenewProcess: false,\n                jwtKeys: null,\n                validationResult: null,\n                existingIdToken: idToken,\n            };\n\n            this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\n            // Nonce is not used with refresh tokens; but Keycloak may send it anyway\n            this.flowsDataService.setNonce(TokenValidationService.RefreshTokenNoncePlaceholder);\n\n            return of(callbackContext);\n        } else {\n            const errorMessage = 'no refresh token found, please login';\n            this.loggerService.logError(errorMessage);\n            return throwError(errorMessage);\n        }\n    }\n\n    // STEP 2 Refresh Token\n    private refreshTokensRequestTokens(callbackContext: CallbackContext): Observable<CallbackContext> {\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const tokenRequestUrl = this.getTokenEndpoint();\n        if (!tokenRequestUrl) {\n            return throwError('Token Endpoint not defined');\n        }\n\n        const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken);\n\n        return this.dataService.post(tokenRequestUrl, data, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('token refresh response: ', response);\n                let authResult: any = new Object();\n                authResult = response;\n                authResult.state = callbackContext.state;\n\n                callbackContext.authResult = authResult;\n                return of(callbackContext);\n            }),\n            catchError((error) => {\n                const errorMessage = `OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}: ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n    private codeFlowCodeRequest(callbackContext: CallbackContext): Observable<CallbackContext> {\n        const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(\n            callbackContext.state,\n            this.flowsDataService.getAuthStateControl()\n        );\n\n        if (!isStateCorrect) {\n            this.loggerService.logWarning('codeFlowCodeRequest incorrect state');\n            return throwError('codeFlowCodeRequest incorrect state');\n        }\n\n        const tokenRequestUrl = this.getTokenEndpoint();\n        if (!tokenRequestUrl) {\n            return throwError('Token Endpoint not defined');\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code);\n\n        return this.dataService.post(tokenRequestUrl, bodyForCodeFlow, headers).pipe(\n            switchMap((response) => {\n                let authResult: any = new Object();\n                authResult = response;\n                authResult.state = callbackContext.state;\n                authResult.session_state = callbackContext.sessionState;\n\n                callbackContext.authResult = authResult;\n                return of(callbackContext);\n            }),\n            catchError((error) => {\n                const errorMessage = `OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer} with error ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 3 Code Flow, STEP 3 Refresh Token\n    private codeFlowSilentRenewCheck(callbackContext: CallbackContext): Observable<CallbackContext> {\n        callbackContext.isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\n        if (!callbackContext.isRenewProcess) {\n            this.resetAuthorizationData();\n        }\n\n        return of(callbackContext);\n    }\n\n    // STEP 4 Code Flow, STEP 2 Implicit Flow, STEP 4 Refresh Token\n    private callbackHistoryAndResetJwtKeys(callbackContext: CallbackContext): Observable<CallbackContext> {\n        this.authStateService.setAuthResultInStorage(callbackContext.authResult);\n\n        if (this.historyCleanUpTurnedOn() && !callbackContext.isRenewProcess) {\n            this.resetBrowserHistory();\n        } else {\n            this.loggerService.logDebug('history clean up inactive');\n        }\n\n        if (callbackContext.authResult.error) {\n            const errorMessage = `authorizedCallbackProcedure came with error: ${callbackContext.authResult.error}`;\n            this.loggerService.logDebug(errorMessage);\n            this.resetAuthorizationData();\n            this.flowsDataService.setNonce('');\n            this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n            return throwError(errorMessage);\n        }\n\n        this.loggerService.logDebug(callbackContext.authResult);\n        this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n        return this.signinKeyDataService.getSigningKeys().pipe(\n            switchMap((jwtKeys) => {\n                if (jwtKeys) {\n                    callbackContext.jwtKeys = jwtKeys;\n\n                    return of(callbackContext);\n                }\n\n                const errorMessage = `Failed to retrieve signing key`;\n                this.loggerService.logWarning(errorMessage);\n                return throwError(errorMessage);\n            }),\n            catchError((err) => {\n                const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n                this.loggerService.logWarning(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 5 All flows\n    private callbackStateValidation(callbackContext: CallbackContext): Observable<CallbackContext> {\n        const validationResult = this.stateValidationService.getValidatedStateResult(callbackContext);\n        callbackContext.validationResult = validationResult;\n\n        if (validationResult.authResponseIsValid) {\n            this.authStateService.setAuthorizationData(validationResult.accessToken, validationResult.idToken);\n\n            return of(callbackContext);\n        } else {\n            const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${window.location.hash}`;\n            this.loggerService.logWarning(errorMessage);\n            this.resetAuthorizationData();\n            this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n            return throwError(errorMessage);\n        }\n    }\n\n    // STEP 6 userData\n    private callbackUser(callbackContext: CallbackContext): Observable<CallbackContext> {\n        if (!this.configurationProvider.openIDConfiguration.autoUserinfo) {\n            if (!callbackContext.isRenewProcess) {\n                // userData is set to the id_token decoded, auto get user data set to false\n                this.userService.setUserDataToStore(callbackContext.validationResult.decodedIdToken);\n            }\n\n            this.publishAuthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n            return of(callbackContext);\n        }\n\n        return this.userService\n            .getAndPersistUserDataInStore(\n                callbackContext.isRenewProcess,\n                callbackContext.validationResult.idToken,\n                callbackContext.validationResult.decodedIdToken\n            )\n            .pipe(\n                switchMap((userData) => {\n                    if (!!userData) {\n                        this.flowsDataService.setSessionState(callbackContext.authResult.session_state);\n                        this.publishAuthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n                        return of(callbackContext);\n                    } else {\n                        this.resetAuthorizationData();\n                        this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n                        const errorMessage = `Called for userData but they were ${userData}`;\n                        this.loggerService.logWarning(errorMessage);\n                        return throwError(errorMessage);\n                    }\n                }),\n                catchError((err) => {\n                    const errorMessage = `Failed to retreive user info with error:  ${err}`;\n                    this.loggerService.logWarning(errorMessage);\n                    return throwError(errorMessage);\n                })\n            );\n    }\n\n    private publishAuthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Authorized,\n            validationResult: stateValidationResult.state,\n            isRenewProcess,\n        });\n    }\n\n    private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Unauthorized,\n            validationResult: stateValidationResult.state,\n            isRenewProcess,\n        });\n    }\n\n    private handleResultErrorFromCallback(result: any, isRenewProcess: boolean) {\n        let validationResult = ValidationResult.SecureTokenServerError;\n\n        if ((result.error as string) === 'login_required') {\n            validationResult = ValidationResult.LoginRequired;\n        }\n\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Unauthorized,\n            validationResult,\n            isRenewProcess,\n        });\n    }\n\n    private getTokenEndpoint(): string {\n        return this.configurationProvider.wellKnownEndpoints?.tokenEndpoint || null;\n    }\n\n    private historyCleanUpTurnedOn() {\n        return !this.configurationProvider.openIDConfiguration.historyCleanupOff;\n    }\n\n    private resetBrowserHistory() {\n        window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../logging/logger.service';\n\n@Injectable()\nexport class IFrameService {\n    constructor(private loggerService: LoggerService) {}\n\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n        if (this.isIFrameElement(iFrameOnParent)) {\n            return iFrameOnParent;\n        }\n\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n        if (this.isIFrameElement(iFrameOnSelf)) {\n            return iFrameOnSelf;\n        }\n        return null;\n    }\n\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\n        const sessionIframe = window.document.createElement('iframe');\n        sessionIframe.id = identifier;\n        this.loggerService.logDebug(sessionIframe);\n        sessionIframe.style.display = 'none';\n        window.document.body.appendChild(sessionIframe);\n        return sessionIframe;\n    }\n\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n        try {\n            const iFrameElement = window.parent.document.getElementById(identifier);\n            if (this.isIFrameElement(iFrameElement)) {\n                return iFrameElement;\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n        const iFrameElement = window.document.getElementById(identifier);\n        if (this.isIFrameElement(iFrameElement)) {\n            return iFrameElement;\n        }\n        return null;\n    }\n\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n        return !!element && element instanceof HTMLIFrameElement;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class CheckSessionService {\n    private checkSessionReceived = false;\n    private scheduledHeartBeatRunning: any;\n    private lastIFrameRefresh = 0;\n    private outstandingMessages = 0;\n    private heartBeatInterval = 3000;\n    private iframeRefreshInterval = 60000;\n\n    private checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\n\n    get checkSessionChanged$() {\n        return this.checkSessionChangedInternal$.asObservable();\n    }\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private iFrameService: IFrameService,\n        private zone: NgZone,\n        private eventService: PublicEventsService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    isCheckSessionConfigured() {\n        return this.configurationProvider.openIDConfiguration.startCheckSession;\n    }\n\n    start(): void {\n        if (!!this.scheduledHeartBeatRunning) {\n            return;\n        }\n\n        this.init();\n\n        const clientId = this.configurationProvider.openIDConfiguration.clientId;\n        this.pollServerSession(clientId);\n    }\n\n    stop(): void {\n        if (!this.scheduledHeartBeatRunning) {\n            return;\n        }\n\n        this.clearScheduledHeartBeat();\n        this.checkSessionReceived = false;\n    }\n\n    serverStateChanged() {\n        return this.configurationProvider.openIDConfiguration.startCheckSession && this.checkSessionReceived;\n    }\n\n    private init() {\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n            return;\n        }\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n            return;\n        }\n\n        const existingIframe = this.getOrCreateIframe();\n\n        if (this.configurationProvider.wellKnownEndpoints.checkSessionIframe) {\n            existingIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.checkSessionIframe);\n        } else {\n            this.loggerService.logWarning('init check session: checkSessionIframe is not configured to run');\n        }\n\n        this.bindMessageEventToIframe();\n\n        existingIframe.onload = () => {\n            this.lastIFrameRefresh = Date.now();\n        };\n    }\n\n    private pollServerSession(clientId: string) {\n        this.outstandingMessages = 0;\n\n        const pollServerSessionRecur = () => {\n            const existingIframe = this.getExistingIframe();\n            if (existingIframe && clientId) {\n                this.loggerService.logDebug(existingIframe);\n                const sessionState = this.storagePersistanceService.sessionState;\n                if (sessionState) {\n                    this.outstandingMessages++;\n                    existingIframe.contentWindow.postMessage(\n                        clientId + ' ' + sessionState,\n                        this.configurationProvider.openIDConfiguration.stsServer\n                    );\n                } else {\n                    this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\n                }\n            } else {\n                this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist');\n                this.loggerService.logDebug(clientId);\n                this.loggerService.logDebug(existingIframe);\n            }\n\n            // after sending three messages with no response, fail.\n            if (this.outstandingMessages > 3) {\n                this.loggerService.logError(\n                    `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\n                );\n            }\n        };\n\n        this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeatRunning = setInterval(pollServerSessionRecur, this.heartBeatInterval);\n        });\n    }\n\n    private clearScheduledHeartBeat() {\n        clearTimeout(this.scheduledHeartBeatRunning);\n        this.scheduledHeartBeatRunning = null;\n    }\n\n    private messageHandler(e: any) {\n        const existingIFrame = this.getExistingIframe();\n        this.outstandingMessages = 0;\n        if (\n            existingIFrame &&\n            this.configurationProvider.openIDConfiguration.stsServer.startsWith(e.origin) &&\n            e.source === existingIFrame.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            } else if (e.data === 'changed') {\n                this.loggerService.logDebug(e);\n                this.checkSessionReceived = true;\n                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n                this.checkSessionChangedInternal$.next(true);\n            } else {\n                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    }\n\n    getExistingIframe() {\n        return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n    }\n\n    private bindMessageEventToIframe() {\n        const iframeMessageEvent = this.messageHandler.bind(this);\n        window.addEventListener('message', iframeMessageEvent, false);\n    }\n\n    private getOrCreateIframe() {\n        const existingIframe = this.getExistingIframe();\n\n        if (!existingIframe) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n        }\n\n        return existingIframe;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class SilentRenewService {\n    constructor(private configurationProvider: ConfigurationProvider, private iFrameService: IFrameService) {}\n\n    getOrCreateIframe(): HTMLIFrameElement {\n        const existingIframe = this.getExistingIframe();\n\n        if (!existingIframe) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        }\n\n        return existingIframe;\n    }\n\n    isSilentRenewConfigured() {\n        return (\n            !this.configurationProvider.openIDConfiguration.useRefreshToken && this.configurationProvider.openIDConfiguration.silentRenew\n        );\n    }\n\n    private getExistingIframe() {\n        return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\r\nimport { WINDOW } from '../window/window.reference';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RedirectService {\r\n    constructor(@Inject(WINDOW) private window: any) {}\r\n\r\n    redirectTo(url) {\r\n        this.window.location.href = url;\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsService } from '../flows/flows.service';\nimport { CheckSessionService } from '../iframe/check-session.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RedirectService } from '../utils/redirect/redirect.service';\nimport { UrlService } from '../utils/url/url.service';\n\n@Injectable()\nexport class LogoffRevocationService {\n    constructor(\n        private dataService: DataService,\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private urlService: UrlService,\n        private checkSessionService: CheckSessionService,\n        private flowsService: FlowsService,\n        private redirectService: RedirectService,\n        private configurationProvider: ConfigurationProvider\n    ) {}\n\n    // Logs out on the server and the local client.\n    // If the server state has changed, checksession, then only a local logout.\n    logoff(urlHandler?: (url: string) => any) {\n        this.loggerService.logDebug('logoff, remove auth ');\n        const endSessionUrl = this.getEndSessionUrl();\n        this.flowsService.resetAuthorizationData();\n\n        if (!endSessionUrl) {\n            this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            return;\n        }\n\n        if (this.checkSessionService.serverStateChanged()) {\n            this.loggerService.logDebug('only local login cleaned up, server session has changed');\n        } else if (urlHandler) {\n            urlHandler(endSessionUrl);\n        } else {\n            this.redirectService.redirectTo(endSessionUrl);\n        }\n    }\n\n    logoffLocal() {\n        this.flowsService.resetAuthorizationData();\n    }\n\n    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n    // only the access token is revoked. Then the logout run.\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n        if (!this.configurationProvider.wellKnownEndpoints?.revocationEndpoint) {\n            this.loggerService.logDebug('revocation endpoint not supported');\n            this.logoff(urlHandler);\n        }\n\n        if (this.storagePersistanceService.getRefreshToken()) {\n            return this.revokeRefreshToken().pipe(\n                switchMap((result) => this.revokeAccessToken(result)),\n                catchError((error) => {\n                    const errorMessage = `revoke token failed ${error}`;\n                    this.loggerService.logError(errorMessage);\n                    return throwError(errorMessage);\n                }),\n                tap(() => this.logoff(urlHandler))\n            );\n        } else {\n            return this.revokeAccessToken().pipe(\n                catchError((error) => {\n                    const errorMessage = `revoke access token failed ${error}`;\n                    this.loggerService.logError(errorMessage);\n                    return throwError(errorMessage);\n                }),\n                tap(() => this.logoff(urlHandler))\n            );\n        }\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an access token on the STS. If no token is provided, then the token from\n    // the storage is revoked. You can pass any token to revoke. This makes it possible to\n    // manage your own tokens. The is a public API.\n    revokeAccessToken(accessToken?: any) {\n        const accessTok = accessToken || this.storagePersistanceService.accessToken;\n        const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok);\n        const url = this.urlService.getRevocationEndpointUrl();\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this.dataService.post(url, body, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('revocation endpoint post response: ', response);\n                return of(response);\n            }),\n            catchError((error) => {\n                const errorMessage = `Revocation request failed ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeRefreshToken(refreshToken?: any) {\n        const refreshTok = refreshToken || this.storagePersistanceService.getRefreshToken();\n        const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok);\n        const url = this.urlService.getRevocationEndpointUrl();\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this.dataService.post(url, body, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('revocation endpoint post response: ', response);\n                return of(response);\n            }),\n            catchError((error) => {\n                const errorMessage = `Revocation request failed ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    getEndSessionUrl(): string | null {\n        const idTokenHint = this.storagePersistanceService.idToken;\n        return this.urlService.createEndSessionUrl(idTokenHint);\n    }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { interval, Observable, of, Subject, Subscription, throwError } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../authState/auth-state.service';\r\nimport { AuthorizedState } from '../authState/authorized-state';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { UserService } from '../userData/user-service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { ValidationResult } from '../validation/validation-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CallbackService {\r\n    private runTokenValidationRunning: Subscription = null;\r\n    private scheduledHeartBeatInternal: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    private stsCallbackInternal$ = new Subject();\r\n\r\n    get stsCallback$() {\r\n        return this.stsCallbackInternal$.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private urlService: UrlService,\r\n        private flowsService: FlowsService,\r\n        private flowHelper: FlowHelper,\r\n        private configurationProvider: ConfigurationProvider,\r\n        private router: Router,\r\n        private flowsDataService: FlowsDataService,\r\n        private loggerService: LoggerService,\r\n        private silentRenewService: SilentRenewService,\r\n        private userService: UserService,\r\n        private authStateService: AuthStateService\r\n    ) {}\r\n\r\n    handlePossibleStsCallback(currentCallbackUrl: string) {\r\n        let callback$: Observable<any>;\r\n\r\n        if (!this.urlService.isCallbackFromSts()) {\r\n            callback$ = of(null);\r\n        } else if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            callback$ = this.authorizedCallbackWithCode(currentCallbackUrl);\r\n        } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\r\n            callback$ = this.authorizedImplicitFlowCallback();\r\n        }\r\n\r\n        return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\r\n    }\r\n\r\n    startTokenValidationPeriodically(repeatAfterSeconds: number) {\r\n        if (!!this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silentRenew) {\r\n            return;\r\n        }\r\n\r\n        const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\r\n\r\n        this.loggerService.logDebug(\r\n            `starting token validation check every ${repeatAfterSeconds}s (${millisecondsDelayBetweenTokenCheck}ms)`\r\n        );\r\n\r\n        const periodicallyCheck$ = interval(millisecondsDelayBetweenTokenCheck).pipe(\r\n            switchMap(() => {\r\n                const idToken = this.authStateService.getIdToken();\r\n                const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\r\n                const userDataFromStore = this.userService.getUserDataFromStore();\r\n\r\n                this.loggerService.logDebug(\r\n                    `Checking: silentRenewRunning: ${isSilentRenewRunning} id_token: ${!!idToken} userData: ${!!userDataFromStore}`\r\n                );\r\n\r\n                const shouldBeExecuted = userDataFromStore && !isSilentRenewRunning && idToken;\r\n\r\n                if (!shouldBeExecuted) {\r\n                    return of(null);\r\n                }\r\n\r\n                const idTokenHasExpired = this.authStateService.hasIdTokenExpired();\r\n                const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists();\r\n\r\n                if (!idTokenHasExpired && !accessTokenHasExpired) {\r\n                    return of(null);\r\n                }\r\n\r\n                this.loggerService.logDebug('IsAuthorized: id_token idTokenHasExpired, start silent renew if active');\r\n\r\n                if (!this.configurationProvider.openIDConfiguration.silentRenew) {\r\n                    this.flowsService.resetAuthorizationData();\r\n                    return of(null);\r\n                }\r\n\r\n                this.flowsDataService.setSilentRenewRunning();\r\n\r\n                if (this.flowHelper.isCurrentFlowCodeFlowWithRefeshTokens()) {\r\n                    // Refresh Session using Refresh tokens\r\n                    return this.refreshSessionWithRefreshTokens();\r\n                }\r\n\r\n                return this.refreshSessionWithIframe();\r\n            })\r\n        );\r\n\r\n        this.runTokenValidationRunning = periodicallyCheck$\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                    return throwError('periodically check failed');\r\n                })\r\n            )\r\n            .subscribe(() => {\r\n                if (this.flowHelper.isCurrentFlowCodeFlowWithRefeshTokens()) {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            });\r\n    }\r\n\r\n    private stopPeriodicallTokenCheck(): void {\r\n        if (this.scheduledHeartBeatInternal) {\r\n            clearTimeout(this.scheduledHeartBeatInternal);\r\n            this.scheduledHeartBeatInternal = null;\r\n            this.runTokenValidationRunning.unsubscribe();\r\n            this.runTokenValidationRunning = null;\r\n        }\r\n    }\r\n\r\n    // Code Flow Callback\r\n    private authorizedCallbackWithCode(urlToCheck: string) {\r\n        return this.flowsService.processCodeFlowCallback(urlToCheck).pipe(\r\n            tap((callbackContext) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.postLoginRoute]);\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                this.flowsDataService.resetSilentRenewRunning();\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Implicit Flow Callback\r\n    private authorizedImplicitFlowCallback(hash?: string) {\r\n        return this.flowsService.processImplicitFlowCallback(hash).pipe(\r\n            tap((callbackContext) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.postLoginRoute]);\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                this.flowsDataService.resetSilentRenewRunning();\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private refreshSessionWithIframe(): Observable<boolean> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize Iframe renew');\r\n        const url = this.urlService.getRefreshSessionSilentRenewUrl();\r\n        return this.sendAuthorizeReqestUsingSilentRenew(url);\r\n    }\r\n\r\n    private refreshSessionWithRefreshTokens() {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        return this.flowsService.processRefreshToken().pipe(\r\n            catchError((error) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                this.flowsService.resetAuthorizationData();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private sendAuthorizeReqestUsingSilentRenew(url: string): Observable<boolean> {\r\n        const sessionIframe = this.silentRenewService.getOrCreateIframe();\r\n        this.initSilentRenewRequest();\r\n        this.loggerService.logDebug('sendAuthorizeReqestUsingSilentRenew for URL:' + url);\r\n\r\n        return new Observable((observer) => {\r\n            const onLoadHandler = () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n                this.loggerService.logDebug('removed event listener from IFrame');\r\n                observer.next(true);\r\n                observer.complete();\r\n            };\r\n            sessionIframe.addEventListener('load', onLoadHandler);\r\n            sessionIframe.src = url;\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        if (!e.detail) {\r\n            return;\r\n        }\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            const urlParts = e.detail.toString().split('?');\r\n            // Code Flow Callback silent renew iframe\r\n            this.codeFlowCallbackSilentRenewIframe(urlParts).subscribe(\r\n                () => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                },\r\n                (err: any) => {\r\n                    this.loggerService.logError('Error: ' + err);\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            );\r\n        } else {\r\n            // Implicit Flow Callback silent renew iframe\r\n            this.authorizedImplicitFlowCallback(e.detail).subscribe(\r\n                () => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                },\r\n                (err: any) => {\r\n                    this.loggerService.logError('Error: ' + err);\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    private codeFlowCallbackSilentRenewIframe(urlParts) {\r\n        const params = new HttpParams({\r\n            fromString: urlParts[1],\r\n        });\r\n\r\n        const error = params.get('error');\r\n\r\n        if (error) {\r\n            this.authStateService.updateAndPublishAuthState({\r\n                authorizationState: AuthorizedState.Unauthorized,\r\n                validationResult: ValidationResult.LoginRequired,\r\n                isRenewProcess: true,\r\n            });\r\n            this.flowsService.resetAuthorizationData();\r\n            this.flowsDataService.setNonce('');\r\n            this.stopPeriodicallTokenCheck();\r\n            return throwError(error);\r\n        }\r\n\r\n        const code = params.get('code');\r\n        const state = params.get('state');\r\n        const sessionState = params.get('session_state');\r\n\r\n        const callbackContext = {\r\n            code,\r\n            refreshToken: null,\r\n            state,\r\n            sessionState,\r\n            authResult: null,\r\n            isRenewProcess: false,\r\n            jwtKeys: null,\r\n            validationResult: null,\r\n            existingIdToken: null,\r\n        };\r\n\r\n        return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext).pipe(\r\n            catchError((errorFromFlow) => {\r\n                this.stopPeriodicallTokenCheck();\r\n                this.flowsService.resetAuthorizationData();\r\n                return throwError(errorFromFlow);\r\n            })\r\n        );\r\n    }\r\n\r\n    private initSilentRenewRequest() {\r\n        const instanceId = Math.random();\r\n        this.silentRenewService.getOrCreateIframe();\r\n        // Support authorization via DOM events.\r\n        // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n        //      We only ever want the latest setup service to be reacting to this event.\r\n        this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n        const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\r\n            if (e.detail !== instanceId) {\r\n                window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n            }\r\n        }).bind(this);\r\n\r\n        window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n        window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n        window.dispatchEvent(\r\n            new CustomEvent('oidc-silent-renew-init', {\r\n                detail: instanceId,\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthOptions } from './auth-options';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { CallbackService } from './callback/callback.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { UserService } from './userData/user-service';\nimport { RedirectService } from './utils/redirect/redirect.service';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@Injectable()\nexport class OidcSecurityService {\n    private TOKEN_REFRESH_INTERVALL_IN_SECONDS = 3;\n\n    get configuration() {\n        return this.configurationProvider.configuration;\n    }\n\n    get userData$() {\n        return this.userService.userData$;\n    }\n\n    get isAuthenticated$() {\n        return this.authStateService.authorized$;\n    }\n\n    get checkSessionChanged$() {\n        return this.checkSessionService.checkSessionChanged$;\n    }\n\n    get stsCallback$() {\n        return this.callbackService.stsCallback$;\n    }\n\n    constructor(\n        private checkSessionService: CheckSessionService,\n        private silentRenewService: SilentRenewService,\n        private userService: UserService,\n        private tokenValidationService: TokenValidationService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private configurationProvider: ConfigurationProvider,\n        private urlService: UrlService,\n        private authStateService: AuthStateService,\n        private flowsDataService: FlowsDataService,\n        private flowsService: FlowsService,\n        private callbackService: CallbackService,\n        private logoffRevocationService: LogoffRevocationService,\n        private redirectService: RedirectService\n    ) {}\n\n    checkAuth(): Observable<boolean> {\n        if (!this.configurationProvider.hasValidConfig()) {\n            this.loggerService.logError('Please provide a configuration before setting up the module');\n            return of(false);\n        }\n\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\n\n        const currentUrl = window.location.toString();\n\n        return this.callbackService.handlePossibleStsCallback(currentUrl).pipe(\n            map(() => {\n                const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n                if (isAuthenticated) {\n                    this.authStateService.setAuthorizedAndFireEvent();\n                    this.userService.publishUserdataIfExists();\n\n                    if (this.checkSessionService.isCheckSessionConfigured()) {\n                        this.checkSessionService.start();\n                    }\n\n                    this.callbackService.startTokenValidationPeriodically(this.TOKEN_REFRESH_INTERVALL_IN_SECONDS);\n\n                    if (this.silentRenewService.isSilentRenewConfigured()) {\n                        this.silentRenewService.getOrCreateIframe();\n                    }\n                }\n\n                this.loggerService.logDebug('checkAuth completed fire events, auth: ' + isAuthenticated);\n\n                return isAuthenticated;\n            })\n        );\n    }\n\n    getToken(): string {\n        return this.authStateService.getAccessToken();\n    }\n\n    getIdToken(): string {\n        return this.authStateService.getIdToken();\n    }\n\n    getRefreshToken(): string {\n        return this.authStateService.getRefreshToken();\n    }\n\n    getPayloadFromIdToken(encode = false): any {\n        const token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    }\n\n    setState(state: string): void {\n        this.flowsDataService.setAuthStateControl(state);\n    }\n\n    getState(): string {\n        return this.flowsDataService.getAuthStateControl();\n    }\n\n    // Code Flow with PCKE or Implicit Flow\n    authorize(authOptions?: AuthOptions) {\n        if (!this.configurationProvider.hasValidConfig()) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n\n        if (!this.tokenValidationService.configValidateResponseType(this.configurationProvider.openIDConfiguration.responseType)) {\n            this.loggerService.logError('Invalid response type!');\n            return;\n        }\n\n        this.flowsService.resetAuthorizationData();\n\n        this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n        const { urlHandler, customParams } = authOptions || {};\n\n        const url = this.urlService.getAuthorizeUrl(customParams);\n\n        if (urlHandler) {\n            urlHandler(url);\n        } else {\n            this.redirectService.redirectTo(url);\n        }\n    }\n\n    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n    // only the access token is revoked. Then the logout run.\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n        return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);\n    }\n\n    // Logs out on the server and the local client.\n    // If the server state has changed, checksession, then only a local logout.\n    logoff(urlHandler?: (url: string) => any) {\n        return this.logoffRevocationService.logoff(urlHandler);\n    }\n\n    logoffLocal() {\n        return this.logoffRevocationService.logoffLocal();\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an access token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeAccessToken(accessToken?: any) {\n        return this.logoffRevocationService.revokeAccessToken(accessToken);\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeRefreshToken(refreshToken?: any) {\n        return this.logoffRevocationService.revokeRefreshToken(refreshToken);\n    }\n\n    getEndSessionUrl(): string | null {\n        return this.logoffRevocationService.getEndSessionUrl();\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable()\r\nexport class BrowserStorageService implements AbstractSecurityStorage {\r\n    constructor(private configProvider: ConfigurationProvider, private loggerService: LoggerService) {}\r\n\r\n    read(key: string): any {\r\n        if (!this.hasStorage()) {\r\n            this.loggerService.logDebug(`Wanted to read '${key}' but Storage was undefined`);\r\n            return false;\r\n        }\r\n\r\n        const item = this.getStorage()?.getItem(key);\r\n\r\n        if (!item) {\r\n            this.loggerService.logDebug(`Wanted to read '${key}' but nothing was found`);\r\n            return false;\r\n        }\r\n\r\n        return JSON.parse(item);\r\n    }\r\n\r\n    write(key: string, value: any): boolean {\r\n        if (!this.hasStorage()) {\r\n            this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\r\n            return false;\r\n        }\r\n\r\n        const storage = this.getStorage();\r\n        if (!storage) {\r\n            this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\r\n            return false;\r\n        }\r\n\r\n        value = value || null;\r\n\r\n        storage.setItem(`${key}`, JSON.stringify(value));\r\n        return true;\r\n    }\r\n\r\n    private getStorage() {\r\n        return this.configProvider.openIDConfiguration?.storage;\r\n    }\r\n\r\n    private hasStorage() {\r\n        return typeof Storage !== 'undefined';\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\n        if (!value1 || !value2) {\n            return false;\n        }\n\n        if (this.bothValuesAreArrays(value1, value2)) {\n            return this.arraysEqual(value1 as any[], value2 as any[]);\n        }\n\n        if (this.bothValuesAreStrings(value1, value2)) {\n            return value1 === value2;\n        }\n\n        if (this.bothValuesAreObjects(value1, value2)) {\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n        }\n\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\n                return value1[0] === value2;\n            }\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\n                return value2[0] === value1;\n            }\n        }\n    }\n\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n    }\n\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\n    }\n\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsString(value1) && this.valueIsString(value2);\n    }\n\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\n        return Array.isArray(value1) && Array.isArray(value2);\n    }\n\n    private valueIsString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    private valueIsObject(value: any) {\n        return typeof value === 'object';\n    }\n\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DataService } from './api/data.service';\nimport { HttpBaseService } from './api/http-base.service';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { OidcConfigService } from './config/config.service';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { RandomService } from './flows/random/random.service';\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { IFrameService } from './iframe/existing-iframe.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { OidcSecurityService } from './oidc.security.service';\nimport { PublicEventsService } from './public-events/public-events.service';\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\nimport { BrowserStorageService } from './storage/browser-storage.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { EqualityService } from './utils/equality/equality.service';\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { WINDOW, _window } from './utils/window/window.reference';\nimport { StateValidationService } from './validation/state-validation.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [],\n    exports: [],\n})\nexport class AuthModule {\n    static forRoot(token: Token = {}) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                PublicEventsService,\n                FlowHelper,\n                OidcSecurityService,\n                TokenValidationService,\n                PlatformProvider,\n                CheckSessionService,\n                FlowsDataService,\n                FlowsService,\n                SilentRenewService,\n                ConfigurationProvider,\n                LogoffRevocationService,\n                UserService,\n                RandomService,\n                HttpBaseService,\n                UrlService,\n                AuthStateService,\n                SigninKeyDataService,\n                StoragePersistanceService,\n                TokenHelperService,\n                LoggerService,\n                IFrameService,\n                EqualityService,\n                DataService,\n                StateValidationService,\n                {\n                    provide: AbstractSecurityStorage,\n                    useClass: token.storage || BrowserStorageService,\n                },\n                { provide: WINDOW, useFactory: _window, deps: [] },\n            ],\n        };\n    }\n}\n\nexport type Type<T> = new (...args: any[]) => T;\n\nexport interface Token {\n    storage?: Type<any>;\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c: any[] = [];\n}\n"]}