{"version":3,"file":"angular-auth-oidc-client.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-auth-oidc-client/lib/api/http-base.service.ts","ng://angular-auth-oidc-client/lib/api/data.service.ts","ng://angular-auth-oidc-client/lib/utils/platform-provider/platform.provider.ts","ng://angular-auth-oidc-client/lib/logging/log-level.ts","ng://angular-auth-oidc-client/lib/config/default-config.ts","ng://angular-auth-oidc-client/lib/config/config.provider.ts","ng://angular-auth-oidc-client/lib/logging/logger.service.ts","ng://angular-auth-oidc-client/lib/public-events/event-types.ts","ng://angular-auth-oidc-client/lib/public-events/public-events.service.ts","ng://angular-auth-oidc-client/lib/authState/authorized-state.ts","ng://angular-auth-oidc-client/lib/storage/abstract-security-storage.ts","ng://angular-auth-oidc-client/lib/storage/storage-persistance.service.ts","ng://angular-auth-oidc-client/lib/utils/flowHelper/flow-helper.service.ts","ng://angular-auth-oidc-client/lib/utils/tokenHelper/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/validation/token-validation.service.ts","ng://angular-auth-oidc-client/lib/authState/auth-state.service.ts","ng://angular-auth-oidc-client/lib/config/config.service.ts","ng://angular-auth-oidc-client/lib/flows/random/random.service.ts","ng://angular-auth-oidc-client/lib/flows/flows-data.service.ts","ng://angular-auth-oidc-client/lib/userData/user-service.ts","ng://angular-auth-oidc-client/lib/utils/window/window.reference.ts","ng://angular-auth-oidc-client/lib/utils/url/uri-encoder.ts","ng://angular-auth-oidc-client/lib/utils/url/url.service.ts","ng://angular-auth-oidc-client/lib/validation/validation-result.ts","ng://angular-auth-oidc-client/lib/validation/state-validation-result.ts","ng://angular-auth-oidc-client/lib/validation/state-validation.service.ts","ng://angular-auth-oidc-client/lib/flows/signin-key-data.service.ts","ng://angular-auth-oidc-client/lib/flows/flows.service.ts","ng://angular-auth-oidc-client/lib/iframe/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/iframe/check-session.service.ts","ng://angular-auth-oidc-client/lib/iframe/silent-renew.service.ts","ng://angular-auth-oidc-client/lib/utils/redirect/redirect.service.ts","ng://angular-auth-oidc-client/lib/logoffRevoke/logoff-revocation.service.ts","ng://angular-auth-oidc-client/lib/callback/callback.service.ts","ng://angular-auth-oidc-client/lib/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/storage/browser-storage.service.ts","ng://angular-auth-oidc-client/lib/utils/equality/equality.service.ts","ng://angular-auth-oidc-client/lib/auth.module.ts","ng://angular-auth-oidc-client/lib/validation/jwtkeys.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class HttpBaseService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\r\n        return this.http.get<T>(url, params);\r\n    }\r\n\r\n    post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\r\n        return this.http.post<T>(url, body, params);\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\n\n@Injectable()\nexport class DataService {\n    constructor(private httpClient: HttpBaseService) {}\n\n    get<T>(url: string, token?: string): Observable<T> {\n        const headers = this.prepareHeaders(token);\n\n        return this.httpClient.get<T>(url, {\n            headers,\n        });\n    }\n\n    post<T>(url: string, body: any, headersParams?: HttpHeaders) {\n        const headers = headersParams || this.prepareHeaders();\n\n        return this.httpClient.post<T>(url, body, { headers });\n    }\n\n    private prepareHeaders(token?: string) {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        if (!!token) {\n            headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n        }\n\n        return headers;\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable()\nexport class PlatformProvider {\n    get isBrowser() {\n        return isPlatformBrowser(this.platformId);\n    }\n    constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n}\n","export enum LogLevel {\r\n    Debug,\r\n    Warn,\r\n    Error,\r\n}\r\n","import { LogLevel } from '../logging/log-level';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\n\r\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\r\n    stsServer: 'https://please_set',\r\n    authWellknownEndpoint: '',\r\n    redirectUrl: 'https://please_set',\r\n    clientId: 'please_set',\r\n    responseType: 'code',\r\n    scope: 'openid email profile',\r\n    hdParam: '',\r\n    postLogoutRedirectUri: 'https://please_set',\r\n    startCheckSession: false,\r\n    silentRenew: false,\r\n    silentRenewUrl: 'https://please_set',\r\n    renewTimeBeforeTokenExpiresInSeconds: 0,\r\n    useRefreshToken: false,\r\n    ignoreNonceAfterRefresh: false,\r\n    postLoginRoute: '/',\r\n    forbiddenRoute: '/forbidden',\r\n    unauthorizedRoute: '/unauthorized',\r\n    autoUserinfo: true,\r\n    autoCleanStateAfterAuthentication: true,\r\n    triggerAuthorizationResultEvent: false,\r\n    logLevel: LogLevel.Warn,\r\n    issValidationOff: false,\r\n    historyCleanupOff: false,\r\n    maxIdTokenIatOffsetAllowedInSeconds: 120,\r\n    disableIatOffsetValidation: false,\r\n    storage: typeof Storage !== 'undefined' ? sessionStorage : null,\r\n    customParams: {},\r\n    disableRefreshIdTokenAuthTimeValidation: false,\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\nimport { DEFAULT_CONFIG } from './default-config';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\nimport { PublicConfiguration } from './public-configuration';\r\n\r\n@Injectable()\r\nexport class ConfigurationProvider {\r\n    private wellKnownEndpointsInternal: AuthWellKnownEndpoints;\r\n    private openIdConfigurationInternal: OpenIdConfiguration;\r\n\r\n    get openIDConfiguration(): OpenIdConfiguration {\r\n        if (!this.openIdConfigurationInternal) {\r\n            return null;\r\n        }\r\n\r\n        return this.openIdConfigurationInternal;\r\n    }\r\n\r\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\r\n        if (!this.wellKnownEndpointsInternal) {\r\n            return null;\r\n        }\r\n\r\n        return this.wellKnownEndpointsInternal;\r\n    }\r\n\r\n    get configuration(): PublicConfiguration {\r\n        if (!this.hasValidConfig()) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            configuration: { ...this.openIDConfiguration },\r\n            wellknown: { ...this.wellKnownEndpoints },\r\n        };\r\n    }\r\n\r\n    hasValidConfig() {\r\n        return !!this.wellKnownEndpointsInternal && !!this.openIdConfigurationInternal;\r\n    }\r\n\r\n    constructor(private platformProvider: PlatformProvider) {}\r\n\r\n    setConfig(configuration: OpenIdConfiguration, wellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.wellKnownEndpointsInternal = wellKnownEndpoints;\r\n        this.openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\r\n\r\n        if (configuration?.storage) {\r\n            console.warn(\r\n                'PLEASE NOTE: The storage in the config will be deprecated in future versions: Please pass the custom storage in forRoot() as documented'\r\n            );\r\n        }\r\n\r\n        this.setSpecialCases(this.openIdConfigurationInternal);\r\n    }\r\n\r\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\r\n        if (!this.platformProvider.isBrowser) {\r\n            currentConfig.startCheckSession = false;\r\n            currentConfig.silentRenew = false;\r\n            currentConfig.useRefreshToken = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LogLevel } from './log-level';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private configurationProvider: ConfigurationProvider) {}\n\n    logError(message: any, ...args: any[]) {\n        args.length ? console.error(message, args) : console.error(message);\n    }\n\n    logWarning(message: any, ...args: string[]) {\n        if (this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Warn)) {\n            args.length ? console.warn(message, args) : console.warn(message);\n        }\n    }\n\n    logDebug(message: any, ...args: string[]) {\n        if (this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Debug)) {\n            args.length ? console.log(message, args) : console.log(message);\n        }\n    }\n\n    private currentLogLevelIsEqualOrSmallerThan(logLevel: LogLevel) {\n        return this.configurationProvider.openIDConfiguration.logLevel <= logLevel;\n    }\n}\n","export enum EventTypes {\r\n    /**\r\n     *  This only works in the AppModule Constructor\r\n     */\r\n    ConfigLoaded,\r\n    CheckSessionReceived,\r\n    UserDataChanged,\r\n    NewAuthorizationResult,\r\n    TokenExpired,\r\n    IdTokenExpired,\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { EventTypes } from './event-types';\r\nimport { OidcClientNotification } from './notification';\r\n\r\n@Injectable()\r\nexport class PublicEventsService {\r\n    private notify = new ReplaySubject<OidcClientNotification<any>>(1);\r\n\r\n    fireEvent<T>(type: EventTypes, value?: T) {\r\n        this.notify.next({ type, value });\r\n    }\r\n\r\n    registerForEvents() {\r\n        return this.notify.asObservable();\r\n    }\r\n}\r\n","export enum AuthorizedState {\r\n    Authorized = 'Authorized',\r\n    Unauthorized = 'Unauthorized',\r\n    Unknown = 'Unknown',\r\n}\r\n","import { Injectable } from '@angular/core';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class AbstractSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n","import { Injectable } from '@angular/core';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class StoragePersistanceService {\n    constructor(\n        private readonly oidcSecurityStorage: AbstractSecurityStorage,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    get authResult(): any {\n        return this.retrieve(this.storageAuthResult);\n    }\n\n    set authResult(value: any) {\n        this.store(this.storageAuthResult, value);\n\n        const expiresIn = this.authResult?.expires_in;\n        if (expiresIn) {\n            const accessTokenExpiryTime = new Date().valueOf() + expiresIn * 1000;\n            this.accessTokenExpiresIn = accessTokenExpiryTime;\n        }\n    }\n\n    get accessToken(): string {\n        return this.retrieve(this.storageAccessToken) || '';\n    }\n\n    set accessToken(value: string) {\n        this.store(this.storageAccessToken, value);\n    }\n\n    get idToken(): string {\n        return this.retrieve(this.storageIdToken) || '';\n    }\n\n    set idToken(value: string) {\n        this.store(this.storageIdToken, value);\n    }\n\n    get authorizedState(): string | undefined {\n        return this.retrieve(this.storageAuthorizedState);\n    }\n\n    set authorizedState(value: string | undefined) {\n        this.store(this.storageAuthorizedState, value);\n    }\n\n    get userData(): any {\n        return this.retrieve(this.storageUserData);\n    }\n\n    set userData(value: any) {\n        this.store(this.storageUserData, value);\n    }\n\n    get authNonce(): string {\n        return this.retrieve(this.storageAuthNonce) || '';\n    }\n\n    set authNonce(value: string) {\n        this.store(this.storageAuthNonce, value);\n    }\n\n    get codeVerifier(): string {\n        return this.retrieve(this.storageCodeVerifier) || '';\n    }\n\n    set codeVerifier(value: string) {\n        this.store(this.storageCodeVerifier, value);\n    }\n\n    get authStateControl(): string {\n        return this.retrieve(this.storageAuthStateControl) || '';\n    }\n\n    set authStateControl(value: string) {\n        this.store(this.storageAuthStateControl, value);\n    }\n\n    get sessionState(): any {\n        return this.retrieve(this.storageSessionState);\n    }\n\n    set sessionState(value: any) {\n        this.store(this.storageSessionState, value);\n    }\n\n    get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storageSilentRenewRunning) || '';\n    }\n\n    set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storageSilentRenewRunning, value);\n    }\n    get accessTokenExpiresIn(): any {\n        return this.retrieve(this.storageAccessTokenExpiresIn);\n    }\n\n    set accessTokenExpiresIn(value: any) {\n        this.store(this.storageAccessTokenExpiresIn, value);\n    }\n\n    private storageAuthResult = 'authorizationResult';\n\n    private storageAccessToken = 'authorizationData';\n\n    private storageIdToken = 'authorizationDataIdToken';\n\n    private storageAuthorizedState = 'storageAuthorizedState';\n\n    private storageUserData = 'userData';\n\n    private storageAuthNonce = 'authNonce';\n\n    private storageCodeVerifier = 'codeVerifier';\n\n    private storageAuthStateControl = 'authStateControl';\n\n    private storageSessionState = 'session_state';\n\n    private storageSilentRenewRunning = 'storageSilentRenewRunning';\n\n    private storageAccessTokenExpiresIn = 'access_token_expires_at';\n\n    private retrieve(key: string): any {\n        const keyToRead = this.createKeyWithPrefix(key);\n        return this.oidcSecurityStorage.read(keyToRead);\n    }\n\n    private store(key: string, value: any) {\n        const keyToStore = this.createKeyWithPrefix(key);\n        this.oidcSecurityStorage.write(keyToStore, value);\n    }\n\n    resetStorageFlowData() {\n        this.store(this.storageSessionState, '');\n        this.store(this.storageSilentRenewRunning, '');\n        this.store(this.storageCodeVerifier, '');\n        this.store(this.storageUserData, '');\n    }\n\n    resetAuthStateInStorage() {\n        this.store(this.storageAuthorizedState, AuthorizedState.Unknown);\n        this.store(this.storageAccessToken, '');\n        this.store(this.storageIdToken, '');\n        this.store(this.storageAuthResult, '');\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storageAccessToken);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storageIdToken);\n    }\n\n    getRefreshToken(): any {\n        return this.authResult?.refresh_token;\n    }\n    private createKeyWithPrefix(key: string) {\n        const prefix = this.configurationProvider.openIDConfiguration.clientId;\n\n        return `${prefix}_${key}`;\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from '../../config/config.provider';\r\n\r\n// TODO  TESTING\r\n@Injectable()\r\nexport class FlowHelper {\r\n    constructor(private configurationProvider: ConfigurationProvider) {}\r\n\r\n    isCurrentFlowCodeFlow() {\r\n        return this.currentFlowIs('code');\r\n    }\r\n\r\n    isCurrentFlowAnyImplicitFlow() {\r\n        return this.isCurrentFlowImplicitFlowWithAccessToken() || this.isCurrentFlowImplicitFlowWithoutAccessToken();\r\n    }\r\n\r\n    isCurrentFlowCodeFlowWithRefeshTokens() {\r\n        if (this.isCurrentFlowCodeFlow() && this.configurationProvider.openIDConfiguration.useRefreshToken) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isCurrentFlowImplicitFlowWithAccessToken() {\r\n        return this.currentFlowIs('id_token token');\r\n    }\r\n\r\n    isCurrentFlowImplicitFlowWithoutAccessToken() {\r\n        return this.currentFlowIs('id_token');\r\n    }\r\n\r\n    currentFlowIs(flowTypes: string[] | string) {\r\n        const currentFlow = this.configurationProvider.openIDConfiguration.responseType;\r\n\r\n        if (Array.isArray(flowTypes)) {\r\n            return flowTypes.some((x) => currentFlow === x);\r\n        }\r\n\r\n        return currentFlow === flowTypes;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class TokenHelperService {\n    private PARTS_OF_TOKEN = 3;\n    constructor(private readonly loggerService: LoggerService) {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getHeaderFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 0, encoded);\n    }\n\n    getPayloadFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 1, encoded);\n    }\n\n    getSignatureFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 2, encoded);\n    }\n\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\n        const partOfToken = this.extractPartOfToken(token, index);\n\n        if (encoded) {\n            return partOfToken;\n        }\n\n        const result = this.urlBase64Decode(partOfToken);\n        return JSON.parse(result);\n    }\n\n    private urlBase64Decode(str: string) {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : Buffer.from(output, 'base64').toString('binary');\n\n        try {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            return decodeURIComponent(\n                decoded\n                    .split('')\n                    .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                    .join('')\n            );\n        } catch (err) {\n            return decoded;\n        }\n    }\n\n    private tokenIsValid(token: string) {\n        if (!token) {\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n            return false;\n        }\n\n        if (!(token as string).includes('.')) {\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n            return false;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== this.PARTS_OF_TOKEN) {\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractPartOfToken(token: string, index: number) {\n        return token.split('.')[index];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\n\n@Injectable()\nexport class TokenValidationService {\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\n    keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n    constructor(private tokenHelperService: TokenHelperService, private flowHelper: FlowHelper, private loggerService: LoggerService) { }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    hasIdTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validateIdTokenExpNotExpired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    validateIdTokenExpNotExpired(decodedIdToken: string, offsetSeconds?: number): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Has id_token expired: ${!tokenNotExpired}, ${tokenExpirationValue} > ${nowWithOffset}`);\n\n        // Token not expired?\n        return tokenNotExpired;\n    }\n\n    validateAccessTokenNotExpired(accessTokenExpiresAt: Date, offsetSeconds?: number): boolean {\n        // value is optional, so if it does not exist, then it has not expired\n        if (!accessTokenExpiresAt) {\n            return true;\n        }\n\n        offsetSeconds = offsetSeconds || 0;\n        const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Has access_token expired: ${!tokenNotExpired}, ${accessTokenExpirationValue} > ${nowWithOffset}`);\n\n        // access token not expired?\n        return tokenNotExpired;\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n    // https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n    // audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n    // the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n    // 1970- 01 - 01T00: 00: 00Z as measured\n    // in UTC until the date/ time.\n    validateRequiredIdToken(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\n        if (disableIatOffsetValidation) {\n            return true;\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n\n        maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n        if (dateTimeIatIdToken == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n            (new Date().valueOf() - dateTimeIatIdToken.valueOf()) +\n            ' < ' +\n            maxOffsetAllowedInSeconds * 1000\n        );\n\n        const diff = new Date().valueOf() - dateTimeIatIdToken.valueOf();\n        if (diff > 0) {\n            return diff < maxOffsetAllowedInSeconds * 1000;\n        }\n\n        return -diff < maxOffsetAllowedInSeconds * 1000;\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n\n    // However the nonce claim SHOULD not be present for the refesh_token grant type\n    // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n    // The current spec is ambiguous and Keycloak does send it.\n    validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\n        const isFromRefreshToken =\n            (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) &&\n            localNonce === TokenValidationService.RefreshTokenNoncePlaceholder;\n        if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n            this.loggerService.logDebug(\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any): boolean {\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                dataIdToken.iss +\n                ' authWellKnownEndpoints issuer:' +\n                authWellKnownEndpointsIssuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validateIdTokenAud(dataIdToken: any, aud: any): boolean {\n        if (Array.isArray(dataIdToken.aud)) {\n            // const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\n            const result = dataIdToken.aud.includes(aud);\n\n            if (!result) {\n                this.loggerService.logDebug(\n                    'Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud\n                );\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\n        if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken?.azp) {\n            return false;\n        }\n\n        return true;\n    }\n    // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n    validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\n        if (!dataIdToken?.azp) {\n            return true;\n        }\n\n        if (dataIdToken.azp === clientId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    validateStateFromHashCallback(state: any, localState: any): boolean {\n        if ((state as string) !== (localState as string)) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validateSignatureIdToken(idToken: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\n\n        if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = headerData.kid;\n        const alg = headerData.alg;\n\n        if (!this.keyAlgorithms.includes(alg as string)) {\n            this.loggerService.logWarning('alg not supported', alg);\n            return false;\n        }\n\n        let jwtKtyToUse = 'RSA';\n        if ((alg as string).charAt(0) === 'E') {\n            jwtKtyToUse = 'EC';\n        }\n\n        let isValid = false;\n\n        if (!headerData.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" or EC use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            }\n\n            if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            }\n\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    configValidateResponseType(responseType: string): boolean {\n        if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n            return true;\n        }\n\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\n            return true;\n        }\n\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + responseType);\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validateIdTokenAtHash(accessToken: any, atHash: any, isCodeFlow: boolean, idTokenAlg: string): boolean {\n        this.loggerService.logDebug('at_hash from the server:' + atHash);\n\n        // 'sha256' 'sha384' 'sha512'\n        let sha = 'sha256';\n        if (idTokenAlg.includes('384')) {\n            sha = 'sha384';\n        } else if (idTokenAlg.includes('512')) {\n            sha = 'sha512';\n        }\n\n        const testdata = this.generateAtHash('' + accessToken, sha);\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\n        if (testdata === (atHash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generateAtHash('' + decodeURIComponent(accessToken), sha);\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (atHash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generateAtHash(accessToken: any, sha: string): string {\n        const hash = KJUR.crypto.Util.hashString(accessToken, sha);\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n\n    generateCodeVerifier(codeChallenge: any): string {\n        const hash = KJUR.crypto.Util.hashString(codeChallenge, 'sha256');\n        const testdata = hextob64u(hash);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { AuthorizationResult } from './authorization-result';\nimport { AuthorizedState } from './authorized-state';\n\n@Injectable()\nexport class AuthStateService {\n    // event which contains the state\n    private authorizedInternal$ = new BehaviorSubject<boolean>(false);\n    private authState = AuthorizedState.Unknown;\n\n    get authorized$() {\n        return this.authorizedInternal$.asObservable();\n    }\n\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private publicEventsService: PublicEventsService,\n        private configurationProvider: ConfigurationProvider,\n        private tokenValidationService: TokenValidationService\n    ) {}\n\n    setAuthorizedAndFireEvent(): void {\n        // set the correct values in storage\n        this.authState = AuthorizedState.Authorized;\n        this.persistAuthStateInStorage(this.authState);\n        this.authorizedInternal$.next(true);\n    }\n\n    setUnauthorizedAndFireEvent(): void {\n        // set the correct values in storage\n        this.authState = AuthorizedState.Unauthorized;\n        this.storagePersistanceService.resetAuthStateInStorage();\n        this.authorizedInternal$.next(false);\n    }\n\n    initStateFromStorage(): void {\n        const currentAuthorizedState = this.getCurrentlyPersistedAuthState();\n        if (currentAuthorizedState === AuthorizedState.Authorized) {\n            this.authState = AuthorizedState.Authorized;\n        } else {\n            this.authState = AuthorizedState.Unknown;\n        }\n    }\n\n    updateAndPublishAuthState(authorizationResult: AuthorizationResult) {\n        this.publicEventsService.fireEvent<AuthorizationResult>(EventTypes.NewAuthorizationResult, authorizationResult);\n    }\n\n    setAuthorizationData(accessToken: any, idToken: any) {\n        this.loggerService.logDebug(accessToken);\n        this.loggerService.logDebug(idToken);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n\n        this.storagePersistanceService.accessToken = accessToken;\n        this.storagePersistanceService.idToken = idToken;\n\n        this.setAuthorizedAndFireEvent();\n    }\n\n    getAccessToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getAccessToken();\n        return decodeURIComponent(token);\n    }\n\n    getIdToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getIdToken();\n        return decodeURIComponent(token);\n    }\n\n    getRefreshToken(): string {\n        if (!(this.authState === AuthorizedState.Authorized)) {\n            return '';\n        }\n\n        const token = this.storagePersistanceService.getRefreshToken();\n        return decodeURIComponent(token);\n    }\n\n    areAuthStorageTokensValid() {\n        const currentAuthState = this.getCurrentlyPersistedAuthState();\n\n        if (currentAuthState !== AuthorizedState.Authorized) {\n            return false;\n        }\n\n        this.loggerService.logDebug(`authorizedState in storage is ${currentAuthState}`);\n\n        if (this.hasIdTokenExpired()) {\n            this.loggerService.logDebug('persisted id_token is expired');\n            return false;\n        }\n\n        if (this.hasAccessTokenExpiredIfExpiryExists()) {\n            this.loggerService.logDebug('persisted access_token is expired');\n            return false;\n        }\n\n        this.loggerService.logDebug('persisted id_token and access token are valid');\n        return true;\n    }\n\n    setAuthResultInStorage(authResult: any) {\n        this.storagePersistanceService.authResult = authResult;\n    }\n\n    hasIdTokenExpired() {\n        const tokenToCheck = this.storagePersistanceService.idToken;\n        const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(\n            tokenToCheck,\n            this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds\n        );\n\n        if (idTokenExpired) {\n            this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\n        }\n\n        return idTokenExpired;\n    }\n\n    hasAccessTokenExpiredIfExpiryExists() {\n        const accessTokenExpiresIn = this.storagePersistanceService.accessTokenExpiresIn;\n        const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\n            accessTokenExpiresIn,\n            this.configurationProvider.openIDConfiguration.renewTimeBeforeTokenExpiresInSeconds\n        );\n\n        const hasExpired = !accessTokenHasNotExpired;\n\n        if (hasExpired) {\n            this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\n        }\n\n        return hasExpired;\n    }\n\n    private getCurrentlyPersistedAuthState() {\n        return this.storagePersistanceService.authorizedState;\n    }\n\n    private persistAuthStateInStorage(authState: AuthorizedState) {\n        this.storagePersistanceService.authorizedState = authState;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { map, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { OpenIdConfiguration } from './openid-configuration';\n\n@Injectable()\nexport class OidcConfigService {\n    private WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\n    constructor(\n        private readonly loggerService: LoggerService,\n        private readonly http: DataService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly publicEventsService: PublicEventsService\n    ) {}\n\n    withConfig(passedConfig: OpenIdConfiguration) {\n        if (!passedConfig.stsServer) {\n            this.loggerService.logError('please provide at least an stsServer');\n            return;\n        }\n\n        if (!passedConfig.authWellknownEndpoint) {\n            passedConfig.authWellknownEndpoint = passedConfig.stsServer;\n        }\n\n        const loadConfig$ = this.getWellKnownDocument(passedConfig.authWellknownEndpoint).pipe(\n            map((wellKnownEndpoints) => {\n                return {\n                    issuer: wellKnownEndpoints.issuer,\n                    jwksUri: wellKnownEndpoints.jwks_uri,\n                    authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n                    tokenEndpoint: wellKnownEndpoints.token_endpoint,\n                    userinfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n                    endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n                    checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n                    revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n                    introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n                };\n            }),\n            tap((mappedWellKnownEndpoints) => this.configurationProvider.setConfig(passedConfig, mappedWellKnownEndpoints)),\n            tap((mappedWellKnownEndpoints) =>\n                this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, { passedConfig, mappedWellKnownEndpoints })\n            )\n        );\n\n        return loadConfig$.toPromise();\n    }\n\n    private getWellKnownDocument(wellKnownEndpoint: string) {\n        let url = wellKnownEndpoint;\n\n        if (!wellKnownEndpoint.includes(this.WELL_KNOWN_SUFFIX)) {\n            url = `${wellKnownEndpoint}${this.WELL_KNOWN_SUFFIX}`;\n        }\n\n        return this.http.get<any>(url);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class RandomService {\n    constructor(private loggerService: LoggerService) {}\n\n    createRandom(requiredLength: number): string {\n        if (requiredLength <= 0) {\n            return '';\n        }\n\n        if (requiredLength > 0 && requiredLength < 7) {\n            this.loggerService.logWarning(`RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n            requiredLength = 10;\n        }\n\n        const length = requiredLength - 6;\n        const arr = new Uint8Array((length || length) / 2);\n        this.getCrypto().getRandomValues(arr);\n        return Array.from(arr, this.toHex).join('') + this.randomString(7);\n    }\n\n    private toHex(dec) {\n        return ('0' + dec.toString(16)).substr(-2);\n    }\n\n    private randomString(length) {\n        let result = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        const values = new Uint32Array(length);\n        this.getCrypto().getRandomValues(values);\n        for (let i = 0; i < length; i++) {\n            result += characters[values[i] % characters.length];\n        }\n\n        return result;\n    }\n    private getCrypto() {\n        // support for IE,  (window.crypto || window.msCrypto)\n        return window.crypto || (window as any).msCrypto;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RandomService } from './random/random.service';\n\n@Injectable()\nexport class FlowsDataService {\n    constructor(private storagePersistanceService: StoragePersistanceService, private readonly randomService: RandomService) {}\n\n    createNonce(): string {\n        const nonce = this.randomService.createRandom(40);\n        this.setNonce(nonce);\n        return nonce;\n    }\n\n    setNonce(nonce: string) {\n        this.storagePersistanceService.authNonce = nonce;\n    }\n\n    getAuthStateControl(): any {\n        return this.storagePersistanceService.authStateControl;\n    }\n    setAuthStateControl(authStateControl: string) {\n        this.storagePersistanceService.authStateControl = authStateControl;\n    }\n\n    getExistingOrCreateAuthStateControl(): any {\n        let state = this.storagePersistanceService.authStateControl;\n        if (!state) {\n            state = this.randomService.createRandom(40);\n            this.storagePersistanceService.authStateControl = state;\n        }\n        return state;\n    }\n\n    setSessionState(sessionState: any) {\n        this.storagePersistanceService.sessionState = sessionState;\n    }\n\n    resetStorageFlowData() {\n        this.storagePersistanceService.resetStorageFlowData();\n    }\n\n    getCodeVerifier() {\n        return this.storagePersistanceService.codeVerifier;\n    }\n\n    createCodeVerifier() {\n        const codeVerifier = this.randomService.createRandom(67);\n        this.storagePersistanceService.codeVerifier = codeVerifier;\n        return codeVerifier;\n    }\n\n    isSilentRenewRunning() {\n        return this.storagePersistanceService.silentRenewRunning === 'running';\n    }\n\n    setSilentRenewRunning() {\n        this.storagePersistanceService.silentRenewRunning = 'running';\n    }\n    resetSilentRenewRunning() {\n        this.storagePersistanceService.silentRenewRunning = '';\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class UserService {\n    private userDataInternal$ = new BehaviorSubject<any>(null);\n\n    get userData$() {\n        return this.userDataInternal$.asObservable();\n    }\n\n    constructor(\n        private oidcDataService: DataService,\n        private storagePersistanceService: StoragePersistanceService,\n        private eventService: PublicEventsService,\n        private loggerService: LoggerService,\n        private tokenHelperService: TokenHelperService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly flowHelper: FlowHelper\n    ) {}\n\n    // TODO CHECK PARAMETERS\n    //  validationResult.idToken can be the complete valudationResult\n    getAndPersistUserDataInStore(isRenewProcess = false, idToken?: any, decodedIdToken?: any): Observable<any> {\n        idToken = idToken || this.storagePersistanceService.idToken;\n        decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false);\n\n        const existingUserDataFromStorage = this.getUserDataFromStore();\n        const haveUserData = !!existingUserDataFromStorage;\n        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n        if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n            this.loggerService.logDebug('authorizedCallback id_token flow');\n            this.loggerService.logDebug(this.storagePersistanceService.accessToken);\n\n            this.setUserDataToStore(decodedIdToken);\n            return of(decodedIdToken);\n        }\n\n        if ((!haveUserData && isRenewProcess) || !isRenewProcess) {\n            return this.getUserDataOidcFlowAndSave(decodedIdToken.sub).pipe(\n                switchMap((userData) => {\n                    this.loggerService.logDebug('Received user data', userData);\n                    if (!!userData) {\n                        this.loggerService.logDebug(this.storagePersistanceService.accessToken);\n                        return of(userData);\n                    } else {\n                        return throwError('no user data, request failed');\n                    }\n                })\n            );\n        }\n\n        return of(existingUserDataFromStorage);\n    }\n\n    getUserDataFromStore(): any {\n        return this.storagePersistanceService.userData || null;\n    }\n\n    publishUserdataIfExists() {\n        const userdata = this.getUserDataFromStore();\n        if (userdata) {\n            this.userDataInternal$.next(userdata);\n            this.eventService.fireEvent(EventTypes.UserDataChanged, userdata);\n        }\n    }\n\n    setUserDataToStore(value: any): void {\n        this.storagePersistanceService.userData = value;\n        this.userDataInternal$.next(value);\n        this.eventService.fireEvent(EventTypes.UserDataChanged, value);\n    }\n\n    resetUserDataInStore(): void {\n        this.storagePersistanceService.userData = null;\n        this.eventService.fireEvent(EventTypes.UserDataChanged, null);\n        this.userDataInternal$.next(null);\n    }\n\n    private getUserDataOidcFlowAndSave(idTokenSub: any): Observable<any> {\n        return this.getIdentityUserData().pipe(\n            map((data: any) => {\n                if (this.validateUserdataSubIdToken(idTokenSub, data?.sub)) {\n                    this.setUserDataToStore(data);\n                    return data;\n                } else {\n                    // something went wrong, userdata sub does not match that from id_token\n                    this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                    this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                    this.resetUserDataInStore();\n                    return null;\n                }\n            })\n        );\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.storagePersistanceService.getAccessToken();\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n\n            return throwError('authWellKnownEndpoints is undefined');\n        }\n\n        const canGetUserData = this.configurationProvider?.wellKnownEndpoints?.userinfoEndpoint;\n\n        if (!canGetUserData) {\n            this.loggerService.logError(\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n            );\n            return throwError('authWellKnownEndpoints.userinfo_endpoint is undefined');\n        }\n\n        return this.oidcDataService.get(this.configurationProvider.wellKnownEndpoints.userinfoEndpoint, token);\n    }\n\n    private validateUserdataSubIdToken(idTokenSub: any, userdataSub: any): boolean {\n        if (!idTokenSub) {\n            return false;\n        }\n\n        if (!userdataSub) {\n            return false;\n        }\n\n        if ((idTokenSub as string) !== (userdataSub as string)) {\n            this.loggerService.logDebug('validateUserdataSubIdToken failed', idTokenSub, userdataSub);\n            return false;\n        }\n\n        return true;\n    }\n}\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport function _window(): any {\r\n    return window;\r\n}\r\n\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { oneLineTrim } from 'common-tags';\r\nimport { ConfigurationProvider } from '../../config/config.provider';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\r\nimport { WINDOW } from '../window/window.reference';\r\nimport { UriEncoder } from './uri-encoder';\r\n\r\n@Injectable()\r\nexport class UrlService {\r\n    private CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\r\n\r\n    constructor(\r\n        private readonly configurationProvider: ConfigurationProvider,\r\n        private readonly loggerService: LoggerService,\r\n        private readonly flowsDataService: FlowsDataService,\r\n        private readonly flowHelper: FlowHelper,\r\n        private tokenValidationService: TokenValidationService,\r\n        @Inject(WINDOW) private window: any\r\n    ) {}\r\n\r\n    getUrlParameter(urlToCheck: any, name: any): string {\r\n        if (!urlToCheck) {\r\n            return '';\r\n        }\r\n\r\n        if (!name) {\r\n            return '';\r\n        }\r\n\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        const results = regex.exec(urlToCheck);\r\n        return results === null ? '' : decodeURIComponent(results[1]);\r\n    }\r\n\r\n    isCallbackFromSts() {\r\n        const anyParameterIsGiven = this.CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(this.window.location.toString(), x));\r\n        return anyParameterIsGiven;\r\n    }\r\n\r\n    getRefreshSessionSilentRenewUrl(): string {\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            return this.createUrlCodeFlowWithSilentRenew();\r\n        }\r\n\r\n        return this.createUrlImplicitFlowWithSilentRenew() || '';\r\n    }\r\n\r\n    getAuthorizeUrl(customParams?: { [key: string]: string | number | boolean }): string {\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            return this.createUrlCodeFlowAuthorize(customParams);\r\n        }\r\n\r\n        return this.createUrlImplicitFlowAuthorize(customParams) || '';\r\n    }\r\n\r\n    createEndSessionUrl(idTokenHint: string) {\r\n        const endSessionEndpoint = this.configurationProvider.wellKnownEndpoints?.endSessionEndpoint;\r\n\r\n        if (!endSessionEndpoint) {\r\n            return null;\r\n        }\r\n\r\n        const urlParts = endSessionEndpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', idTokenHint);\r\n\r\n        const postLogoutRedirectUri = this.getPostLogoutRedirectUrl();\r\n\r\n        if (postLogoutRedirectUri) {\r\n            params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\r\n        }\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    createRevocationEndpointBodyAccessToken(token: any) {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return `client_id=${clientId}&token=${token}&token_type_hint=access_token`;\r\n    }\r\n\r\n    createRevocationEndpointBodyRefreshToken(token: any) {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return `client_id=${clientId}&token=${token}&token_type_hint=refresh_token`;\r\n    }\r\n\r\n    getRevocationEndpointUrl() {\r\n        const endSessionEndpoint = this.configurationProvider.wellKnownEndpoints?.revocationEndpoint;\r\n\r\n        if (!endSessionEndpoint) {\r\n            return null;\r\n        }\r\n\r\n        const urlParts = endSessionEndpoint.split('?');\r\n\r\n        const revocationEndpointUrl = urlParts[0];\r\n        return revocationEndpointUrl;\r\n    }\r\n\r\n    createBodyForCodeFlowCodeRequest(code: string): string {\r\n        const codeVerifier = this.flowsDataService.getCodeVerifier();\r\n        if (!codeVerifier) {\r\n            this.loggerService.logError(`CodeVerifier is not set `, codeVerifier);\r\n            return null;\r\n        }\r\n\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        const dataForBody = oneLineTrim`grant_type=authorization_code\r\n            &client_id=${clientId}\r\n            &code_verifier=${codeVerifier}\r\n            &code=${code}`;\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (this.flowsDataService.isSilentRenewRunning() && silentRenewUrl) {\r\n            return oneLineTrim`${dataForBody}&redirect_uri=${silentRenewUrl}`;\r\n        }\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        return oneLineTrim`${dataForBody}&redirect_uri=${redirectUrl}`;\r\n    }\r\n\r\n    createBodyForCodeFlowRefreshTokensRequest(refreshtoken: string): string {\r\n        const clientId = this.getClientId();\r\n\r\n        if (!clientId) {\r\n            return null;\r\n        }\r\n\r\n        return oneLineTrim`grant_type=refresh_token\r\n          &client_id=${clientId}\r\n          &refresh_token=${refreshtoken}`;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        codeChallenge: string,\r\n        redirectUrl: string,\r\n        nonce: string,\r\n        state: string,\r\n        prompt?: string,\r\n        customRequestParams?: { [key: string]: string | number | boolean }\r\n    ): string {\r\n        const authorizationEndpoint = this.configurationProvider?.wellKnownEndpoints?.authorizationEndpoint;\r\n\r\n        if (!authorizationEndpoint) {\r\n            this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\r\n            return null;\r\n        }\r\n\r\n        const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.openIDConfiguration;\r\n\r\n        if (!clientId) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\r\n            return null;\r\n        }\r\n\r\n        if (!responseType) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add responseType because it was: `, responseType);\r\n            return null;\r\n        }\r\n\r\n        if (!scope) {\r\n            this.loggerService.logError(`createAuthorizeUrl could not add scope because it was: `, scope);\r\n            return null;\r\n        }\r\n\r\n        const urlParts = authorizationEndpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n\r\n        params = params.set('client_id', clientId);\r\n        params = params.append('redirect_uri', redirectUrl);\r\n        params = params.append('response_type', responseType);\r\n        params = params.append('scope', scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            params = params.append('code_challenge', codeChallenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (hdParam) {\r\n            params = params.append('hd', hdParam);\r\n        }\r\n\r\n        if (customParams || customRequestParams) {\r\n            const customParamsToAdd = { ...(customParams || {}), ...(customRequestParams || {}) };\r\n\r\n            for (const [key, value] of Object.entries(customParamsToAdd)) {\r\n                params = params.append(key, value.toString());\r\n            }\r\n        }\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createUrlImplicitFlowWithSilentRenew(): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (!silentRenewUrl) {\r\n            return null;\r\n        }\r\n\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ', state);\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, 'none');\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlCodeFlowWithSilentRenew(): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + state);\r\n\r\n        // code_challenge with \"S256\"\r\n        const codeVerifier = this.flowsDataService.createCodeVerifier();\r\n        const codeChallenge = this.tokenValidationService.generateCodeVerifier(codeVerifier);\r\n\r\n        const silentRenewUrl = this.getSilentRenewUrl();\r\n\r\n        if (!silentRenewUrl) {\r\n            return null;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, 'none');\r\n        }\r\n\r\n        this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlImplicitFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n        this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl('', redirectUrl, nonce, state, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private createUrlCodeFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\r\n        const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\r\n        const nonce = this.flowsDataService.createNonce();\r\n        this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\r\n\r\n        const redirectUrl = this.getRedirectUrl();\r\n\r\n        if (!redirectUrl) {\r\n            return null;\r\n        }\r\n\r\n        // code_challenge with \"S256\"\r\n        const codeVerifier = this.flowsDataService.createCodeVerifier();\r\n        const codeChallenge = this.tokenValidationService.generateCodeVerifier(codeVerifier);\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n        return null;\r\n    }\r\n\r\n    private getRedirectUrl() {\r\n        const redirectUrl = this.configurationProvider.openIDConfiguration?.redirectUrl;\r\n\r\n        if (!redirectUrl) {\r\n            this.loggerService.logError(`could not get redirectUrl, was: `, redirectUrl);\r\n            return null;\r\n        }\r\n\r\n        return redirectUrl;\r\n    }\r\n\r\n    private getSilentRenewUrl() {\r\n        const silentRenewUrl = this.configurationProvider.openIDConfiguration?.silentRenewUrl;\r\n\r\n        if (!silentRenewUrl) {\r\n            this.loggerService.logError(`could not get silentRenewUrl, was: `, silentRenewUrl);\r\n            return null;\r\n        }\r\n\r\n        return silentRenewUrl;\r\n    }\r\n\r\n    private getPostLogoutRedirectUrl() {\r\n        const postLogoutRedirectUri = this.configurationProvider.openIDConfiguration?.postLogoutRedirectUri;\r\n        if (!postLogoutRedirectUri) {\r\n            this.loggerService.logError(`could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\r\n            return null;\r\n        }\r\n\r\n        return postLogoutRedirectUri;\r\n    }\r\n\r\n    private getClientId() {\r\n        const clientId = this.configurationProvider.openIDConfiguration?.clientId;\r\n        if (!clientId) {\r\n            this.loggerService.logError(`could not get clientId, was: `, clientId);\r\n            return null;\r\n        }\r\n\r\n        return clientId;\r\n    }\r\n}\r\n","export enum ValidationResult {\n    NotSet = 'NotSet',\n    StatesDoNotMatch = 'StatesDoNotMatch',\n    SignatureFailed = 'SignatureFailed',\n    IncorrectNonce = 'IncorrectNonce',\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\n    MaxOffsetExpired = 'MaxOffsetExpired',\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n    IncorrectAud = 'IncorrectAud',\n    IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\n    IncorrectAzp = 'IncorrectAzp',\n    TokenExpired = 'TokenExpired',\n    IncorrectAtHash = 'IncorrectAtHash',\n    Ok = 'Ok',\n    LoginRequired = 'LoginRequired',\n    SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n    constructor(\n        public accessToken = '',\n        public idToken = '',\n        public authResponseIsValid = false,\n        public decodedIdToken: any = {},\n        public state: ValidationResult = ValidationResult.NotSet\n    ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\nimport { StateValidationResult } from './state-validation-result';\nimport { TokenValidationService } from './token-validation.service';\nimport { ValidationResult } from './validation-result';\n\n@Injectable()\nexport class StateValidationService {\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private tokenValidationService: TokenValidationService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly flowHelper: FlowHelper\n    ) {}\n\n    getValidatedStateResult(callbackContext: CallbackContext): StateValidationResult {\n        if (callbackContext?.authResult.error) {\n            return new StateValidationResult('', '', false, {});\n        }\n\n        return this.validateState(callbackContext);\n    }\n\n    private isIdTokenAfterRefreshTokenRequestValid(callbackContext: CallbackContext, newIdToken: any): boolean {\n        if (!this.configurationProvider.openIDConfiguration.useRefreshToken) {\n            return true;\n        }\n\n        if (!callbackContext.existingIdToken) {\n            return true;\n        }\n        const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false);\n\n        // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n        // except that it might not contain an id_token.\n\n        // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n\n        // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.iss !== newIdToken.iss) {\n            this.loggerService.logDebug(`iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n            return false;\n        }\n        // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n        //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n        // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n        if (decodedIdToken.azp !== newIdToken.azp) {\n            this.loggerService.logDebug(`azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n            return false;\n        }\n        // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.sub !== newIdToken.sub) {\n            this.loggerService.logDebug(`sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n            return false;\n        }\n\n        // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n        if (decodedIdToken.aud !== newIdToken.aud) {\n            this.loggerService.logDebug(`aud do not match: ${decodedIdToken.aud} ${newIdToken.aud}`);\n            return false;\n        }\n\n        if (this.configurationProvider.openIDConfiguration.disableRefreshIdTokenAuthTimeValidation) {\n            return true;\n        }\n\n        // its iat Claim MUST represent the time that the new ID Token is issued,\n        // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n        // - not the time that the new ID token is issued,\n        if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n            this.loggerService.logDebug(`auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    validateState(callbackContext): StateValidationResult {\n        const toReturn = new StateValidationResult();\n        if (\n            !this.tokenValidationService.validateStateFromHashCallback(\n                callbackContext.authResult.state,\n                this.storagePersistanceService.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            toReturn.state = ValidationResult.StatesDoNotMatch;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n        if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n            toReturn.accessToken = callbackContext.authResult.access_token;\n        }\n\n        if (callbackContext.authResult.id_token) {\n            toReturn.idToken = callbackContext.authResult.id_token;\n\n            toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false);\n\n            if (!this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys)) {\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n                toReturn.state = ValidationResult.SignatureFailed;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenNonce(\n                    toReturn.decodedIdToken,\n                    this.storagePersistanceService.authNonce,\n                    this.configurationProvider.openIDConfiguration.ignoreNonceAfterRefresh\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\n                toReturn.state = ValidationResult.IncorrectNonce;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken)) {\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenIatMaxOffset(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.maxIdTokenIatOffsetAllowedInSeconds,\n                    this.configurationProvider.openIDConfiguration.disableIatOffsetValidation\n                )\n            ) {\n                this.loggerService.logWarning(\n                    'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n                );\n                toReturn.state = ValidationResult.MaxOffsetExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                if (this.configurationProvider.openIDConfiguration.issValidationOff) {\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n                } else if (\n                    !this.configurationProvider.openIDConfiguration.issValidationOff &&\n                    !this.tokenValidationService.validateIdTokenIss(\n                        toReturn.decodedIdToken,\n                        this.configurationProvider.wellKnownEndpoints.issuer\n                    )\n                ) {\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n                    this.handleUnsuccessfulValidation();\n                    return toReturn;\n                }\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenAud(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.clientId\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\n                toReturn.state = ValidationResult.IncorrectAud;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback missing azp');\n                toReturn.state = ValidationResult.IncorrectAzp;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.tokenValidationService.validateIdTokenAzpValid(\n                    toReturn.decodedIdToken,\n                    this.configurationProvider.openIDConfiguration.clientId\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect azp');\n                toReturn.state = ValidationResult.IncorrectAzp;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback pre, post id_token claims do not match in refresh');\n                toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken)) {\n                this.loggerService.logWarning('authorizedCallback id token expired');\n                toReturn.state = ValidationResult.TokenExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\n        }\n\n        // flow id_token\n        if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation();\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false);\n\n        // The at_hash is optional for the code flow\n        if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\n            this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n        } else if (\n            !this.tokenValidationService.validateIdTokenAtHash(\n                toReturn.accessToken,\n                toReturn.decodedIdToken.at_hash,\n                isCurrentFlowCodeFlow,\n                idTokenHeader.alg // 'RSA256'\n            ) ||\n            !toReturn.accessToken\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        toReturn.state = ValidationResult.Ok;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.storagePersistanceService.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.autoCleanStateAfterAuthentication) {\n            this.storagePersistanceService.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    }\n\n    private handleUnsuccessfulValidation() {\n        this.storagePersistanceService.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.autoCleanStateAfterAuthentication) {\n            this.storagePersistanceService.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { JwtKeys } from '../validation/jwtkeys';\r\n\r\n@Injectable()\r\nexport class SigninKeyDataService {\r\n    constructor(\r\n        private configurationProvider: ConfigurationProvider,\r\n        private loggerService: LoggerService,\r\n        private dataService: DataService\r\n    ) {}\r\n\r\n    getSigningKeys() {\r\n        if (!this.configurationProvider.wellKnownEndpoints?.jwksUri) {\r\n            const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${this.configurationProvider.wellKnownEndpoints?.jwksUri}'`;\r\n            this.loggerService.logWarning(error);\r\n            return throwError(error);\r\n        }\r\n\r\n        this.loggerService.logDebug('Getting signinkeys from ', this.configurationProvider.wellKnownEndpoints.jwksUri);\r\n\r\n        return this.dataService\r\n            .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwksUri)\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.logError(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { UserService } from '../userData/user-service';\nimport { UrlService } from '../utils/url/url.service';\nimport { StateValidationResult } from '../validation/state-validation-result';\nimport { StateValidationService } from '../validation/state-validation.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { ValidationResult } from '../validation/validation-result';\nimport { CallbackContext } from './callback-context';\nimport { FlowsDataService } from './flows-data.service';\nimport { SigninKeyDataService } from './signin-key-data.service';\n\n@Injectable()\nexport class FlowsService {\n    constructor(\n        private readonly urlService: UrlService,\n        private readonly loggerService: LoggerService,\n        private readonly tokenValidationService: TokenValidationService,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly authStateService: AuthStateService,\n        private readonly flowsDataService: FlowsDataService,\n        private readonly signinKeyDataService: SigninKeyDataService,\n        private readonly dataService: DataService,\n        private readonly userService: UserService,\n        private readonly stateValidationService: StateValidationService\n    ) {}\n\n    resetAuthorizationData(): void {\n        if (this.configurationProvider.openIDConfiguration.autoUserinfo) {\n            // Clear user data. Fixes #97.\n            this.userService.resetUserDataInStore();\n        }\n\n        this.flowsDataService.resetStorageFlowData();\n        this.authStateService.setUnauthorizedAndFireEvent();\n    }\n\n    processCodeFlowCallback(urlToCheck: string) {\n        return this.codeFlowCallback(urlToCheck).pipe(\n            switchMap((callbackContext) => this.codeFlowCodeRequest(callbackContext)),\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processSilentRenewCodeFlowCallback(firstContext: CallbackContext) {\n        return this.codeFlowCodeRequest(firstContext).pipe(\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processImplicitFlowCallback(hash?: string) {\n        return this.implicitFlowCallback(hash).pipe(\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    processRefreshToken() {\n        return this.refreshSessionWithRefreshTokens().pipe(\n            switchMap((callbackContext) => this.refreshTokensRequestTokens(callbackContext)),\n            switchMap((callbackContext) => this.codeFlowSilentRenewCheck(callbackContext)),\n            switchMap((callbackContext) => this.callbackHistoryAndResetJwtKeys(callbackContext)),\n            switchMap((callbackContext) => this.callbackStateValidation(callbackContext)),\n            switchMap((callbackContext) => this.callbackUser(callbackContext))\n        );\n    }\n\n    // STEP 1 Code Flow\n    private codeFlowCallback(urlToCheck: string): Observable<CallbackContext> {\n        const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n        const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n        const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state') || null;\n\n        if (!state) {\n            this.loggerService.logDebug('no state in url');\n            return throwError('no state in url');\n        }\n        if (!code) {\n            this.loggerService.logDebug('no code in url');\n            return throwError('no code in url');\n        }\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\n\n        const initialCallbackContext = {\n            code,\n            refreshToken: null,\n            state,\n            sessionState,\n            authResult: null,\n            isRenewProcess: false,\n            jwtKeys: null,\n            validationResult: null,\n            existingIdToken: null,\n        };\n        return of(initialCallbackContext);\n    }\n\n    // STEP 1 Implicit Flow\n    private implicitFlowCallback(hash?: string): Observable<CallbackContext> {\n        const isRenewProcessData = this.flowsDataService.isSilentRenewRunning();\n\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        if (!isRenewProcessData) {\n            this.resetAuthorizationData();\n        }\n\n        hash = hash || window.location.hash.substr(1);\n\n        const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\n            const parts = item.split('=');\n            resultData[parts.shift() as string] = parts.join('=');\n            return resultData;\n        }, {});\n\n        const callbackContext = {\n            code: null,\n            refreshToken: null,\n            state: null,\n            sessionState: null,\n            authResult,\n            isRenewProcess: isRenewProcessData,\n            jwtKeys: null,\n            validationResult: null,\n            existingIdToken: null,\n        };\n\n        return of(callbackContext);\n    }\n\n    // STEP 1 Refresh session\n    private refreshSessionWithRefreshTokens(): Observable<CallbackContext> {\n        const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl();\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + stateData);\n        const refreshToken = this.authStateService.getRefreshToken();\n        const idToken = this.authStateService.getIdToken();\n        // TODO add id_token data\n\n        if (refreshToken) {\n            const callbackContext = {\n                code: null,\n                refreshToken,\n                state: stateData,\n                sessionState: null,\n                authResult: null,\n                isRenewProcess: false,\n                jwtKeys: null,\n                validationResult: null,\n                existingIdToken: idToken,\n            };\n\n            this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\n            // Nonce is not used with refresh tokens; but Keycloak may send it anyway\n            this.flowsDataService.setNonce(TokenValidationService.RefreshTokenNoncePlaceholder);\n\n            return of(callbackContext);\n        } else {\n            const errorMessage = 'no refresh token found, please login';\n            this.loggerService.logError(errorMessage);\n            return throwError(errorMessage);\n        }\n    }\n\n    // STEP 2 Refresh Token\n    private refreshTokensRequestTokens(callbackContext: CallbackContext): Observable<CallbackContext> {\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const tokenRequestUrl = this.getTokenEndpoint();\n        if (!tokenRequestUrl) {\n            return throwError('Token Endpoint not defined');\n        }\n\n        const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken);\n\n        return this.dataService.post(tokenRequestUrl, data, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('token refresh response: ', response);\n                let authResult: any = new Object();\n                authResult = response;\n                authResult.state = callbackContext.state;\n\n                callbackContext.authResult = authResult;\n                return of(callbackContext);\n            }),\n            catchError((error) => {\n                const errorMessage = `OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}: ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n    private codeFlowCodeRequest(callbackContext: CallbackContext): Observable<CallbackContext> {\n        const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(\n            callbackContext.state,\n            this.flowsDataService.getAuthStateControl()\n        );\n\n        if (!isStateCorrect) {\n            this.loggerService.logWarning('codeFlowCodeRequest incorrect state');\n            return throwError('codeFlowCodeRequest incorrect state');\n        }\n\n        const tokenRequestUrl = this.getTokenEndpoint();\n        if (!tokenRequestUrl) {\n            return throwError('Token Endpoint not defined');\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code);\n\n        return this.dataService.post(tokenRequestUrl, bodyForCodeFlow, headers).pipe(\n            switchMap((response) => {\n                let authResult: any = new Object();\n                authResult = response;\n                authResult.state = callbackContext.state;\n                authResult.session_state = callbackContext.sessionState;\n\n                callbackContext.authResult = authResult;\n                return of(callbackContext);\n            }),\n            catchError((error) => {\n                const errorMessage = `OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer} with error ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 3 Code Flow, STEP 3 Refresh Token\n    private codeFlowSilentRenewCheck(callbackContext: CallbackContext): Observable<CallbackContext> {\n        callbackContext.isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\n        if (!callbackContext.isRenewProcess) {\n            this.resetAuthorizationData();\n        }\n\n        return of(callbackContext);\n    }\n\n    // STEP 4 Code Flow, STEP 2 Implicit Flow, STEP 4 Refresh Token\n    private callbackHistoryAndResetJwtKeys(callbackContext: CallbackContext): Observable<CallbackContext> {\n        this.authStateService.setAuthResultInStorage(callbackContext.authResult);\n\n        if (this.historyCleanUpTurnedOn() && !callbackContext.isRenewProcess) {\n            this.resetBrowserHistory();\n        } else {\n            this.loggerService.logDebug('history clean up inactive');\n        }\n\n        if (callbackContext.authResult.error) {\n            const errorMessage = `authorizedCallbackProcedure came with error: ${callbackContext.authResult.error}`;\n            this.loggerService.logDebug(errorMessage);\n            this.resetAuthorizationData();\n            this.flowsDataService.setNonce('');\n            this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n            return throwError(errorMessage);\n        }\n\n        this.loggerService.logDebug(callbackContext.authResult);\n        this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n        return this.signinKeyDataService.getSigningKeys().pipe(\n            switchMap((jwtKeys) => {\n                if (jwtKeys) {\n                    callbackContext.jwtKeys = jwtKeys;\n\n                    return of(callbackContext);\n                }\n\n                const errorMessage = `Failed to retrieve signing key`;\n                this.loggerService.logWarning(errorMessage);\n                return throwError(errorMessage);\n            }),\n            catchError((err) => {\n                const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n                this.loggerService.logWarning(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // STEP 5 All flows\n    private callbackStateValidation(callbackContext: CallbackContext): Observable<CallbackContext> {\n        const validationResult = this.stateValidationService.getValidatedStateResult(callbackContext);\n        callbackContext.validationResult = validationResult;\n\n        if (validationResult.authResponseIsValid) {\n            this.authStateService.setAuthorizationData(validationResult.accessToken, validationResult.idToken);\n\n            return of(callbackContext);\n        } else {\n            const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${window.location.hash}`;\n            this.loggerService.logWarning(errorMessage);\n            this.resetAuthorizationData();\n            this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n            return throwError(errorMessage);\n        }\n    }\n\n    // STEP 6 userData\n    private callbackUser(callbackContext: CallbackContext): Observable<CallbackContext> {\n        if (!this.configurationProvider.openIDConfiguration.autoUserinfo) {\n            if (!callbackContext.isRenewProcess) {\n                // userData is set to the id_token decoded, auto get user data set to false\n                this.userService.setUserDataToStore(callbackContext.validationResult.decodedIdToken);\n            }\n\n            this.publishAuthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n            return of(callbackContext);\n        }\n\n        return this.userService\n            .getAndPersistUserDataInStore(\n                callbackContext.isRenewProcess,\n                callbackContext.validationResult.idToken,\n                callbackContext.validationResult.decodedIdToken\n            )\n            .pipe(\n                switchMap((userData) => {\n                    if (!!userData) {\n                        this.flowsDataService.setSessionState(callbackContext.authResult.session_state);\n                        this.publishAuthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n                        return of(callbackContext);\n                    } else {\n                        this.resetAuthorizationData();\n                        this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n                        const errorMessage = `Called for userData but they were ${userData}`;\n                        this.loggerService.logWarning(errorMessage);\n                        return throwError(errorMessage);\n                    }\n                }),\n                catchError((err) => {\n                    const errorMessage = `Failed to retreive user info with error:  ${err}`;\n                    this.loggerService.logWarning(errorMessage);\n                    return throwError(errorMessage);\n                })\n            );\n    }\n\n    private publishAuthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Authorized,\n            validationResult: stateValidationResult.state,\n            isRenewProcess,\n        });\n    }\n\n    private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Unauthorized,\n            validationResult: stateValidationResult.state,\n            isRenewProcess,\n        });\n    }\n\n    private handleResultErrorFromCallback(result: any, isRenewProcess: boolean) {\n        let validationResult = ValidationResult.SecureTokenServerError;\n\n        if ((result.error as string) === 'login_required') {\n            validationResult = ValidationResult.LoginRequired;\n        }\n\n        this.authStateService.updateAndPublishAuthState({\n            authorizationState: AuthorizedState.Unauthorized,\n            validationResult,\n            isRenewProcess,\n        });\n    }\n\n    private getTokenEndpoint(): string {\n        return this.configurationProvider.wellKnownEndpoints?.tokenEndpoint || null;\n    }\n\n    private historyCleanUpTurnedOn() {\n        return !this.configurationProvider.openIDConfiguration.historyCleanupOff;\n    }\n\n    private resetBrowserHistory() {\n        window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../logging/logger.service';\n\n@Injectable()\nexport class IFrameService {\n    constructor(private loggerService: LoggerService) {}\n\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n        if (this.isIFrameElement(iFrameOnParent)) {\n            return iFrameOnParent;\n        }\n\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n        if (this.isIFrameElement(iFrameOnSelf)) {\n            return iFrameOnSelf;\n        }\n        return null;\n    }\n\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\n        const sessionIframe = window.document.createElement('iframe');\n        sessionIframe.id = identifier;\n        this.loggerService.logDebug(sessionIframe);\n        sessionIframe.style.display = 'none';\n        window.document.body.appendChild(sessionIframe);\n        return sessionIframe;\n    }\n\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n        try {\n            const iFrameElement = window.parent.document.getElementById(identifier);\n            if (this.isIFrameElement(iFrameElement)) {\n                return iFrameElement;\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n        const iFrameElement = window.document.getElementById(identifier);\n        if (this.isIFrameElement(iFrameElement)) {\n            return iFrameElement;\n        }\n        return null;\n    }\n\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n        return !!element && element instanceof HTMLIFrameElement;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class CheckSessionService {\n    private checkSessionReceived = false;\n    private scheduledHeartBeatRunning: any;\n    private lastIFrameRefresh = 0;\n    private outstandingMessages = 0;\n    private heartBeatInterval = 3000;\n    private iframeRefreshInterval = 60000;\n\n    private checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\n\n    get checkSessionChanged$() {\n        return this.checkSessionChangedInternal$.asObservable();\n    }\n    constructor(\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private iFrameService: IFrameService,\n        private zone: NgZone,\n        private eventService: PublicEventsService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    isCheckSessionConfigured() {\n        return this.configurationProvider.openIDConfiguration.startCheckSession;\n    }\n\n    start(): void {\n        if (!!this.scheduledHeartBeatRunning) {\n            return;\n        }\n\n        this.init();\n\n        const clientId = this.configurationProvider.openIDConfiguration.clientId;\n        this.pollServerSession(clientId);\n    }\n\n    stop(): void {\n        if (!this.scheduledHeartBeatRunning) {\n            return;\n        }\n\n        this.clearScheduledHeartBeat();\n        this.checkSessionReceived = false;\n    }\n\n    serverStateChanged() {\n        return this.configurationProvider.openIDConfiguration.startCheckSession && this.checkSessionReceived;\n    }\n\n    private init() {\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n            return;\n        }\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n            return;\n        }\n\n        const existingIframe = this.getOrCreateIframe();\n\n        if (this.configurationProvider.wellKnownEndpoints.checkSessionIframe) {\n            existingIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.checkSessionIframe);\n        } else {\n            this.loggerService.logWarning('init check session: checkSessionIframe is not configured to run');\n        }\n\n        this.bindMessageEventToIframe();\n\n        existingIframe.onload = () => {\n            this.lastIFrameRefresh = Date.now();\n        };\n    }\n\n    private pollServerSession(clientId: string) {\n        this.outstandingMessages = 0;\n\n        const pollServerSessionRecur = () => {\n            const existingIframe = this.getExistingIframe();\n            if (existingIframe && clientId) {\n                this.loggerService.logDebug(existingIframe);\n                const sessionState = this.storagePersistanceService.sessionState;\n                if (sessionState) {\n                    this.outstandingMessages++;\n                    existingIframe.contentWindow.postMessage(\n                        clientId + ' ' + sessionState,\n                        this.configurationProvider.openIDConfiguration.stsServer\n                    );\n                } else {\n                    this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\n                }\n            } else {\n                this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist');\n                this.loggerService.logDebug(clientId);\n                this.loggerService.logDebug(existingIframe);\n            }\n\n            // after sending three messages with no response, fail.\n            if (this.outstandingMessages > 3) {\n                this.loggerService.logError(\n                    `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\n                );\n            }\n        };\n\n        this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeatRunning = setInterval(pollServerSessionRecur, this.heartBeatInterval);\n        });\n    }\n\n    private clearScheduledHeartBeat() {\n        clearTimeout(this.scheduledHeartBeatRunning);\n        this.scheduledHeartBeatRunning = null;\n    }\n\n    private messageHandler(e: any) {\n        const existingIFrame = this.getExistingIframe();\n        this.outstandingMessages = 0;\n        if (\n            existingIFrame &&\n            this.configurationProvider.openIDConfiguration.stsServer.startsWith(e.origin) &&\n            e.source === existingIFrame.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            } else if (e.data === 'changed') {\n                this.loggerService.logDebug(e);\n                this.checkSessionReceived = true;\n                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n                this.checkSessionChangedInternal$.next(true);\n            } else {\n                this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    }\n\n    getExistingIframe() {\n        return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n    }\n\n    private bindMessageEventToIframe() {\n        const iframeMessageEvent = this.messageHandler.bind(this);\n        window.addEventListener('message', iframeMessageEvent, false);\n    }\n\n    private getOrCreateIframe() {\n        const existingIframe = this.getExistingIframe();\n\n        if (!existingIframe) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n        }\n\n        return existingIframe;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class SilentRenewService {\n    constructor(private configurationProvider: ConfigurationProvider, private iFrameService: IFrameService) {}\n\n    getOrCreateIframe(): HTMLIFrameElement {\n        const existingIframe = this.getExistingIframe();\n\n        if (!existingIframe) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        }\n\n        return existingIframe;\n    }\n\n    isSilentRenewConfigured() {\n        return (\n            !this.configurationProvider.openIDConfiguration.useRefreshToken && this.configurationProvider.openIDConfiguration.silentRenew\n        );\n    }\n\n    private getExistingIframe() {\n        return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\r\nimport { WINDOW } from '../window/window.reference';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RedirectService {\r\n    constructor(@Inject(WINDOW) private window: any) {}\r\n\r\n    redirectTo(url) {\r\n        this.window.location.href = url;\r\n    }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsService } from '../flows/flows.service';\nimport { CheckSessionService } from '../iframe/check-session.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RedirectService } from '../utils/redirect/redirect.service';\nimport { UrlService } from '../utils/url/url.service';\n\n@Injectable()\nexport class LogoffRevocationService {\n    constructor(\n        private dataService: DataService,\n        private storagePersistanceService: StoragePersistanceService,\n        private loggerService: LoggerService,\n        private urlService: UrlService,\n        private checkSessionService: CheckSessionService,\n        private flowsService: FlowsService,\n        private redirectService: RedirectService,\n        private configurationProvider: ConfigurationProvider\n    ) {}\n\n    // Logs out on the server and the local client.\n    // If the server state has changed, checksession, then only a local logout.\n    logoff(urlHandler?: (url: string) => any) {\n        this.loggerService.logDebug('logoff, remove auth ');\n        const endSessionUrl = this.getEndSessionUrl();\n        this.flowsService.resetAuthorizationData();\n\n        if (!endSessionUrl) {\n            this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            return;\n        }\n\n        if (this.checkSessionService.serverStateChanged()) {\n            this.loggerService.logDebug('only local login cleaned up, server session has changed');\n        } else if (urlHandler) {\n            urlHandler(endSessionUrl);\n        } else {\n            this.redirectService.redirectTo(endSessionUrl);\n        }\n    }\n\n    logoffLocal() {\n        this.flowsService.resetAuthorizationData();\n    }\n\n    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n    // only the access token is revoked. Then the logout run.\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n        if (!this.configurationProvider.wellKnownEndpoints?.revocationEndpoint) {\n            this.loggerService.logDebug('revocation endpoint not supported');\n            this.logoff(urlHandler);\n        }\n\n        if (this.storagePersistanceService.getRefreshToken()) {\n            return this.revokeRefreshToken().pipe(\n                switchMap((result) => this.revokeAccessToken(result)),\n                catchError((error) => {\n                    const errorMessage = `revoke token failed ${error}`;\n                    this.loggerService.logError(errorMessage);\n                    return throwError(errorMessage);\n                }),\n                tap(() => this.logoff(urlHandler))\n            );\n        } else {\n            return this.revokeAccessToken().pipe(\n                catchError((error) => {\n                    const errorMessage = `revoke access token failed ${error}`;\n                    this.loggerService.logError(errorMessage);\n                    return throwError(errorMessage);\n                }),\n                tap(() => this.logoff(urlHandler))\n            );\n        }\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an access token on the STS. If no token is provided, then the token from\n    // the storage is revoked. You can pass any token to revoke. This makes it possible to\n    // manage your own tokens. The is a public API.\n    revokeAccessToken(accessToken?: any) {\n        const accessTok = accessToken || this.storagePersistanceService.accessToken;\n        const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok);\n        const url = this.urlService.getRevocationEndpointUrl();\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this.dataService.post(url, body, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('revocation endpoint post response: ', response);\n                return of(response);\n            }),\n            catchError((error) => {\n                const errorMessage = `Revocation request failed ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeRefreshToken(refreshToken?: any) {\n        const refreshTok = refreshToken || this.storagePersistanceService.getRefreshToken();\n        const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok);\n        const url = this.urlService.getRevocationEndpointUrl();\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this.dataService.post(url, body, headers).pipe(\n            switchMap((response: any) => {\n                this.loggerService.logDebug('revocation endpoint post response: ', response);\n                return of(response);\n            }),\n            catchError((error) => {\n                const errorMessage = `Revocation request failed ${error}`;\n                this.loggerService.logError(errorMessage);\n                return throwError(errorMessage);\n            })\n        );\n    }\n\n    getEndSessionUrl(): string | null {\n        const idTokenHint = this.storagePersistanceService.idToken;\n        return this.urlService.createEndSessionUrl(idTokenHint);\n    }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { interval, Observable, of, Subject, Subscription, throwError } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../authState/auth-state.service';\r\nimport { AuthorizedState } from '../authState/authorized-state';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { UserService } from '../userData/user-service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { ValidationResult } from '../validation/validation-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CallbackService {\r\n    private runTokenValidationRunning: Subscription = null;\r\n    private scheduledHeartBeatInternal: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    private stsCallbackInternal$ = new Subject();\r\n\r\n    get stsCallback$() {\r\n        return this.stsCallbackInternal$.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private urlService: UrlService,\r\n        private flowsService: FlowsService,\r\n        private flowHelper: FlowHelper,\r\n        private configurationProvider: ConfigurationProvider,\r\n        private router: Router,\r\n        private flowsDataService: FlowsDataService,\r\n        private loggerService: LoggerService,\r\n        private silentRenewService: SilentRenewService,\r\n        private userService: UserService,\r\n        private authStateService: AuthStateService\r\n    ) {}\r\n\r\n    handlePossibleStsCallback(currentCallbackUrl: string) {\r\n        let callback$: Observable<any>;\r\n\r\n        if (!this.urlService.isCallbackFromSts()) {\r\n            callback$ = of(null);\r\n        } else if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            callback$ = this.authorizedCallbackWithCode(currentCallbackUrl);\r\n        } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\r\n            callback$ = this.authorizedImplicitFlowCallback();\r\n        }\r\n\r\n        return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\r\n    }\r\n\r\n    startTokenValidationPeriodically(repeatAfterSeconds: number) {\r\n        if (!!this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silentRenew) {\r\n            return;\r\n        }\r\n\r\n        const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\r\n\r\n        this.loggerService.logDebug(\r\n            `starting token validation check every ${repeatAfterSeconds}s (${millisecondsDelayBetweenTokenCheck}ms)`\r\n        );\r\n\r\n        const periodicallyCheck$ = interval(millisecondsDelayBetweenTokenCheck).pipe(\r\n            switchMap(() => {\r\n                const idToken = this.authStateService.getIdToken();\r\n                const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\r\n                const userDataFromStore = this.userService.getUserDataFromStore();\r\n\r\n                this.loggerService.logDebug(\r\n                    `Checking: silentRenewRunning: ${isSilentRenewRunning} id_token: ${!!idToken} userData: ${!!userDataFromStore}`\r\n                );\r\n\r\n                const shouldBeExecuted = userDataFromStore && !isSilentRenewRunning && idToken;\r\n\r\n                if (!shouldBeExecuted) {\r\n                    return of(null);\r\n                }\r\n\r\n                const idTokenHasExpired = this.authStateService.hasIdTokenExpired();\r\n                const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists();\r\n\r\n                if (!idTokenHasExpired && !accessTokenHasExpired) {\r\n                    return of(null);\r\n                }\r\n\r\n                this.loggerService.logDebug('IsAuthorized: id_token idTokenHasExpired, start silent renew if active');\r\n\r\n                if (!this.configurationProvider.openIDConfiguration.silentRenew) {\r\n                    this.flowsService.resetAuthorizationData();\r\n                    return of(null);\r\n                }\r\n\r\n                this.flowsDataService.setSilentRenewRunning();\r\n\r\n                if (this.flowHelper.isCurrentFlowCodeFlowWithRefeshTokens()) {\r\n                    // Refresh Session using Refresh tokens\r\n                    return this.refreshSessionWithRefreshTokens();\r\n                }\r\n\r\n                return this.refreshSessionWithIframe();\r\n            })\r\n        );\r\n\r\n        this.runTokenValidationRunning = periodicallyCheck$\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                    return throwError('periodically check failed');\r\n                })\r\n            )\r\n            .subscribe(() => {\r\n                if (this.flowHelper.isCurrentFlowCodeFlowWithRefeshTokens()) {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            });\r\n    }\r\n\r\n    private stopPeriodicallTokenCheck(): void {\r\n        if (this.scheduledHeartBeatInternal) {\r\n            clearTimeout(this.scheduledHeartBeatInternal);\r\n            this.scheduledHeartBeatInternal = null;\r\n            this.runTokenValidationRunning.unsubscribe();\r\n            this.runTokenValidationRunning = null;\r\n        }\r\n    }\r\n\r\n    // Code Flow Callback\r\n    private authorizedCallbackWithCode(urlToCheck: string) {\r\n        return this.flowsService.processCodeFlowCallback(urlToCheck).pipe(\r\n            tap((callbackContext) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.postLoginRoute]);\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                this.flowsDataService.resetSilentRenewRunning();\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Implicit Flow Callback\r\n    private authorizedImplicitFlowCallback(hash?: string) {\r\n        return this.flowsService.processImplicitFlowCallback(hash).pipe(\r\n            tap((callbackContext) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.postLoginRoute]);\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                this.flowsDataService.resetSilentRenewRunning();\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private refreshSessionWithIframe(): Observable<boolean> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize Iframe renew');\r\n        const url = this.urlService.getRefreshSessionSilentRenewUrl();\r\n        return this.sendAuthorizeReqestUsingSilentRenew(url);\r\n    }\r\n\r\n    private refreshSessionWithRefreshTokens() {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        return this.flowsService.processRefreshToken().pipe(\r\n            catchError((error) => {\r\n                if (!this.configurationProvider.openIDConfiguration.triggerAuthorizationResultEvent /* TODO && !this.isRenewProcess */) {\r\n                    this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorizedRoute]);\r\n                }\r\n                this.stopPeriodicallTokenCheck();\r\n                this.flowsService.resetAuthorizationData();\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private sendAuthorizeReqestUsingSilentRenew(url: string): Observable<boolean> {\r\n        const sessionIframe = this.silentRenewService.getOrCreateIframe();\r\n        this.initSilentRenewRequest();\r\n        this.loggerService.logDebug('sendAuthorizeReqestUsingSilentRenew for URL:' + url);\r\n\r\n        return new Observable((observer) => {\r\n            const onLoadHandler = () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n                this.loggerService.logDebug('removed event listener from IFrame');\r\n                observer.next(true);\r\n                observer.complete();\r\n            };\r\n            sessionIframe.addEventListener('load', onLoadHandler);\r\n            sessionIframe.src = url;\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        if (!e.detail) {\r\n            return;\r\n        }\r\n        if (this.flowHelper.isCurrentFlowCodeFlow()) {\r\n            const urlParts = e.detail.toString().split('?');\r\n            // Code Flow Callback silent renew iframe\r\n            this.codeFlowCallbackSilentRenewIframe(urlParts).subscribe(\r\n                () => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                },\r\n                (err: any) => {\r\n                    this.loggerService.logError('Error: ' + err);\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            );\r\n        } else {\r\n            // Implicit Flow Callback silent renew iframe\r\n            this.authorizedImplicitFlowCallback(e.detail).subscribe(\r\n                () => {\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                },\r\n                (err: any) => {\r\n                    this.loggerService.logError('Error: ' + err);\r\n                    this.flowsDataService.resetSilentRenewRunning();\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    private codeFlowCallbackSilentRenewIframe(urlParts) {\r\n        const params = new HttpParams({\r\n            fromString: urlParts[1],\r\n        });\r\n\r\n        const error = params.get('error');\r\n\r\n        if (error) {\r\n            this.authStateService.updateAndPublishAuthState({\r\n                authorizationState: AuthorizedState.Unauthorized,\r\n                validationResult: ValidationResult.LoginRequired,\r\n                isRenewProcess: true,\r\n            });\r\n            this.flowsService.resetAuthorizationData();\r\n            this.flowsDataService.setNonce('');\r\n            this.stopPeriodicallTokenCheck();\r\n            return throwError(error);\r\n        }\r\n\r\n        const code = params.get('code');\r\n        const state = params.get('state');\r\n        const sessionState = params.get('session_state');\r\n\r\n        const callbackContext = {\r\n            code,\r\n            refreshToken: null,\r\n            state,\r\n            sessionState,\r\n            authResult: null,\r\n            isRenewProcess: false,\r\n            jwtKeys: null,\r\n            validationResult: null,\r\n            existingIdToken: null,\r\n        };\r\n\r\n        return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext).pipe(\r\n            catchError((errorFromFlow) => {\r\n                this.stopPeriodicallTokenCheck();\r\n                this.flowsService.resetAuthorizationData();\r\n                return throwError(errorFromFlow);\r\n            })\r\n        );\r\n    }\r\n\r\n    private initSilentRenewRequest() {\r\n        const instanceId = Math.random();\r\n        this.silentRenewService.getOrCreateIframe();\r\n        // Support authorization via DOM events.\r\n        // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n        //      We only ever want the latest setup service to be reacting to this event.\r\n        this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n        const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\r\n            if (e.detail !== instanceId) {\r\n                window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n            }\r\n        }).bind(this);\r\n\r\n        window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n        window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n        window.dispatchEvent(\r\n            new CustomEvent('oidc-silent-renew-init', {\r\n                detail: instanceId,\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthOptions } from './auth-options';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { CallbackService } from './callback/callback.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { UserService } from './userData/user-service';\nimport { RedirectService } from './utils/redirect/redirect.service';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@Injectable()\nexport class OidcSecurityService {\n    private TOKEN_REFRESH_INTERVALL_IN_SECONDS = 3;\n\n    get configuration() {\n        return this.configurationProvider.configuration;\n    }\n\n    get userData$() {\n        return this.userService.userData$;\n    }\n\n    get isAuthenticated$() {\n        return this.authStateService.authorized$;\n    }\n\n    get checkSessionChanged$() {\n        return this.checkSessionService.checkSessionChanged$;\n    }\n\n    get stsCallback$() {\n        return this.callbackService.stsCallback$;\n    }\n\n    constructor(\n        private checkSessionService: CheckSessionService,\n        private silentRenewService: SilentRenewService,\n        private userService: UserService,\n        private tokenValidationService: TokenValidationService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private configurationProvider: ConfigurationProvider,\n        private urlService: UrlService,\n        private authStateService: AuthStateService,\n        private flowsDataService: FlowsDataService,\n        private flowsService: FlowsService,\n        private callbackService: CallbackService,\n        private logoffRevocationService: LogoffRevocationService,\n        private redirectService: RedirectService\n    ) {}\n\n    checkAuth(): Observable<boolean> {\n        if (!this.configurationProvider.hasValidConfig()) {\n            this.loggerService.logError('Please provide a configuration before setting up the module');\n            return of(false);\n        }\n\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\n\n        const currentUrl = window.location.toString();\n\n        return this.callbackService.handlePossibleStsCallback(currentUrl).pipe(\n            map(() => {\n                const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n                if (isAuthenticated) {\n                    this.authStateService.setAuthorizedAndFireEvent();\n                    this.userService.publishUserdataIfExists();\n\n                    if (this.checkSessionService.isCheckSessionConfigured()) {\n                        this.checkSessionService.start();\n                    }\n\n                    this.callbackService.startTokenValidationPeriodically(this.TOKEN_REFRESH_INTERVALL_IN_SECONDS);\n\n                    if (this.silentRenewService.isSilentRenewConfigured()) {\n                        this.silentRenewService.getOrCreateIframe();\n                    }\n                }\n\n                this.loggerService.logDebug('checkAuth completed fire events, auth: ' + isAuthenticated);\n\n                return isAuthenticated;\n            })\n        );\n    }\n\n    getToken(): string {\n        return this.authStateService.getAccessToken();\n    }\n\n    getIdToken(): string {\n        return this.authStateService.getIdToken();\n    }\n\n    getRefreshToken(): string {\n        return this.authStateService.getRefreshToken();\n    }\n\n    getPayloadFromIdToken(encode = false): any {\n        const token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    }\n\n    setState(state: string): void {\n        this.flowsDataService.setAuthStateControl(state);\n    }\n\n    getState(): string {\n        return this.flowsDataService.getAuthStateControl();\n    }\n\n    // Code Flow with PCKE or Implicit Flow\n    authorize(authOptions?: AuthOptions) {\n        if (!this.configurationProvider.hasValidConfig()) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n\n        if (!this.tokenValidationService.configValidateResponseType(this.configurationProvider.openIDConfiguration.responseType)) {\n            this.loggerService.logError('Invalid response type!');\n            return;\n        }\n\n        this.flowsService.resetAuthorizationData();\n\n        this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n        const { urlHandler, customParams } = authOptions || {};\n\n        const url = this.urlService.getAuthorizeUrl(customParams);\n\n        if (urlHandler) {\n            urlHandler(url);\n        } else {\n            this.redirectService.redirectTo(url);\n        }\n    }\n\n    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n    // only the access token is revoked. Then the logout run.\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n        return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);\n    }\n\n    // Logs out on the server and the local client.\n    // If the server state has changed, checksession, then only a local logout.\n    logoff(urlHandler?: (url: string) => any) {\n        return this.logoffRevocationService.logoff(urlHandler);\n    }\n\n    logoffLocal() {\n        return this.logoffRevocationService.logoffLocal();\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes an access token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeAccessToken(accessToken?: any) {\n        return this.logoffRevocationService.revokeAccessToken(accessToken);\n    }\n\n    // https://tools.ietf.org/html/rfc7009\n    // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.\n    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n    // This makes it possible to manage your own tokens.\n    revokeRefreshToken(refreshToken?: any) {\n        return this.logoffRevocationService.revokeRefreshToken(refreshToken);\n    }\n\n    getEndSessionUrl(): string | null {\n        return this.logoffRevocationService.getEndSessionUrl();\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable()\r\nexport class BrowserStorageService implements AbstractSecurityStorage {\r\n    constructor(private configProvider: ConfigurationProvider, private loggerService: LoggerService) {}\r\n\r\n    read(key: string): any {\r\n        if (!this.hasStorage()) {\r\n            this.loggerService.logDebug(`Wanted to read '${key}' but Storage was undefined`);\r\n            return false;\r\n        }\r\n\r\n        const item = this.getStorage()?.getItem(key);\r\n\r\n        if (!item) {\r\n            this.loggerService.logDebug(`Wanted to read '${key}' but nothing was found`);\r\n            return false;\r\n        }\r\n\r\n        return JSON.parse(item);\r\n    }\r\n\r\n    write(key: string, value: any): boolean {\r\n        if (!this.hasStorage()) {\r\n            this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\r\n            return false;\r\n        }\r\n\r\n        const storage = this.getStorage();\r\n        if (!storage) {\r\n            this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\r\n            return false;\r\n        }\r\n\r\n        value = value || null;\r\n\r\n        storage.setItem(`${key}`, JSON.stringify(value));\r\n        return true;\r\n    }\r\n\r\n    private getStorage() {\r\n        return this.configProvider.openIDConfiguration?.storage;\r\n    }\r\n\r\n    private hasStorage() {\r\n        return typeof Storage !== 'undefined';\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\n        if (!value1 || !value2) {\n            return false;\n        }\n\n        if (this.bothValuesAreArrays(value1, value2)) {\n            return this.arraysEqual(value1 as any[], value2 as any[]);\n        }\n\n        if (this.bothValuesAreStrings(value1, value2)) {\n            return value1 === value2;\n        }\n\n        if (this.bothValuesAreObjects(value1, value2)) {\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n        }\n\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\n                return value1[0] === value2;\n            }\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\n                return value2[0] === value1;\n            }\n        }\n    }\n\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n    }\n\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\n    }\n\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsString(value1) && this.valueIsString(value2);\n    }\n\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\n        return Array.isArray(value1) && Array.isArray(value2);\n    }\n\n    private valueIsString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    private valueIsObject(value: any) {\n        return typeof value === 'object';\n    }\n\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DataService } from './api/data.service';\nimport { HttpBaseService } from './api/http-base.service';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { OidcConfigService } from './config/config.service';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { RandomService } from './flows/random/random.service';\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { IFrameService } from './iframe/existing-iframe.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { OidcSecurityService } from './oidc.security.service';\nimport { PublicEventsService } from './public-events/public-events.service';\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\nimport { BrowserStorageService } from './storage/browser-storage.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { EqualityService } from './utils/equality/equality.service';\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { WINDOW, _window } from './utils/window/window.reference';\nimport { StateValidationService } from './validation/state-validation.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [],\n    exports: [],\n})\nexport class AuthModule {\n    static forRoot(token: Token = {}) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                PublicEventsService,\n                FlowHelper,\n                OidcSecurityService,\n                TokenValidationService,\n                PlatformProvider,\n                CheckSessionService,\n                FlowsDataService,\n                FlowsService,\n                SilentRenewService,\n                ConfigurationProvider,\n                LogoffRevocationService,\n                UserService,\n                RandomService,\n                HttpBaseService,\n                UrlService,\n                AuthStateService,\n                SigninKeyDataService,\n                StoragePersistanceService,\n                TokenHelperService,\n                LoggerService,\n                IFrameService,\n                EqualityService,\n                DataService,\n                StateValidationService,\n                {\n                    provide: AbstractSecurityStorage,\n                    useClass: token.storage || BrowserStorageService,\n                },\n                { provide: WINDOW, useFactory: _window, deps: [] },\n            ],\n        };\n    }\n}\n\nexport type Type<T> = new (...args: any[]) => T;\n\nexport interface Token {\n    storage?: Type<any>;\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c: any[] = [];\n}\n"],"names":["HttpClient","Injectable","HttpHeaders","isPlatformBrowser","Inject","PLATFORM_ID","LogLevel","EventTypes","ReplaySubject","AuthorizedState","KEYUTIL","KJUR","hextob64u","BehaviorSubject","map","tap","of","switchMap","throwError","InjectionToken","HttpParams","oneLineTrim","ValidationResult","catchError","NgZone","Subject","interval","Observable","Router","NgModule","CommonModule"],"mappings":"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"}