import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { AuthorizedState } from '../authState/authorized-state';
import { ConfigurationProvider } from '../config/config.provider';
import { AbstractSecurityStorage } from './abstract-security-storage';
let StoragePersistanceService = class StoragePersistanceService {
    constructor(oidcSecurityStorage, configurationProvider) {
        this.oidcSecurityStorage = oidcSecurityStorage;
        this.configurationProvider = configurationProvider;
        this.storageAuthResult = 'authorizationResult';
        this.storageAccessToken = 'authorizationData';
        this.storageIdToken = 'authorizationDataIdToken';
        this.storageAuthorizedState = 'storageAuthorizedState';
        this.storageUserData = 'userData';
        this.storageAuthNonce = 'authNonce';
        this.storageCodeVerifier = 'codeVerifier';
        this.storageAuthStateControl = 'authStateControl';
        this.storageSessionState = 'session_state';
        this.storageSilentRenewRunning = 'storageSilentRenewRunning';
        this.storageAccessTokenExpiresIn = 'access_token_expires_at';
    }
    get authResult() {
        return this.retrieve(this.storageAuthResult);
    }
    set authResult(value) {
        var _a;
        this.store(this.storageAuthResult, value);
        const expiresIn = (_a = this.authResult) === null || _a === void 0 ? void 0 : _a.expires_in;
        if (expiresIn) {
            const accessTokenExpiryTime = new Date().valueOf() + expiresIn * 1000;
            this.accessTokenExpiresIn = accessTokenExpiryTime;
        }
    }
    get accessToken() {
        return this.retrieve(this.storageAccessToken) || '';
    }
    set accessToken(value) {
        this.store(this.storageAccessToken, value);
    }
    get idToken() {
        return this.retrieve(this.storageIdToken) || '';
    }
    set idToken(value) {
        this.store(this.storageIdToken, value);
    }
    get authorizedState() {
        return this.retrieve(this.storageAuthorizedState);
    }
    set authorizedState(value) {
        this.store(this.storageAuthorizedState, value);
    }
    get userData() {
        return this.retrieve(this.storageUserData);
    }
    set userData(value) {
        this.store(this.storageUserData, value);
    }
    get authNonce() {
        return this.retrieve(this.storageAuthNonce) || '';
    }
    set authNonce(value) {
        this.store(this.storageAuthNonce, value);
    }
    get codeVerifier() {
        return this.retrieve(this.storageCodeVerifier) || '';
    }
    set codeVerifier(value) {
        this.store(this.storageCodeVerifier, value);
    }
    get authStateControl() {
        return this.retrieve(this.storageAuthStateControl) || '';
    }
    set authStateControl(value) {
        this.store(this.storageAuthStateControl, value);
    }
    get sessionState() {
        return this.retrieve(this.storageSessionState);
    }
    set sessionState(value) {
        this.store(this.storageSessionState, value);
    }
    get silentRenewRunning() {
        return this.retrieve(this.storageSilentRenewRunning) || '';
    }
    set silentRenewRunning(value) {
        this.store(this.storageSilentRenewRunning, value);
    }
    get accessTokenExpiresIn() {
        return this.retrieve(this.storageAccessTokenExpiresIn);
    }
    set accessTokenExpiresIn(value) {
        this.store(this.storageAccessTokenExpiresIn, value);
    }
    retrieve(key) {
        const keyToRead = this.createKeyWithPrefix(key);
        return this.oidcSecurityStorage.read(keyToRead);
    }
    store(key, value) {
        const keyToStore = this.createKeyWithPrefix(key);
        this.oidcSecurityStorage.write(keyToStore, value);
    }
    resetStorageFlowData() {
        this.store(this.storageSessionState, '');
        this.store(this.storageSilentRenewRunning, '');
        this.store(this.storageCodeVerifier, '');
        this.store(this.storageUserData, '');
    }
    resetAuthStateInStorage() {
        this.store(this.storageAuthorizedState, AuthorizedState.Unknown);
        this.store(this.storageAccessToken, '');
        this.store(this.storageIdToken, '');
        this.store(this.storageAuthResult, '');
    }
    getAccessToken() {
        return this.retrieve(this.storageAccessToken);
    }
    getIdToken() {
        return this.retrieve(this.storageIdToken);
    }
    getRefreshToken() {
        var _a;
        return (_a = this.authResult) === null || _a === void 0 ? void 0 : _a.refresh_token;
    }
    createKeyWithPrefix(key) {
        const prefix = this.configurationProvider.openIDConfiguration.clientId;
        return `${prefix}_${key}`;
    }
};
StoragePersistanceService.ctorParameters = () => [
    { type: AbstractSecurityStorage },
    { type: ConfigurationProvider }
];
StoragePersistanceService = __decorate([
    Injectable()
], StoragePersistanceService);
export { StoragePersistanceService };
//# sourceMappingURL=data:application/json;base64,