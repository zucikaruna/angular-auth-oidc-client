import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { AuthStateService } from './authState/auth-state.service';
import { CallbackService } from './callback/callback.service';
import { ConfigurationProvider } from './config/config.provider';
import { FlowsDataService } from './flows/flows-data.service';
import { FlowsService } from './flows/flows.service';
import { CheckSessionService } from './iframe/check-session.service';
import { SilentRenewService } from './iframe/silent-renew.service';
import { LoggerService } from './logging/logger.service';
import { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';
import { UserService } from './userData/user-service';
import { RedirectService } from './utils/redirect/redirect.service';
import { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';
import { UrlService } from './utils/url/url.service';
import { TokenValidationService } from './validation/token-validation.service';
let OidcSecurityService = class OidcSecurityService {
    constructor(checkSessionService, silentRenewService, userService, tokenValidationService, tokenHelperService, loggerService, configurationProvider, urlService, authStateService, flowsDataService, flowsService, callbackService, logoffRevocationService, redirectService) {
        this.checkSessionService = checkSessionService;
        this.silentRenewService = silentRenewService;
        this.userService = userService;
        this.tokenValidationService = tokenValidationService;
        this.tokenHelperService = tokenHelperService;
        this.loggerService = loggerService;
        this.configurationProvider = configurationProvider;
        this.urlService = urlService;
        this.authStateService = authStateService;
        this.flowsDataService = flowsDataService;
        this.flowsService = flowsService;
        this.callbackService = callbackService;
        this.logoffRevocationService = logoffRevocationService;
        this.redirectService = redirectService;
        this.TOKEN_REFRESH_INTERVALL_IN_SECONDS = 3;
    }
    get configuration() {
        return this.configurationProvider.configuration;
    }
    get userData$() {
        return this.userService.userData$;
    }
    get isAuthenticated$() {
        return this.authStateService.authorized$;
    }
    get checkSessionChanged$() {
        return this.checkSessionService.checkSessionChanged$;
    }
    get stsCallback$() {
        return this.callbackService.stsCallback$;
    }
    checkAuth() {
        if (!this.configurationProvider.hasValidConfig()) {
            this.loggerService.logError('Please provide a configuration before setting up the module');
            return of(false);
        }
        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);
        const currentUrl = window.location.toString();
        return this.callbackService.handlePossibleStsCallback(currentUrl).pipe(map(() => {
            const isAuthenticated = this.authStateService.areAuthStorageTokensValid();
            if (isAuthenticated) {
                this.authStateService.setAuthorizedAndFireEvent();
                this.userService.publishUserdataIfExists();
                if (this.checkSessionService.isCheckSessionConfigured()) {
                    this.checkSessionService.start();
                }
                this.callbackService.startTokenValidationPeriodically(this.TOKEN_REFRESH_INTERVALL_IN_SECONDS);
                if (this.silentRenewService.isSilentRenewConfigured()) {
                    this.silentRenewService.getOrCreateIframe();
                }
            }
            this.loggerService.logDebug('checkAuth completed fire events, auth: ' + isAuthenticated);
            return isAuthenticated;
        }));
    }
    getToken() {
        return this.authStateService.getAccessToken();
    }
    getIdToken() {
        return this.authStateService.getIdToken();
    }
    getRefreshToken() {
        return this.authStateService.getRefreshToken();
    }
    getPayloadFromIdToken(encode = false) {
        const token = this.getIdToken();
        return this.tokenHelperService.getPayloadFromToken(token, encode);
    }
    setState(state) {
        this.flowsDataService.setAuthStateControl(state);
    }
    getState() {
        return this.flowsDataService.getAuthStateControl();
    }
    // Code Flow with PCKE or Implicit Flow
    authorize(authOptions) {
        if (!this.configurationProvider.hasValidConfig()) {
            this.loggerService.logError('Well known endpoints must be loaded before user can login!');
            return;
        }
        if (!this.tokenValidationService.configValidateResponseType(this.configurationProvider.openIDConfiguration.responseType)) {
            this.loggerService.logError('Invalid response type!');
            return;
        }
        this.flowsService.resetAuthorizationData();
        this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');
        const { urlHandler, customParams } = authOptions || {};
        const url = this.urlService.getAuthorizeUrl(customParams);
        if (urlHandler) {
            urlHandler(url);
        }
        else {
            this.redirectService.redirectTo(url);
        }
    }
    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist
    // only the access token is revoked. Then the logout run.
    logoffAndRevokeTokens(urlHandler) {
        return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);
    }
    // Logs out on the server and the local client.
    // If the server state has changed, checksession, then only a local logout.
    logoff(urlHandler) {
        return this.logoffRevocationService.logoff(urlHandler);
    }
    logoffLocal() {
        return this.logoffRevocationService.logoffLocal();
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes an access token on the STS. This is only required in the code flow with refresh tokens.
    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.
    // This makes it possible to manage your own tokens.
    revokeAccessToken(accessToken) {
        return this.logoffRevocationService.revokeAccessToken(accessToken);
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.
    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.
    // This makes it possible to manage your own tokens.
    revokeRefreshToken(refreshToken) {
        return this.logoffRevocationService.revokeRefreshToken(refreshToken);
    }
    getEndSessionUrl() {
        return this.logoffRevocationService.getEndSessionUrl();
    }
};
OidcSecurityService.ctorParameters = () => [
    { type: CheckSessionService },
    { type: SilentRenewService },
    { type: UserService },
    { type: TokenValidationService },
    { type: TokenHelperService },
    { type: LoggerService },
    { type: ConfigurationProvider },
    { type: UrlService },
    { type: AuthStateService },
    { type: FlowsDataService },
    { type: FlowsService },
    { type: CallbackService },
    { type: LogoffRevocationService },
    { type: RedirectService }
];
OidcSecurityService = __decorate([
    Injectable()
], OidcSecurityService);
export { OidcSecurityService };
//# sourceMappingURL=data:application/json;base64,